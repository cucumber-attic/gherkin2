
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Tl implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"


  private final Listener listener;

  public Tl(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Tl.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   12,   13,   22,   23,   24,   25,   26,   27,   28,   29,
	   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
	   43,   45,   56,   57,   58,   60,   62,   67,   72,   77,   82,   86,
	   90,   92,   93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
	  103,  104,  105,  106,  107,  112,  119,  124,  128,  134,  137,  139,
	  145,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,
	  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
	  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
	  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
	  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
	  221,  223,  225,  227,  229,  231,  233,  235,  237,  239,  241,  243,
	  245,  247,  249,  251,  262,  263,  264,  266,  267,  268,  269,  270,
	  271,  272,  273,  274,  275,  284,  286,  294,  296,  298,  300,  302,
	  304,  306,  308,  310,  312,  314,  316,  318,  320,  322,  324,  326,
	  328,  330,  332,  334,  336,  338,  340,  342,  344,  346,  348,  350,
	  352,  354,  356,  358,  360,  362,  364,  366,  368,  370,  372,  374,
	  376,  378,  380,  382,  384,  386,  388,  390,  392,  394,  396,  398,
	  400,  402,  404,  406,  408,  410,  412,  414,  416,  418,  420,  422,
	  424,  426,  428,  430,  432,  434,  436,  438,  440,  442,  444,  446,
	  448,  450,  452,  454,  456,  458,  460,  462,  464,  466,  468,  470,
	  472,  474,  476,  478,  480,  482,  484,  486,  488,  490,  492,  494,
	  496,  498,  500,  502,  504,  506,  508,  510,  512,  514,  516,  518,
	  520,  522,  524,  526,  528,  530,  532,  534,  536,  538,  540,  542,
	  544,  546,  548,  550,  552,  554,  556,  558,  560,  562,  564,  566,
	  568,  570,  572,  574,  576,  578,  580,  582,  584,  586,  588,  590,
	  592,  593,  594,  595,  596,  597,  598,  599,  600,  601,  602,  603,
	  604,  605,  606,  607,  608,  609,  610,  611,  612,  613,  621,  623,
	  629,  631,  633,  635,  637,  639,  641,  643,  645,  647,  649,  651,
	  653,  655,  657,  659,  661,  663,  665,  667,  669,  671,  673,  675,
	  677,  679,  681,  683,  685,  687,  689,  691,  693,  695,  697,  699,
	  701,  703,  705,  707,  709,  711,  713,  715,  717,  719,  721,  723,
	  725,  727,  729,  731,  733,  735,  737,  739,  741,  743,  745,  747,
	  749,  751,  753,  755,  757,  759,  761,  763,  765,  767,  769,  771,
	  773,  775,  777,  779,  781,  783,  785,  787,  789,  791,  793,  795,
	  797,  799,  801,  803,  805,  807,  809,  810,  811,  812,  813,  814,
	  815,  816,  817,  818,  819,  820,  821,  822,  823,  824,  825,  826,
	  827,  828,  829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
	  839,  840,  841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
	  851,  852,  853,  854,  855,  856,  857,  866,  868,  876,  878,  880,
	  882,  884,  886,  888,  890,  892,  894,  896,  898,  900,  902,  904,
	  906,  908,  910,  912,  914,  916,  918,  920,  922,  924,  926,  928,
	  930,  932,  934,  936,  938,  940,  942,  944,  946,  948,  950,  952,
	  954,  956,  958,  960,  962,  964,  966,  968,  970,  972,  974,  976,
	  978,  980,  982,  984,  986,  989,  991,  993,  995,  997,  999, 1001,
	 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025,
	 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049,
	 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073,
	 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097,
	 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121,
	 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145,
	 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169,
	 1171, 1173, 1175, 1177, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	 1212, 1213, 1214, 1215, 1216, 1217, 1226, 1228, 1237, 1239, 1241, 1243,
	 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267,
	 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291,
	 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315,
	 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339,
	 1341, 1343, 1345, 1347, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364,
	 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388,
	 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412,
	 1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436,
	 1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460,
	 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484,
	 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508,
	 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532,
	 1534, 1536, 1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556,
	 1558, 1560, 1562, 1564, 1566, 1568, 1570, 1572, 1573, 1574
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -32,  -17,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	  -80, -123, -120, -119, -107, -105, -102,  -88,  -82,  -72,  -32,  -80,
	  -86,  -32,  -79, -115,  -32,  -80,  -86,  -32,  -79, -127,  -32,  -80,
	  -95,  -32,  -79, -127,   32,   10,   13,   10,   13,  -32,   10,   32,
	   34,   35,   37,   42,   64,  124,    9,   13,   34,   34,   10,   13,
	   10,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,
	    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,
	   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   13,
	   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,
	   32,   64,    9,   13,   32,  124,    9,   13,   10,   32,   92,  124,
	    9,   13,   10,   92,  124,   10,   92,   10,   32,   92,  124,    9,
	   13,  -32,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	   32,  -32,  -80,  -86,  -32,  -80,  -80,  -32,  -80,  -65,  -32,  -80,
	  -72,  -32,  -79, -115,  -32,  -80,  -91,  -32,  -80,  -65,  -32,  -80,
	  -92,  -32,  -80,  -65,  -32,  -80,  -78,  -32,  -79, -117,  -32,  -80,
	  -90,  -32,  -80,  -66,  -32,  -80,  -71,  -32,  -80,  -80,  -32,  -80,
	  -93,  -32,  -80,  -78,  -32,  -79, -127,   58,   10,   10,  -32,   10,
	   32,   35,  124,    9,   13,  -80,   10, -105,   10,  -32,   10,  -79,
	   10, -127,   10,  -32,   10,  -80,   10,  -93,   10,  -32,   10,  -80,
	   10,  -82,   10,  -32,   10,  -79,   10, -127,   10,   10,   58,  -32,
	   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,  -32,  -80,
	  -91,  -66,  -32,  -80,  -88,  -32,  -80, -126,   58,   10,   10,  -32,
	   10,   32,   35,   37,   42,   64,    9,   13,  -80,   10, -123, -120,
	 -107, -105, -102,  -82,  -72,   10,  -32,   10,  -80,   10,  -86,   10,
	  -32,   10,  -79,   10, -115,   10,  -32,   10,  -80,   10,  -86,   10,
	  -32,   10,  -79,   10, -127,   10,  -32,   10,  -80,   10,  -95,   10,
	  -32,   10,  -79,   10, -127,   10,   10,   32,   10,   32,  -32,   10,
	  -80,   10,  -86,   10,  -32,   10,  -80,   10,  -80,   10,  -32,   10,
	  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -72,   10,  -32,   10,
	  -79,   10, -115,   10,  -32,   10,  -80,   10,  -91,   10,  -32,   10,
	  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -92,   10,  -32,   10,
	  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -78,   10,  -32,   10,
	  -79,   10, -117,   10,  -32,   10,  -80,   10,  -66,   10,  -32,   10,
	  -80,   10,  -88,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,
	  -79,   10, -127,   10,  -32,   10,  -80,   10,  -93,   10,  -32,   10,
	  -80,   10,  -82,   10,  -32,   10,  -79,   10, -127,   10,   10,   58,
	  -32,   10,  -79,   10, -122,   10,  -32,   10,  -80,   10,  -86,   10,
	  -32,   10,  -79,   10, -115,   10,  -32,   10,  -80,   10,  -86,   10,
	  -32,   10,  -80,   10,  -84,   10,  -32,   10,  -80,   10,  -95,   10,
	  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -88,   10,
	  -32,   10,  -80,   10,  -90,   10,  -32,   10,  -80,   10,  -80,   10,
	  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -81,   10,
	  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -79,   10, -115,   10,
	  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -80,   10,  -65,   10,
	  -32,   10,  -80,   10,  -75,   10,  -32,   10,  -79,   10, -121,   10,
	  -32,   10,  -80,   10,  -74,   10,  -32,   10,  -80,   10, -126,   10,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,  -32,  -80,  -88,  -32,  -80,  -65,  -32,  -79,
	 -127,  -32,  -80,  -93,  -32,  -80,  -82,  -32,  -79, -127,   58,   10,
	   10,  -32,   10,   32,   35,   37,   64,    9,   13,  -80,   10, -119,
	 -107, -105,  -88,  -72,   10,  -32,   10,  -80,   10,  -90,   10,  -32,
	   10,  -80,   10,  -66,   10,  -32,   10,  -80,   10,  -71,   10,  -32,
	   10,  -80,   10,  -80,   10,  -32,   10,  -80,   10,  -93,   10,  -32,
	   10,  -80,   10,  -78,   10,  -32,   10,  -79,   10, -127,   10,   10,
	   58,  -32,   10,  -80,   10,  -91,   10,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -80,   10, -126,   10,  -32,   10,  -79,   10, -127,
	   10,  -32,   10,  -80,   10,  -93,   10,  -32,   10,  -80,   10,  -82,
	   10,  -32,   10,  -79,   10, -121,   10,  -32,   10,  -80,   10,  -86,
	   10,  -32,   10,  -80,   10,  -91,   10,  -32,   10,  -79,   10, -115,
	   10,  -32,   10,  -80,   10,  -81,   10,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -79,   10, -115,   10,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -75,
	   10,  -32,   10,  -79,   10, -121,   10,  -32,   10,  -80,   10,  -74,
	   10,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,  -32,  -79, -122,  -32,  -80,  -86,  -32,
	  -79, -115,  -32,  -80,  -86,  -32,  -80,  -84,  -32,  -80,  -95,  -32,
	  -80,  -65,  -32,  -80,  -88,  -32,  -80,  -90,  -32,  -79, -121,  -32,
	  -80,  -86,  -32,  -80,  -91,  -32,  -79, -115,  -32,  -80,  -81,  -32,
	  -80, -126,   58,   10,   10,  -32,   10,   32,   35,   37,   42,   64,
	    9,   13,  -80,   10, -123, -120, -107, -105, -102,  -82,  -72,   10,
	  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10, -115,   10,
	  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10, -127,   10,
	  -32,   10,  -80,   10,  -95,   10,  -32,   10,  -79,   10, -127,   10,
	   10,   32,   10,   32,  -32,   10,  -80,   10,  -86,   10,  -32,   10,
	  -80,   10,  -80,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,
	  -80,   10,  -72,   10,  -32,   10,  -79,   10, -115,   10,  -32,   10,
	  -80,   10,  -91,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,
	  -80,   10,  -92,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,
	  -80,   10,  -78,   10,  -32,   10,  -79,   10, -117,   10,  -32,   10,
	  -80,   10,  -91,  -66,   10,  -32,   10,  -80,   10,  -88,   10,  -32,
	   10,  -80,   10, -126,   10,   10,   58,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -79,   10, -127,
	   10,  -32,   10,  -80,   10,  -93,   10,  -32,   10,  -80,   10,  -82,
	   10,  -32,   10,  -79,   10, -127,   10,  -32,   10,  -79,   10, -122,
	   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10, -115,
	   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -80,   10,  -84,
	   10,  -32,   10,  -80,   10,  -95,   10,  -32,   10,  -80,   10,  -65,
	   10,  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -80,   10,  -90,
	   10,  -32,   10,  -80,   10,  -80,   10,  -32,   10,  -80,   10,  -65,
	   10,  -32,   10,  -80,   10,  -81,   10,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -79,   10, -115,   10,  -32,   10,  -80,   10,  -88,
	   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -80,   10,  -75,
	   10,  -32,   10,  -79,   10, -121,   10,  -32,   10,  -80,   10,  -74,
	   10,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,  -32,  -80,  -80,  -32,  -80,  -65,  -32,
	  -80,  -81,  -32,  -80,  -88,  -32,  -79, -115,  -32,  -80,  -88,  -32,
	  -80,  -65,  -32,  -80,  -75,  -32,  -79, -121,  -32,  -80,  -74,  -32,
	  -80, -126,   58,   10,   10,  -32,   10,   32,   35,   37,   42,   64,
	    9,   13,  -80,   10, -123, -120, -107, -105, -102,  -88,  -82,  -72,
	   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10, -115,
	   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10, -127,
	   10,  -32,   10,  -80,   10,  -95,   10,  -32,   10,  -79,   10, -127,
	   10,   10,   32,   10,   32,  -32,   10,  -80,   10,  -86,   10,  -32,
	   10,  -80,   10,  -80,   10,  -32,   10,  -80,   10,  -65,   10,  -32,
	   10,  -80,   10,  -72,   10,  -32,   10,  -79,   10, -115,   10,  -32,
	   10,  -80,   10,  -91,   10,  -32,   10,  -80,   10,  -65,   10,  -32,
	   10,  -80,   10,  -92,   10,  -32,   10,  -80,   10,  -65,   10,  -32,
	   10,  -80,   10,  -78,   10,  -32,   10,  -79,   10, -117,   10,  -32,
	   10,  -80,   10,  -91,  -66,   10,  -32,   10,  -80,   10,  -88,   10,
	  -32,   10,  -80,   10, -126,   10,   10,   58,  -32,   10,  -80,   10,
	  -88,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -79,   10,
	 -127,   10,  -32,   10,  -80,   10,  -93,   10,  -32,   10,  -80,   10,
	  -82,   10,  -32,   10,  -79,   10, -127,   10,  -32,   10,  -79,   10,
	 -122,   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -79,   10,
	 -115,   10,  -32,   10,  -80,   10,  -86,   10,  -32,   10,  -80,   10,
	  -84,   10,  -32,   10,  -80,   10,  -95,   10,  -32,   10,  -80,   10,
	  -65,   10,  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -80,   10,
	  -90,   10,  -32,   10,  -79,   10, -121,   10,  -32,   10,  -80,   10,
	  -86,   10,  -32,   10,  -80,   10,  -91,   10,  -32,   10,  -79,   10,
	 -115,   10,  -32,   10,  -80,   10,  -81,   10,  -32,   10,  -80,   10,
	  -80,   10,  -32,   10,  -80,   10,  -65,   10,  -32,   10,  -80,   10,
	  -81,   10,  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -79,   10,
	 -115,   10,  -32,   10,  -80,   10,  -88,   10,  -32,   10,  -80,   10,
	  -65,   10,  -32,   10,  -80,   10,  -75,   10,  -32,   10,  -79,   10,
	 -121,   10,  -32,   10,  -80,   10,  -74,   10,   10,   95,   10,   70,
	   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,
	   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,
	  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   10,    1,    9,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
	    2,    9,    1,    1,    2,    2,    3,    3,    3,    3,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    3,    5,    3,    2,    4,    3,    2,    4,
	    9,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    9,    1,    1,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    7,    2,    8,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    6,    2,    6,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    7,    2,    8,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    7,    2,    9,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    1,    1,    0,    0,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   12,   14,   24,   26,   28,   30,   32,   34,   36,   38,
	   40,   42,   44,   46,   48,   50,   52,   54,   56,   58,   60,   62,
	   65,   68,   79,   81,   83,   86,   89,   94,   99,  104,  109,  113,
	  117,  120,  122,  124,  126,  128,  130,  132,  134,  136,  138,  140,
	  142,  144,  146,  148,  150,  155,  162,  167,  171,  177,  181,  184,
	  190,  201,  203,  205,  207,  209,  211,  213,  215,  217,  219,  221,
	  223,  225,  227,  229,  231,  233,  235,  237,  239,  241,  243,  245,
	  247,  249,  251,  253,  255,  257,  259,  261,  263,  265,  267,  269,
	  271,  273,  275,  277,  279,  281,  283,  285,  287,  289,  291,  293,
	  295,  297,  299,  301,  303,  305,  307,  309,  311,  313,  315,  317,
	  324,  327,  330,  333,  336,  339,  342,  345,  348,  351,  354,  357,
	  360,  363,  366,  369,  380,  382,  384,  387,  389,  391,  393,  395,
	  397,  399,  401,  403,  405,  414,  417,  426,  429,  432,  435,  438,
	  441,  444,  447,  450,  453,  456,  459,  462,  465,  468,  471,  474,
	  477,  480,  483,  486,  489,  492,  495,  498,  501,  504,  507,  510,
	  513,  516,  519,  522,  525,  528,  531,  534,  537,  540,  543,  546,
	  549,  552,  555,  558,  561,  564,  567,  570,  573,  576,  579,  582,
	  585,  588,  591,  594,  597,  600,  603,  606,  609,  612,  615,  618,
	  621,  624,  627,  630,  633,  636,  639,  642,  645,  648,  651,  654,
	  657,  660,  663,  666,  669,  672,  675,  678,  681,  684,  687,  690,
	  693,  696,  699,  702,  705,  708,  711,  714,  717,  720,  723,  726,
	  729,  732,  735,  738,  741,  744,  747,  750,  753,  756,  759,  762,
	  765,  768,  771,  774,  777,  780,  783,  786,  789,  792,  795,  798,
	  801,  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,
	  837,  840,  843,  846,  849,  852,  855,  858,  861,  864,  867,  870,
	  873,  875,  877,  879,  881,  883,  885,  887,  889,  891,  893,  895,
	  897,  899,  901,  903,  905,  907,  909,  911,  913,  915,  923,  926,
	  933,  936,  939,  942,  945,  948,  951,  954,  957,  960,  963,  966,
	  969,  972,  975,  978,  981,  984,  987,  990,  993,  996,  999, 1002,
	 1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038,
	 1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074,
	 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110,
	 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146,
	 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182,
	 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1205, 1207, 1209, 1211, 1213,
	 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237,
	 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261,
	 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285,
	 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1308, 1311, 1320, 1323, 1326,
	 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 1362,
	 1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386, 1389, 1392, 1395, 1398,
	 1401, 1404, 1407, 1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434,
	 1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 1461, 1464, 1467, 1470,
	 1473, 1476, 1479, 1482, 1485, 1489, 1492, 1495, 1498, 1501, 1504, 1507,
	 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543,
	 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579,
	 1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615,
	 1618, 1621, 1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651,
	 1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 1678, 1681, 1684, 1687,
	 1690, 1693, 1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723,
	 1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 1750, 1753, 1756, 1759,
	 1762, 1765, 1768, 1771, 1774, 1777, 1779, 1781, 1783, 1785, 1787, 1789,
	 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813,
	 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837,
	 1839, 1841, 1843, 1845, 1847, 1849, 1858, 1861, 1871, 1874, 1877, 1880,
	 1883, 1886, 1889, 1892, 1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916,
	 1919, 1922, 1925, 1928, 1931, 1934, 1937, 1940, 1943, 1946, 1949, 1952,
	 1955, 1958, 1961, 1964, 1967, 1970, 1973, 1976, 1979, 1982, 1985, 1988,
	 1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 2015, 2018, 2021, 2024,
	 2027, 2030, 2033, 2036, 2040, 2043, 2046, 2049, 2052, 2055, 2058, 2061,
	 2064, 2067, 2070, 2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 2097,
	 2100, 2103, 2106, 2109, 2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133,
	 2136, 2139, 2142, 2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166, 2169,
	 2172, 2175, 2178, 2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2205,
	 2208, 2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 2241,
	 2244, 2247, 2250, 2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274, 2277,
	 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310, 2313,
	 2316, 2319, 2322, 2325, 2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349,
	 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2375, 2377
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    4,    3,    5,    6,    7,    8,    9,   10,    3,    0,
	   11,    0,   12,   13,   14,   15,   16,   17,   18,   19,   20,    0,
	   21,    0,   22,    0,   23,    0,   24,    0,   25,    0,   26,    0,
	   27,    0,   28,    0,   29,    0,   30,    0,   31,    0,   32,    0,
	   33,    0,   34,    0,   35,    0,   36,    0,   37,    0,   38,    0,
	   39,    0,   41,   42,   40,   44,   45,   43,    1,    4,    3,    5,
	    6,    7,    8,    9,   10,    3,    0,   46,    0,   47,    0,   49,
	   50,   48,   52,   53,   51,   56,   55,   57,   55,   54,   60,   59,
	   61,   59,   58,   60,   59,   62,   59,   58,   60,   59,   63,   59,
	   58,   65,   64,   64,    0,    4,   66,   66,    0,   68,   69,   67,
	    4,    0,   70,    0,   71,    0,   72,    0,   73,    0,   74,    0,
	   75,    0,   76,    0,   77,    0,   78,    0,   79,    0,   80,    0,
	   81,    0,   82,    0,   83,    0,    0,    0,    0,    0,   84,   85,
	   86,   85,   85,   88,   87,   84,    4,   89,    9,   89,    0,   90,
	   91,   90,    0,   94,   93,   95,   96,   93,   92,    0,   98,   99,
	   97,    0,   98,   97,   94,  100,   98,   99,  100,   97,  101,   94,
	  102,  103,  104,  105,  106,  107,  108,  102,    0,  109,    0,  110,
	    0,  111,    0,  112,    0,  113,    0,  114,    0,  115,    0,  116,
	    0,  117,    0,  118,    0,  119,    0,  120,    0,  121,    0,  122,
	    0,  123,    0,  124,    0,  125,    0,  126,    0,  127,    0,  128,
	    0,  129,    0,  130,    0,  131,    0,  132,    0,  133,    0,  134,
	    0,  135,    0,  136,    0,  137,    0,  138,    0,  139,    0,  140,
	    0,  141,    0,   38,    0,  142,    0,  143,    0,  144,    0,  145,
	    0,  146,    0,  147,    0,  148,    0,  149,    0,  150,    0,  151,
	    0,  152,    0,  153,    0,  154,    0,  155,    0,  156,    0,  157,
	    0,  158,    0,  159,    0,  160,    0,  161,    0,  162,    0,  163,
	    0,  165,  164,  167,  166,  168,  167,  169,  170,  170,  169,  166,
	  171,  167,  166,  172,  167,  166,  173,  167,  166,  174,  167,  166,
	  175,  167,  166,  176,  167,  166,  177,  167,  166,  178,  167,  166,
	  179,  167,  166,  180,  167,  166,  181,  167,  166,  182,  167,  166,
	  183,  167,  166,  184,  167,  166,  167,  185,  166,  186,  188,  187,
	  189,  190,  191,  192,  193,  194,  187,    0,  195,    0,  196,    0,
	  197,  198,    0,  199,    0,  200,    0,  201,    0,  202,    0,  203,
	    0,  204,    0,  205,    0,  207,  206,  209,  208,  210,  209,  211,
	  212,  213,  214,  212,  211,  208,  215,  209,  208,  216,  217,  218,
	  219,  220,  221,  222,  209,  208,  223,  209,  208,  224,  209,  208,
	  225,  209,  208,  226,  209,  208,  227,  209,  208,  228,  209,  208,
	  229,  209,  208,  230,  209,  208,  231,  209,  208,  232,  209,  208,
	  233,  209,  208,  234,  209,  208,  235,  209,  208,  236,  209,  208,
	  237,  209,  208,  238,  209,  208,  239,  209,  208,  240,  209,  208,
	  209,  241,  208,  209,  242,  208,  243,  209,  208,  244,  209,  208,
	  245,  209,  208,  246,  209,  208,  247,  209,  208,  248,  209,  208,
	  249,  209,  208,  250,  209,  208,  251,  209,  208,  252,  209,  208,
	  253,  209,  208,  254,  209,  208,  255,  209,  208,  256,  209,  208,
	  257,  209,  208,  258,  209,  208,  259,  209,  208,  260,  209,  208,
	  261,  209,  208,  262,  209,  208,  263,  209,  208,  264,  209,  208,
	  265,  209,  208,  266,  209,  208,  267,  209,  208,  268,  209,  208,
	  269,  209,  208,  270,  209,  208,  271,  209,  208,  272,  209,  208,
	  273,  209,  208,  274,  209,  208,  240,  209,  208,  275,  209,  208,
	  276,  209,  208,  277,  209,  208,  278,  209,  208,  279,  209,  208,
	  280,  209,  208,  281,  209,  208,  282,  209,  208,  240,  209,  208,
	  283,  209,  208,  284,  209,  208,  285,  209,  208,  286,  209,  208,
	  287,  209,  208,  288,  209,  208,  289,  209,  208,  290,  209,  208,
	  291,  209,  208,  292,  209,  208,  293,  209,  208,  294,  209,  208,
	  209,  241,  208,  295,  209,  208,  296,  209,  208,  297,  209,  208,
	  298,  209,  208,  299,  209,  208,  300,  209,  208,  301,  209,  208,
	  302,  209,  208,  303,  209,  208,  304,  209,  208,  305,  209,  208,
	  306,  209,  208,  307,  209,  208,  308,  209,  208,  309,  209,  208,
	  310,  209,  208,  311,  209,  208,  312,  209,  208,  313,  209,  208,
	  314,  209,  208,  315,  209,  208,  316,  209,  208,  317,  209,  208,
	  318,  209,  208,  319,  209,  208,  320,  209,  208,  280,  209,  208,
	  321,  209,  208,  322,  209,  208,  323,  209,  208,  324,  209,  208,
	  325,  209,  208,  326,  209,  208,  327,  209,  208,  328,  209,  208,
	  237,  209,  208,  329,  209,  208,  330,  209,  208,  331,  209,  208,
	  332,  209,  208,  333,  209,  208,  334,  209,  208,  335,  209,  208,
	  336,  209,  208,  337,  209,  208,  338,  209,  208,  339,  209,  208,
	  340,  209,  208,  341,  209,  208,  342,  209,  208,  343,  209,  208,
	  344,  209,  208,  345,  209,  208,  346,  209,  208,  347,  209,  208,
	  348,  209,  208,  349,  209,  208,  350,  209,  208,  351,  209,  208,
	  294,  209,  208,  209,  352,  208,  209,  353,  208,  209,  354,  208,
	  209,  355,  208,  209,  356,  208,  209,  357,  208,  209,  358,  208,
	  209,  359,  208,  209,  360,  208,  209,  361,  208,  209,  362,  208,
	  209,  363,  208,  209,  364,  208,  209,  365,  208,  366,    0,  367,
	    0,  368,    0,  369,    0,  370,    0,   38,    0,  371,    0,  372,
	    0,  373,    0,  374,    0,  375,    0,  376,    0,  377,    0,  378,
	    0,  379,    0,  380,    0,  381,    0,  382,    0,  383,    0,  385,
	  384,  387,  386,  388,  387,  389,  390,  391,  390,  389,  386,  392,
	  387,  386,  393,  394,  395,  396,  397,  387,  386,  398,  387,  386,
	  399,  387,  386,  400,  387,  386,  401,  387,  386,  402,  387,  386,
	  403,  387,  386,  404,  387,  386,  405,  387,  386,  406,  387,  386,
	  407,  387,  386,  408,  387,  386,  409,  387,  386,  410,  387,  386,
	  411,  387,  386,  412,  387,  386,  413,  387,  386,  414,  387,  386,
	  415,  387,  386,  416,  387,  386,  417,  387,  386,  418,  387,  386,
	  387,  419,  386,  420,  387,  386,  421,  387,  386,  422,  387,  386,
	  423,  387,  386,  424,  387,  386,  425,  387,  386,  426,  387,  386,
	  427,  387,  386,  418,  387,  386,  428,  387,  386,  429,  387,  386,
	  430,  387,  386,  431,  387,  386,  432,  387,  386,  433,  387,  386,
	  434,  387,  386,  435,  387,  386,  415,  387,  386,  436,  387,  386,
	  437,  387,  386,  438,  387,  386,  439,  387,  386,  440,  387,  386,
	  441,  387,  386,  442,  387,  386,  443,  387,  386,  444,  387,  386,
	  445,  387,  386,  446,  387,  386,  447,  387,  386,  448,  387,  386,
	  449,  387,  386,  425,  387,  386,  450,  387,  386,  451,  387,  386,
	  452,  387,  386,  453,  387,  386,  454,  387,  386,  455,  387,  386,
	  456,  387,  386,  457,  387,  386,  458,  387,  386,  459,  387,  386,
	  460,  387,  386,  461,  387,  386,  462,  387,  386,  463,  387,  386,
	  464,  387,  386,  465,  387,  386,  466,  387,  386,  467,  387,  386,
	  468,  387,  386,  469,  387,  386,  425,  387,  386,  387,  470,  386,
	  387,  471,  386,  387,  472,  386,  387,  473,  386,  387,  474,  386,
	  387,  475,  386,  387,  476,  386,  387,  477,  386,  387,  478,  386,
	  387,  479,  386,  387,  480,  386,  387,  481,  386,  387,  482,  386,
	  387,  483,  386,  484,    0,  485,    0,  486,    0,  487,    0,  488,
	    0,  489,    0,  490,    0,  491,    0,  492,    0,  493,    0,  494,
	    0,  495,    0,  496,    0,  497,    0,  498,    0,  499,    0,  500,
	    0,  501,    0,  502,    0,  503,    0,  504,    0,  505,    0,  506,
	    0,  507,    0,  508,    0,  509,    0,  368,    0,  510,    0,  511,
	    0,  512,    0,  513,    0,  514,    0,  515,    0,  516,    0,  517,
	    0,  518,    0,  519,    0,  520,    0,  521,    0,  522,    0,  523,
	    0,  524,    0,  525,    0,  526,    0,  527,    0,  528,    0,  530,
	  529,  532,  531,  533,  532,  534,  535,  536,  537,  535,  534,  531,
	  538,  532,  531,  539,  540,  541,  542,  543,  544,  545,  532,  531,
	  546,  532,  531,  547,  532,  531,  548,  532,  531,  549,  532,  531,
	  550,  532,  531,  551,  532,  531,  552,  532,  531,  553,  532,  531,
	  554,  532,  531,  555,  532,  531,  556,  532,  531,  557,  532,  531,
	  558,  532,  531,  559,  532,  531,  560,  532,  531,  561,  532,  531,
	  562,  532,  531,  563,  532,  531,  532,  564,  531,  532,  565,  531,
	  566,  532,  531,  567,  532,  531,  568,  532,  531,  569,  532,  531,
	  570,  532,  531,  571,  532,  531,  572,  532,  531,  573,  532,  531,
	  574,  532,  531,  575,  532,  531,  576,  532,  531,  577,  532,  531,
	  578,  532,  531,  579,  532,  531,  580,  532,  531,  581,  532,  531,
	  582,  532,  531,  583,  532,  531,  584,  532,  531,  585,  532,  531,
	  586,  532,  531,  587,  532,  531,  588,  532,  531,  589,  532,  531,
	  590,  532,  531,  591,  532,  531,  592,  532,  531,  593,  532,  531,
	  594,  532,  531,  595,  532,  531,  596,  532,  531,  597,  532,  531,
	  563,  532,  531,  598,  532,  531,  599,  532,  531,  600,  601,  532,
	  531,  602,  532,  531,  603,  532,  531,  604,  532,  531,  605,  532,
	  531,  606,  532,  531,  607,  532,  531,  532,  564,  531,  608,  532,
	  531,  609,  532,  531,  610,  532,  531,  611,  532,  531,  612,  532,
	  531,  563,  532,  531,  613,  532,  531,  614,  532,  531,  615,  532,
	  531,  616,  532,  531,  617,  532,  531,  618,  532,  531,  619,  532,
	  531,  620,  532,  531,  621,  532,  531,  622,  532,  531,  623,  532,
	  531,  607,  532,  531,  624,  532,  531,  625,  532,  531,  626,  532,
	  531,  627,  532,  531,  628,  532,  531,  629,  532,  531,  630,  532,
	  531,  631,  532,  531,  632,  532,  531,  633,  532,  531,  634,  532,
	  531,  635,  532,  531,  636,  532,  531,  637,  532,  531,  638,  532,
	  531,  639,  532,  531,  640,  532,  531,  641,  532,  531,  642,  532,
	  531,  643,  532,  531,  644,  532,  531,  645,  532,  531,  646,  532,
	  531,  647,  532,  531,  648,  532,  531,  649,  532,  531,  610,  532,
	  531,  650,  532,  531,  651,  532,  531,  652,  532,  531,  653,  532,
	  531,  654,  532,  531,  655,  532,  531,  656,  532,  531,  657,  532,
	  531,  560,  532,  531,  658,  532,  531,  659,  532,  531,  660,  532,
	  531,  661,  532,  531,  662,  532,  531,  663,  532,  531,  664,  532,
	  531,  665,  532,  531,  666,  532,  531,  667,  532,  531,  668,  532,
	  531,  669,  532,  531,  670,  532,  531,  671,  532,  531,  672,  532,
	  531,  673,  532,  531,  674,  532,  531,  675,  532,  531,  676,  532,
	  531,  677,  532,  531,  604,  532,  531,  532,  678,  531,  532,  679,
	  531,  532,  680,  531,  532,  681,  531,  532,  682,  531,  532,  683,
	  531,  532,  684,  531,  532,  685,  531,  532,  686,  531,  532,  687,
	  531,  532,  688,  531,  532,  689,  531,  532,  690,  531,  532,  691,
	  531,  692,    0,  693,    0,  694,    0,  695,    0,  696,    0,  697,
	    0,  698,    0,  699,    0,   35,    0,  700,    0,  701,    0,  702,
	    0,  703,    0,  704,    0,  705,    0,  706,    0,  707,    0,  708,
	    0,  709,    0,  710,    0,  711,    0,  712,    0,  713,    0,  714,
	    0,  715,    0,  716,    0,  717,    0,  718,    0,  719,    0,  720,
	    0,  721,    0,  722,    0,  723,    0,  724,    0,  726,  725,  728,
	  727,  729,  728,  730,  731,  732,  733,  731,  730,  727,  734,  728,
	  727,  735,  736,  737,  738,  739,  740,  741,  742,  728,  727,  743,
	  728,  727,  744,  728,  727,  745,  728,  727,  746,  728,  727,  747,
	  728,  727,  748,  728,  727,  749,  728,  727,  750,  728,  727,  751,
	  728,  727,  752,  728,  727,  753,  728,  727,  754,  728,  727,  755,
	  728,  727,  756,  728,  727,  757,  728,  727,  758,  728,  727,  759,
	  728,  727,  760,  728,  727,  728,  761,  727,  728,  762,  727,  763,
	  728,  727,  764,  728,  727,  765,  728,  727,  766,  728,  727,  767,
	  728,  727,  768,  728,  727,  769,  728,  727,  770,  728,  727,  771,
	  728,  727,  772,  728,  727,  773,  728,  727,  774,  728,  727,  775,
	  728,  727,  776,  728,  727,  777,  728,  727,  778,  728,  727,  779,
	  728,  727,  780,  728,  727,  781,  728,  727,  782,  728,  727,  783,
	  728,  727,  784,  728,  727,  785,  728,  727,  786,  728,  727,  787,
	  728,  727,  788,  728,  727,  789,  728,  727,  790,  728,  727,  791,
	  728,  727,  792,  728,  727,  793,  728,  727,  794,  728,  727,  760,
	  728,  727,  795,  728,  727,  796,  728,  727,  797,  798,  728,  727,
	  799,  728,  727,  800,  728,  727,  801,  728,  727,  802,  728,  727,
	  803,  728,  727,  804,  728,  727,  728,  761,  727,  805,  728,  727,
	  806,  728,  727,  807,  728,  727,  808,  728,  727,  809,  728,  727,
	  760,  728,  727,  810,  728,  727,  811,  728,  727,  812,  728,  727,
	  813,  728,  727,  814,  728,  727,  815,  728,  727,  816,  728,  727,
	  817,  728,  727,  818,  728,  727,  819,  728,  727,  820,  728,  727,
	  804,  728,  727,  821,  728,  727,  822,  728,  727,  823,  728,  727,
	  824,  728,  727,  825,  728,  727,  826,  728,  727,  827,  728,  727,
	  828,  728,  727,  829,  728,  727,  830,  728,  727,  831,  728,  727,
	  832,  728,  727,  833,  728,  727,  834,  728,  727,  835,  728,  727,
	  836,  728,  727,  837,  728,  727,  838,  728,  727,  839,  728,  727,
	  840,  728,  727,  841,  728,  727,  842,  728,  727,  843,  728,  727,
	  844,  728,  727,  845,  728,  727,  846,  728,  727,  807,  728,  727,
	  847,  728,  727,  848,  728,  727,  849,  728,  727,  850,  728,  727,
	  851,  728,  727,  852,  728,  727,  853,  728,  727,  854,  728,  727,
	  855,  728,  727,  856,  728,  727,  857,  728,  727,  858,  728,  727,
	  859,  728,  727,  860,  728,  727,  801,  728,  727,  861,  728,  727,
	  862,  728,  727,  863,  728,  727,  864,  728,  727,  865,  728,  727,
	  866,  728,  727,  867,  728,  727,  868,  728,  727,  757,  728,  727,
	  869,  728,  727,  870,  728,  727,  871,  728,  727,  872,  728,  727,
	  873,  728,  727,  874,  728,  727,  875,  728,  727,  876,  728,  727,
	  877,  728,  727,  878,  728,  727,  879,  728,  727,  880,  728,  727,
	  881,  728,  727,  882,  728,  727,  883,  728,  727,  884,  728,  727,
	  885,  728,  727,  886,  728,  727,  887,  728,  727,  888,  728,  727,
	  801,  728,  727,  728,  889,  727,  728,  890,  727,  728,  891,  727,
	  728,  892,  727,  728,  893,  727,  728,  894,  727,  728,  895,  727,
	  728,  896,  727,  728,  897,  727,  728,  898,  727,  728,  899,  727,
	  728,  900,  727,  728,  901,  727,  728,  902,  727,  903,    0,    3,
	    0,  904,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,  823,   25,   25,   26,   36,   38,   22,   52,   55,    3,
	    4,   61,   95,  136,  306,  414,  441,  617,  626,    5,    6,    7,
	    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
	   20,   21,   22,   23,   24,   25,   37,   24,   25,   37,   27,   28,
	   29,   30,   29,   29,   30,   29,   31,   31,   31,   32,   31,   31,
	   31,   32,   33,   34,   35,   25,   35,   36,   25,   37,   39,   40,
	   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,  825,
	   53,   54,   25,   53,   52,   54,   55,   56,   57,   59,   60,   58,
	   56,   57,   58,   56,   59,    2,   60,   26,   36,   38,   22,   52,
	   55,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
	   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
	   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   96,   97,
	   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
	  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  118,  119,
	  120,  119,   25,  121,  122,  123,  124,  125,  126,  127,  128,  129,
	  130,  131,  132,  133,  134,  135,    2,   25,   25,   26,   36,   38,
	   22,   52,   55,  137,  138,  139,  300,  140,  141,  142,  143,  144,
	  145,  146,  147,  148,  147,  148,  149,  148,   25,  286,  169,  150,
	  151,  170,  204,  213,  226,  253,  262,  152,  153,  154,  155,  156,
	  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
	  169,  135,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
	  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
	  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  205,
	  206,  207,  208,  209,  210,  211,  212,  214,  215,  216,  217,  218,
	  219,  220,  221,  222,  223,  224,  225,  227,  228,  229,  230,  231,
	  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
	  244,  245,  246,  247,  248,  249,  250,  251,  252,  254,  255,  256,
	  257,  258,  259,  260,  261,  263,  264,  265,  266,  267,  268,  269,
	  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
	  282,  283,  284,  285,  287,  288,  289,  290,  291,  292,  293,  294,
	  295,  296,  297,  298,  299,   25,  301,  302,  303,  304,  305,  307,
	  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
	  320,  321,  320,  321,  322,  321,   25,  400,  323,  324,  346,  355,
	  364,  379,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
	  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  135,
	  347,  348,  349,  350,  351,  352,  353,  354,  356,  357,  358,  359,
	  360,  361,  362,  363,  365,  366,  367,  368,  369,  370,  371,  372,
	  373,  374,  375,  376,  377,  378,  380,  381,  382,  383,  384,  385,
	  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
	  398,  399,  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
	  411,  412,  413,   25,  415,  416,  417,  418,  419,  420,  421,  422,
	  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
	  435,  436,  437,  438,  439,  440,  442,  443,  444,  445,  446,  447,
	  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
	  460,  461,  462,  461,  462,  463,  462,   25,  603,  483,  464,  465,
	  484,  518,  534,  546,  573,  582,  466,  467,  468,  469,  470,  471,
	  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,
	  135,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,
	  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
	  508,  509,  510,  511,  512,  513,  514,  515,  516,  517,  519,  520,
	  521,  528,  522,  523,  524,  525,  526,  527,  529,  530,  531,  532,
	  533,  535,  536,  537,  538,  539,  540,  541,  542,  543,  544,  545,
	  547,  548,  549,  550,  551,  552,  553,  554,  555,  556,  557,  558,
	  559,  560,  561,  562,  563,  564,  565,  566,  567,  568,  569,  570,
	  571,  572,  574,  575,  576,  577,  578,  579,  580,  581,  583,  584,
	  585,  586,  587,  588,  589,  590,  591,  592,  593,  594,  595,  596,
	  597,  598,  599,  600,  601,  602,  604,  605,  606,  607,  608,  609,
	  610,  611,  612,  613,  614,  615,  616,   25,  618,  619,  620,  621,
	  622,  623,  624,  625,  627,  628,  629,  630,  631,  632,  633,  634,
	  635,  636,  637,  638,  639,  640,  641,  642,  643,  644,  645,  646,
	  647,  648,  649,  650,  651,  652,  653,  652,  653,  654,  653,   25,
	  809,  674,  655,  656,  675,  709,  725,  737,  764,  779,  788,  657,
	  658,  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,  669,
	  670,  671,  672,  673,  674,  135,  676,  677,  678,  679,  680,  681,
	  682,  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,  693,
	  694,  695,  696,  697,  698,  699,  700,  701,  702,  703,  704,  705,
	  706,  707,  708,  710,  711,  712,  719,  713,  714,  715,  716,  717,
	  718,  720,  721,  722,  723,  724,  726,  727,  728,  729,  730,  731,
	  732,  733,  734,  735,  736,  738,  739,  740,  741,  742,  743,  744,
	  745,  746,  747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
	  757,  758,  759,  760,  761,  762,  763,  765,  766,  767,  768,  769,
	  770,  771,  772,  773,  774,  775,  776,  777,  778,  780,  781,  782,
	  783,  784,  785,  786,  787,  789,  790,  791,  792,  793,  794,  795,
	  796,  797,  798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
	  808,  810,  811,  812,  813,  814,  815,  816,  817,  818,  819,  820,
	  821,  822,   25,  824,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,    0,    0,   54,    3,    1,    0,   29,    1,   35,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  149,  126,    0,  110,   23,    0,    0,
	    7,  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,
	  122,   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   27,  118,   27,   51,    0,    0,    0,   37,   37,   54,   37,
	   87,    0,    0,   39,    0,   96,    0,   93,   90,   41,   96,   90,
	   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	   84,    0,   81,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   21,   63,   31,  130,   60,   57,   31,
	   63,   57,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,   84,    0,   78,   33,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,   84,    0,   69,   33,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,   84,    0,   72,   33,   84,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   15,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,   75,
	   33,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   17,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 825;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 991 "java/src/main/java/gherkin/lexer/Tl.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
    
// line 998 "java/src/main/java/gherkin/lexer/Tl.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1259 "java/src/main/java/gherkin/lexer/Tl.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1291 "java/src/main/java/gherkin/lexer/Tl.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tl.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

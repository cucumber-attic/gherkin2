
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Tt implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"


  private final Listener listener;

  public Tt(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Tt.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   14,   20,   21,   22,   23,   25,   27,   40,   42,   44,
	   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
	   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
	   69,   70,   71,   72,   81,   85,   87,   89,   91,   93,   95,   97,
	   99,  101,  103,  116,  117,  118,  121,  122,  123,  124,  125,  126,
	  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  139,
	  141,  146,  151,  156,  161,  165,  169,  171,  172,  173,  174,  175,
	  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  191,
	  198,  203,  207,  213,  216,  218,  224,  237,  240,  242,  244,  246,
	  248,  250,  252,  254,  256,  258,  260,  262,  264,  266,  268,  270,
	  272,  274,  276,  278,  280,  282,  284,  286,  288,  290,  292,  294,
	  296,  298,  300,  302,  304,  306,  308,  310,  312,  314,  316,  318,
	  320,  322,  324,  327,  329,  331,  333,  335,  337,  339,  341,  343,
	  345,  347,  349,  351,  353,  355,  357,  359,  361,  363,  365,  367,
	  369,  371,  373,  376,  378,  380,  382,  384,  386,  388,  390,  392,
	  394,  396,  398,  400,  402,  404,  406,  408,  410,  412,  414,  416,
	  418,  420,  422,  424,  426,  428,  430,  432,  434,  436,  438,  440,
	  442,  444,  446,  448,  450,  452,  454,  456,  458,  460,  462,  464,
	  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
	  477,  478,  479,  480,  488,  490,  492,  494,  496,  498,  500,  502,
	  504,  506,  508,  510,  512,  514,  516,  518,  520,  522,  524,  526,
	  528,  530,  532,  534,  536,  538,  540,  542,  544,  546,  548,  550,
	  552,  554,  556,  558,  560,  562,  564,  566,  567,  568,  569,  570,
	  571,  572,  573,  574,  575,  576,  577,  578,  579,  580,  581,  592,
	  598,  600,  602,  604,  606,  608,  610,  612,  614,  616,  618,  620,
	  622,  624,  626,  628,  630,  632,  634,  636,  638,  640,  642,  644,
	  646,  648,  650,  652,  654,  656,  658,  660,  662,  664,  666,  668,
	  670,  672,  674,  676,  678,  680,  682,  684,  686,  688,  690,  692,
	  694,  696,  698,  700,  702,  704,  706,  709,  711,  713,  715,  717,
	  719,  721,  723,  725,  727,  729,  731,  733,  735,  737,  739,  741,
	  743,  745,  747,  749,  751,  753,  756,  758,  760,  762,  764,  766,
	  768,  770,  772,  774,  776,  778,  780,  782,  784,  786,  788,  790,
	  792,  794,  796,  798,  800,  802,  804,  806,  808,  812,  814,  816,
	  818,  820,  822,  824,  826,  828,  830,  832,  834,  836,  838,  840,
	  842,  844,  846,  848,  850,  852,  854,  856,  858,  860,  862,  864,
	  866,  868,  869,  870,  871,  872,  873,  874,  875,  876,  878,  879,
	  880,  881,  882,  883,  884,  885,  886,  887,  888,  889,  890,  891,
	  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,  902,  903,
	  904,  905,  906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
	  916,  917,  918,  919,  920,  921,  922,  923,  924,  926,  927,  928,
	  929,  930,  931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
	  941,  942,  943,  944,  945,  946,  947,  948,  949,  950,  951,  962,
	  968,  970,  972,  974,  976,  978,  980,  982,  984,  986,  988,  990,
	  992,  994,  996,  998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014,
	 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038,
	 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062,
	 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1079, 1081, 1083, 1085, 1087,
	 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111,
	 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1135, 1137,
	 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161,
	 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185,
	 1187, 1189, 1191, 1192, 1193, 1204, 1211, 1213, 1215, 1217, 1219, 1221,
	 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245,
	 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269,
	 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293,
	 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317,
	 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1338, 1340, 1342,
	 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366,
	 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 1385, 1387, 1389, 1391,
	 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415,
	 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1441,
	 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465,
	 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489,
	 1491, 1493, 1495, 1497, 1498, 1499
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -48,  -46,  -45,  -17,   10,   32,   34,   35,   37,   42,   64,  124,
	    9,   13, -110, -102, -101, -100,  -99,  -95,  -45, -103,   32,   10,
	   13,   10,   13,  -48,  -46,  -45,   10,   32,   34,   35,   37,   42,
	   64,  124,    9,   13,  -82,  -70,  -48,  -47,  -73,  -48,  -75,  -48,
	  -67,  -47, -121,  -45, -103,  -48,  -69,  -48,  -75,  -48,  -70,  -48,
	  -69,  -48,  -75,  -48,  -69,  -48,  -75,  -48,  -70,   58,   10,   10,
	  -48,  -46,   10,   32,   35,   37,   64,    9,   13, -102, -100,  -95,
	   10,  -48,   10,  -75,   10,  -47,   10, -128,   10,  -48,   10,  -75,
	   10,  -47,   10, -120,   10,   10,   58,  -48,  -46,  -45,   10,   32,
	   34,   35,   37,   42,   64,  124,    9,   13, -104,  -48,  -77,  -71,
	  -68,  -45, -103,  -47, -128,  -47, -126,  -48,  -72,  -48,  -70,  -48,
	  -68,  -48,  -80,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,
	   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,
	   95,   69,   78,   68,   95,   37,   13,   32,   64,    9,   10,    9,
	   10,   13,   32,   64,   11,   12,   10,   32,   64,    9,   13,   32,
	  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,
	   10,   92,   10,   32,   92,  124,    9,   13,  -48,  -46,  -45,   10,
	   32,   34,   35,   37,   42,   64,  124,    9,   13,  -48,  -45,   10,
	  -72,   10,  -47,   10, -127,   10,  -48,   10,  -80,   10,  -48,   10,
	  -69,   10,  -48,   10,  -69,   10,  -48,   10,  -80,   10,  -47,   10,
	 -128,   10,  -87,   10,  -48,   10,  -68,   10,  -48,   10,  -70,   10,
	  -48,   10,  -72,   10,  -48,   10,  -67,   10,  -48,   10,  -69,   10,
	  -48,   10,  -75,   10,  -48,   10,  -70,   10,  -47,   10, -122,   10,
	  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,
	  -47,   10, -128,   10,  -48,   10,  -72,   10,  -48,   10,  -71,   10,
	  -48,   10,   58,  -67,   10,  -47,   10, -117,   10,  -46,   10,  -93,
	   10,   10,   32,  -47,   10, -126,   10,  -45,   10,  -87,   10,  -48,
	   10,  -73,   10,  -48,   10,  -75,   10,  -48,   10,  -69,   10,  -48,
	   10,  -75,   10,  -47,   10, -120,   10,  -48,   10,  -75,   10,  -82,
	   10,  -48,  -47,   10,  -73,   10,  -48,   10,  -75,   10,  -48,   10,
	  -67,   10,  -47,   10, -121,   10,  -45,   10, -103,   10,  -48,   10,
	  -69,   10,  -48,   10,  -75,   10,  -48,   10,  -70,   10,  -48,   10,
	  -69,   10,  -48,   10,  -75,   10, -128,   10,  -48,   10,  -67,   10,
	  -45,   10, -103,   10,  -48,   10,  -70,   10,  -48,   10,  -69,   10,
	  -45,   10, -103,   10,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37, -128,  -48,  -67,  -45,
	 -103,  -48,  -70,  -48,  -69,  -45, -103,  -47, -128,   58,   10,   10,
	  -48,  -46,   10,   32,   35,  124,    9,   13, -100,   10,  -45,   10,
	  -87,   10,  -48,   10,  -68,   10,  -48,   10,  -70,   10,  -48,   10,
	  -72,   10,  -48,   10,  -67,   10,  -48,   10,  -69,   10,  -48,   10,
	  -75,   10,  -48,   10,  -70,   10,   10,   58,  -82,   10,  -48,   10,
	  -73,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -47,   10,
	 -121,   10,  -45,   10, -103,   10,  -48,   10,  -69,   10,  -48,   10,
	  -75,   10,  -48,   10,  -70,   10,  -48,   10,  -69,   10,  -48,   10,
	  -75,   10,  -45, -103,  -48,  -68,  -48,  -75,  -47, -128,  -48,  -75,
	  -47, -120,   58,   10,   10,  -48,  -46,  -45,   10,   32,   35,   37,
	   42,   64,    9,   13, -110, -101, -100,  -99,  -95,   10,  -45,   10,
	 -103,   10,   10,   32,  -45,   10, -103,   10,  -48,   10,  -70,   10,
	  -48,   10,  -72,   10,  -48,   10,  -67,   10,  -45,   10,  -87,   10,
	  -48,   10,  -68,   10,  -48,   10,  -70,   10,  -48,   10,  -72,   10,
	  -48,   10,  -67,   10,  -48,   10,  -69,   10,  -48,   10,  -75,   10,
	  -48,   10,  -70,   10,   10,   58,  -45,   10, -103,   10,  -47,   10,
	 -126,   10,  -48,   10,  -72,   10,  -46,   10, -105,   10,  -45,   10,
	 -103,   10,  -48,   10,  -76,   10,  -47,   10, -122,   10,  -48,   10,
	  -75,   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,  -47,   10,
	 -128,   10,  -48,   10,  -72,   10,  -48,   10,  -71,   10,  -48,   10,
	   58,  -67,   10,  -47,   10, -117,   10,  -46,   10,  -93,   10,   10,
	   32,  -47,   10, -126,   10,  -45,   10,  -87,   10,  -48,   10,  -73,
	   10,  -48,   10,  -75,   10,  -48,   10,  -69,   10,  -48,   10,  -75,
	   10,  -47,   10, -120,   10,  -48,   10,  -75,   10,  -82,  -70,   10,
	  -48,   10,  -73,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,
	  -47,   10, -121,   10,  -45,   10, -103,   10,  -48,   10,  -69,   10,
	  -48,   10,  -75,   10,  -48,   10,  -70,   10,  -48,   10,  -69,   10,
	  -48,   10,  -75,   10,  -45,   10, -103,   10,  -48,   10,  -68,   10,
	 -104,   10,  -48,   10,  -77,  -71,  -68,   10,  -45,   10, -103,   10,
	  -47,   10, -128,   10,  -47,   10, -126,   10,  -48,   10,  -72,   10,
	  -48,   10,  -70,   10,  -48,   10,  -68,   10,  -48,   10,  -80,   10,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,  -45, -103,  -48,  -70,  -48,  -72,  -48,  -67,
	  -48,  -45,  -72,  -47, -127,  -48,  -80,  -48,  -69,  -48,  -69,  -48,
	  -80,  -87,  -48,  -68,  -48,  -70,  -48,  -72,  -48,  -67,  -45, -103,
	  -47, -126,  -48,  -72,  -46, -105,  -45, -103,  -48,  -76,  -47, -122,
	  -48,  -75,  -48,  -67,  -48,  -80,  -47, -128,  -48,  -72,  -48,  -71,
	  -48,   58,  -67,  -47, -117,  -46,  -93,   32,  -47, -126,  -45,  -87,
	  -48,  -73,  -48,  -75,  -48,  -69,  -48,  -75,  -47, -120,  -48,  -75,
	   58,   10,   10,  -48,  -46,  -45,   10,   32,   35,   37,   42,   64,
	    9,   13, -110, -101, -100,  -99,  -95,   10,  -45,   10, -103,   10,
	   10,   32,  -45,   10, -103,   10,  -48,   10,  -70,   10,  -48,   10,
	  -72,   10,  -48,   10,  -67,   10,  -45,   10,  -87,   10,  -48,   10,
	  -68,   10,  -48,   10,  -70,   10,  -48,   10,  -72,   10,  -48,   10,
	  -67,   10,  -48,   10,  -69,   10,  -48,   10,  -75,   10,  -48,   10,
	  -70,   10,   10,   58,  -45,   10, -103,   10,  -47,   10, -126,   10,
	  -48,   10,  -72,   10,  -46,   10, -105,   10,  -45,   10, -103,   10,
	  -48,   10,  -76,   10,  -47,   10, -122,   10,  -48,   10,  -75,   10,
	  -48,   10,  -67,   10,  -48,   10,  -80,   10,  -47,   10, -128,   10,
	  -48,   10,  -72,   10,  -48,   10,  -71,   10,  -82,  -70,   10,  -48,
	   10,  -73,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -47,
	   10, -121,   10,  -45,   10, -103,   10,  -48,   10,  -69,   10,  -48,
	   10,  -75,   10,  -48,   10,  -70,   10,  -48,   10,  -69,   10,  -48,
	   10,  -75,   10,  -45,   10, -103,   10,  -48,   10,  -68,   10, -104,
	   10,  -48,   10,  -77,  -71,  -68,   10,  -45,   10, -103,   10,  -47,
	   10, -128,   10,  -47,   10, -126,   10,  -48,   10,  -72,   10,  -48,
	   10,  -70,   10,  -48,   10,  -68,   10,  -48,   10,  -80,   10,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,   10,   10,  -48,  -46,  -45,   10,   32,   35,   37,
	   42,   64,    9,   13, -110, -102, -101, -100,  -99,  -95,   10,  -45,
	   10, -103,   10,   10,   32,  -48,   10,  -75,   10,  -47,   10, -128,
	   10,  -48,   10,  -75,   10,  -47,   10, -120,   10,   10,   58,  -45,
	   10, -103,   10,  -48,   10,  -70,   10,  -48,   10,  -72,   10,  -48,
	   10,  -67,   10,  -45,   10,  -87,   10,  -48,   10,  -68,   10,  -48,
	   10,  -70,   10,  -48,   10,  -72,   10,  -48,   10,  -67,   10,  -48,
	   10,  -69,   10,  -48,   10,  -75,   10,  -48,   10,  -70,   10,  -45,
	   10, -103,   10,  -47,   10, -126,   10,  -48,   10,  -72,   10,  -46,
	   10, -105,   10,  -45,   10, -103,   10,  -48,   10,  -76,   10,  -47,
	   10, -122,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -48,
	   10,  -71,   10,  -48,   10,   58,  -67,   10,  -47,   10, -117,   10,
	  -46,   10,  -93,   10,   10,   32,  -47,   10, -126,   10,  -45,   10,
	  -87,   10,  -48,   10,  -73,   10,  -48,   10,  -75,   10,  -48,   10,
	  -69,   10,  -48,   10,  -75,   10,  -47,   10, -120,   10,  -48,   10,
	  -75,   10,  -82,  -70,   10,  -48,   10,  -73,   10,  -48,   10,  -75,
	   10,  -48,   10,  -67,   10,  -47,   10, -121,   10,  -45,   10, -103,
	   10,  -48,   10,  -69,   10,  -48,   10,  -75,   10,  -48,   10,  -70,
	   10,  -48,   10,  -69,   10,  -48,   10,  -75,   10,  -45,   10, -103,
	   10,  -48,   10,  -68,   10, -104,   10,  -48,   10,  -77,  -71,  -68,
	   10,  -45,   10, -103,   10,  -47,   10, -128,   10,  -47,   10, -126,
	   10,  -48,   10,  -72,   10,  -48,   10,  -70,   10,  -48,   10,  -68,
	   10,  -48,   10,  -80,   10,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   12,    6,    1,    1,    1,    2,    2,   11,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    7,    4,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,   11,    1,    1,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
	    3,    3,    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,    5,
	    3,    2,    4,    3,    2,    4,   11,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    6,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,    6,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,    6,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    9,    7,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   14,   21,   23,   25,   27,   30,   33,   46,   49,   52,
	   54,   56,   58,   60,   62,   64,   66,   68,   70,   72,   74,   76,
	   78,   80,   82,   84,   86,   88,   90,   92,   94,   96,   98,  100,
	  102,  104,  106,  108,  117,  122,  125,  128,  131,  134,  137,  140,
	  143,  146,  149,  162,  164,  166,  170,  172,  174,  176,  178,  180,
	  182,  184,  186,  188,  190,  192,  194,  196,  198,  200,  202,  205,
	  208,  213,  218,  223,  228,  232,  236,  239,  241,  243,  245,  247,
	  249,  251,  253,  255,  257,  259,  261,  263,  265,  267,  269,  274,
	  281,  286,  290,  296,  300,  303,  309,  322,  326,  329,  332,  335,
	  338,  341,  344,  347,  350,  353,  356,  359,  362,  365,  368,  371,
	  374,  377,  380,  383,  386,  389,  392,  395,  398,  401,  404,  407,
	  410,  413,  416,  419,  422,  425,  428,  431,  434,  437,  440,  443,
	  446,  449,  452,  456,  459,  462,  465,  468,  471,  474,  477,  480,
	  483,  486,  489,  492,  495,  498,  501,  504,  507,  510,  513,  516,
	  519,  522,  525,  529,  532,  535,  538,  541,  544,  547,  550,  553,
	  556,  559,  562,  565,  568,  571,  574,  577,  580,  583,  586,  589,
	  592,  595,  598,  601,  604,  607,  610,  613,  616,  619,  622,  625,
	  628,  631,  634,  637,  640,  643,  646,  649,  652,  655,  658,  661,
	  663,  665,  667,  669,  671,  673,  675,  677,  679,  681,  683,  685,
	  687,  689,  691,  693,  701,  704,  707,  710,  713,  716,  719,  722,
	  725,  728,  731,  734,  737,  740,  743,  746,  749,  752,  755,  758,
	  761,  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,  794,
	  797,  800,  803,  806,  809,  812,  815,  818,  820,  822,  824,  826,
	  828,  830,  832,  834,  836,  838,  840,  842,  844,  846,  848,  859,
	  866,  869,  872,  875,  878,  881,  884,  887,  890,  893,  896,  899,
	  902,  905,  908,  911,  914,  917,  920,  923,  926,  929,  932,  935,
	  938,  941,  944,  947,  950,  953,  956,  959,  962,  965,  968,  971,
	  974,  977,  980,  983,  986,  989,  992,  995,  998, 1001, 1004, 1007,
	 1010, 1013, 1016, 1019, 1022, 1025, 1028, 1032, 1035, 1038, 1041, 1044,
	 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080,
	 1083, 1086, 1089, 1092, 1095, 1098, 1102, 1105, 1108, 1111, 1114, 1117,
	 1120, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 1153,
	 1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 1180, 1185, 1188, 1191,
	 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227,
	 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263,
	 1266, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1288, 1290,
	 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314,
	 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338,
	 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362,
	 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1383, 1385, 1387,
	 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411,
	 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1444,
	 1451, 1454, 1457, 1460, 1463, 1466, 1469, 1472, 1475, 1478, 1481, 1484,
	 1487, 1490, 1493, 1496, 1499, 1502, 1505, 1508, 1511, 1514, 1517, 1520,
	 1523, 1526, 1529, 1532, 1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556,
	 1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592,
	 1595, 1598, 1601, 1604, 1607, 1610, 1613, 1617, 1620, 1623, 1626, 1629,
	 1632, 1635, 1638, 1641, 1644, 1647, 1650, 1653, 1656, 1659, 1662, 1665,
	 1668, 1671, 1674, 1677, 1680, 1683, 1686, 1689, 1692, 1695, 1700, 1703,
	 1706, 1709, 1712, 1715, 1718, 1721, 1724, 1727, 1730, 1733, 1736, 1739,
	 1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 1766, 1769, 1772, 1775,
	 1778, 1781, 1784, 1786, 1788, 1799, 1807, 1810, 1813, 1816, 1819, 1822,
	 1825, 1828, 1831, 1834, 1837, 1840, 1843, 1846, 1849, 1852, 1855, 1858,
	 1861, 1864, 1867, 1870, 1873, 1876, 1879, 1882, 1885, 1888, 1891, 1894,
	 1897, 1900, 1903, 1906, 1909, 1912, 1915, 1918, 1921, 1924, 1927, 1930,
	 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 1960, 1963, 1966,
	 1969, 1972, 1975, 1978, 1981, 1984, 1987, 1990, 1993, 1997, 2000, 2003,
	 2006, 2009, 2012, 2015, 2018, 2021, 2024, 2027, 2030, 2033, 2036, 2039,
	 2042, 2045, 2048, 2051, 2054, 2057, 2060, 2063, 2067, 2070, 2073, 2076,
	 2079, 2082, 2085, 2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 2112,
	 2115, 2118, 2121, 2124, 2127, 2130, 2133, 2136, 2139, 2142, 2145, 2150,
	 2153, 2156, 2159, 2162, 2165, 2168, 2171, 2174, 2177, 2180, 2183, 2186,
	 2189, 2192, 2195, 2198, 2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222,
	 2225, 2228, 2231, 2234, 2236, 2238
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    3,    4,    6,    5,    7,    8,    9,   10,   11,   12,
	    5,    0,   13,   14,   15,   16,   17,   18,    0,   19,    0,   20,
	    0,   21,    0,   23,   24,   22,   26,   27,   25,    1,    2,    3,
	    6,    5,    7,    8,    9,   10,   11,   12,    5,    0,   28,   29,
	    0,   30,   31,    0,   32,    0,   33,    0,   34,    0,   35,    0,
	   36,    0,   37,    0,   38,    0,   39,    0,   40,    0,   41,    0,
	   42,    0,   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,
	   48,    0,   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,
	   54,    0,   55,    0,   56,    0,   57,    0,   59,   58,   61,   60,
	   62,   63,   61,   64,   65,   66,   65,   64,   60,   67,   68,   69,
	   61,   60,   70,   61,   60,   71,   61,   60,   72,   61,   60,   73,
	   61,   60,   74,   61,   60,   75,   61,   60,   76,   61,   60,   77,
	   61,   60,   61,   78,   60,   79,   80,   81,   83,   82,   84,   85,
	   86,   87,   88,   89,   82,    0,   90,    0,   91,    0,   92,   93,
	   94,    0,   95,    0,   96,    0,   97,    0,   20,    0,   98,    0,
	   99,    0,  100,    0,  101,    0,  102,    0,   20,    0,  103,    0,
	  104,    0,  105,    0,   20,    0,  106,    0,  107,    0,  109,  110,
	  108,  112,  113,  111,  116,  115,  117,  115,  114,  120,  119,  121,
	  119,  118,  120,  119,  122,  119,  118,  120,  119,  123,  119,  118,
	  125,  124,  124,    0,    6,  126,  126,    0,  128,  129,  127,    6,
	    0,  130,    0,  131,    0,  132,    0,  133,    0,  134,    0,  135,
	    0,  136,    0,  137,    0,  138,    0,  139,    0,  140,    0,  141,
	    0,  142,    0,  143,    0,    0,    0,    0,    0,  144,  145,  146,
	  145,  145,  148,  147,  144,    6,  149,   11,  149,    0,  150,  151,
	  150,    0,  154,  153,  155,  156,  153,  152,    0,  158,  159,  157,
	    0,  158,  157,  154,  160,  158,  159,  160,  157,  161,  162,  163,
	  154,  164,  165,  166,  167,  168,  169,  170,  164,    0,  171,  172,
	   61,   60,  173,   61,   60,  174,   61,   60,  175,   61,   60,  176,
	   61,   60,  177,   61,   60,  178,   61,   60,  179,   61,   60,  180,
	   61,   60,  181,   61,   60,  182,   61,   60,  183,   61,   60,  184,
	   61,   60,   77,   61,   60,  185,   61,   60,  186,   61,   60,  187,
	   61,   60,  188,   61,   60,  189,   61,   60,  190,   61,   60,  191,
	   61,   60,  192,   61,   60,  193,   61,   60,  194,   61,   60,  195,
	   61,   60,  196,   61,   60,  197,   61,   60,  198,   61,   60,   77,
	   61,   60,  199,   61,   60,  200,   61,   60,  201,   61,   60,  202,
	   61,   60,  203,   61,   60,  204,   61,   60,  205,   61,   60,  206,
	   61,   60,  207,   61,   60,  208,   61,   60,  209,   61,   60,  210,
	   61,   60,  211,   61,   60,  212,   61,   60,  213,   61,   78,   60,
	  214,   61,   60,  215,   61,   60,  216,   61,   60,  217,   61,   60,
	  218,   61,   60,   61,  219,   60,  220,   61,   60,  221,   61,   60,
	  222,   61,   60,  223,   61,   60,  224,   61,   60,  225,   61,   60,
	  226,   61,   60,  227,   61,   60,  228,   61,   60,  229,   61,   60,
	  230,   61,   60,  231,   61,   60,  232,   61,   60,  233,   61,   60,
	  234,   61,   60,   77,   61,   60,  235,   61,   60,  236,  237,   61,
	   60,  238,   61,   60,  239,   61,   60,  240,   61,   60,  241,   61,
	   60,  242,   61,   60,  243,   61,   60,  244,   61,   60,  245,   61,
	   60,  246,   61,   60,  247,   61,   60,  248,   61,   60,  249,   61,
	   60,  250,   61,   60,  251,   61,   60,  252,   61,   60,  253,   61,
	   60,  254,   61,   60,  255,   61,   60,  193,   61,   60,  256,   61,
	   60,  257,   61,   60,  258,   61,   60,  259,   61,   60,  260,   61,
	   60,  261,   61,   60,  262,   61,   60,  263,   61,   60,  264,   61,
	   60,  265,   61,   60,  183,   61,   60,   61,  266,   60,   61,  267,
	   60,   61,  268,   60,   61,  269,   60,   61,  270,   60,   61,  271,
	   60,   61,  272,   60,   61,  273,   60,   61,  274,   60,   61,  275,
	   60,   61,  276,   60,   61,  277,   60,   61,  278,   60,   61,  279,
	   60,  280,    0,  281,    0,  282,    0,  283,    0,  284,    0,  285,
	    0,  286,    0,  287,    0,  288,    0,  289,    0,  290,    0,  291,
	    0,  292,    0,  293,    0,  295,  294,  297,  296,  298,  299,  297,
	  300,  301,  301,  300,  296,  302,  297,  296,  303,  297,  296,  304,
	  297,  296,  305,  297,  296,  306,  297,  296,  307,  297,  296,  308,
	  297,  296,  309,  297,  296,  310,  297,  296,  311,  297,  296,  312,
	  297,  296,  313,  297,  296,  314,  297,  296,  315,  297,  296,  316,
	  297,  296,  317,  297,  296,  318,  297,  296,  297,  319,  296,  320,
	  297,  296,  321,  297,  296,  322,  297,  296,  323,  297,  296,  324,
	  297,  296,  325,  297,  296,  326,  297,  296,  327,  297,  296,  328,
	  297,  296,  329,  297,  296,  330,  297,  296,  331,  297,  296,  332,
	  297,  296,  333,  297,  296,  334,  297,  296,  335,  297,  296,  336,
	  297,  296,  337,  297,  296,  338,  297,  296,  339,  297,  296,  312,
	  297,  296,  340,    0,  341,    0,  342,    0,   20,    0,  343,    0,
	  344,    0,  345,    0,  346,    0,  347,    0,  348,    0,  349,    0,
	  350,    0,  351,    0,  353,  352,  355,  354,  356,  357,  358,  355,
	  359,  360,  361,  362,  360,  359,  354,  363,  364,  365,  366,  367,
	  355,  354,  368,  355,  354,  369,  355,  354,  355,  370,  354,  371,
	  355,  354,  372,  355,  354,  373,  355,  354,  374,  355,  354,  375,
	  355,  354,  376,  355,  354,  377,  355,  354,  369,  355,  354,  378,
	  355,  354,  379,  355,  354,  380,  355,  354,  381,  355,  354,  382,
	  355,  354,  383,  355,  354,  384,  355,  354,  385,  355,  354,  386,
	  355,  354,  387,  355,  354,  388,  355,  354,  389,  355,  354,  390,
	  355,  354,  391,  355,  354,  392,  355,  354,  393,  355,  354,  355,
	  370,  354,  394,  355,  354,  395,  355,  354,  396,  355,  354,  397,
	  355,  354,  398,  355,  354,  399,  355,  354,  400,  355,  354,  401,
	  355,  354,  402,  355,  354,  403,  355,  354,  404,  355,  354,  363,
	  355,  354,  405,  355,  354,  406,  355,  354,  407,  355,  354,  408,
	  355,  354,  409,  355,  354,  410,  355,  354,  411,  355,  354,  412,
	  355,  354,  413,  355,  354,  414,  355,  354,  415,  355,  354,  416,
	  355,  354,  417,  355,  354,  418,  355,  354,  419,  355,  370,  354,
	  420,  355,  354,  421,  355,  354,  422,  355,  354,  423,  355,  354,
	  424,  355,  354,  355,  425,  354,  426,  355,  354,  427,  355,  354,
	  428,  355,  354,  429,  355,  354,  430,  355,  354,  431,  355,  354,
	  432,  355,  354,  433,  355,  354,  434,  355,  354,  435,  355,  354,
	  436,  355,  354,  437,  355,  354,  438,  355,  354,  439,  355,  354,
	  440,  355,  354,  393,  355,  354,  441,  442,  355,  354,  443,  355,
	  354,  444,  355,  354,  445,  355,  354,  446,  355,  354,  447,  355,
	  354,  448,  355,  354,  449,  355,  354,  450,  355,  354,  451,  355,
	  354,  452,  355,  354,  453,  355,  354,  454,  355,  354,  455,  355,
	  354,  456,  355,  354,  457,  355,  354,  458,  355,  354,  459,  355,
	  354,  460,  355,  354,  461,  355,  354,  387,  355,  354,  462,  355,
	  354,  463,  355,  354,  464,  355,  354,  369,  355,  354,  465,  355,
	  354,  466,  355,  354,  467,  468,  469,  355,  354,  470,  355,  354,
	  471,  355,  354,  472,  355,  354,  369,  355,  354,  473,  355,  354,
	  474,  355,  354,  475,  355,  354,  476,  355,  354,  477,  355,  354,
	  369,  355,  354,  478,  355,  354,  479,  355,  354,  480,  355,  354,
	  369,  355,  354,  355,  481,  354,  355,  482,  354,  355,  483,  354,
	  355,  484,  354,  355,  485,  354,  355,  486,  354,  355,  487,  354,
	  355,  488,  354,  355,  489,  354,  355,  490,  354,  355,  491,  354,
	  355,  492,  354,  355,  493,  354,  355,  494,  354,  495,    0,  496,
	    0,  497,    0,  498,    0,  499,    0,  500,    0,  501,    0,   20,
	    0,  502,  503,    0,  504,    0,  505,    0,  506,    0,  507,    0,
	  508,    0,  509,    0,  510,    0,  511,    0,  512,    0,  513,    0,
	  290,    0,  514,    0,  515,    0,  516,    0,  517,    0,  518,    0,
	  519,    0,  520,    0,  521,    0,   50,    0,  522,    0,  523,    0,
	  524,    0,  525,    0,  526,    0,  527,    0,  528,    0,  529,    0,
	  530,    0,  531,    0,  532,    0,   13,    0,  533,    0,  534,    0,
	  535,    0,  536,    0,  537,    0,  538,    0,  539,    0,  540,    0,
	  541,    0,  542,    0,  543,    0,  544,    0,  545,    0,  546,    0,
	  547,  548,    0,  549,    0,  550,    0,  551,    0,  552,    0,  553,
	    0,  554,    0,  555,    0,  556,    0,  557,    0,  558,    0,  559,
	    0,  560,    0,  561,    0,  562,    0,  563,    0,  564,    0,  565,
	    0,  566,    0,  567,    0,  568,    0,  569,    0,  570,    0,  571,
	    0,  573,  572,  575,  574,  576,  577,  578,  575,  579,  580,  581,
	  582,  580,  579,  574,  583,  584,  585,  586,  587,  575,  574,  588,
	  575,  574,  589,  575,  574,  575,  590,  574,  591,  575,  574,  592,
	  575,  574,  593,  575,  574,  594,  575,  574,  595,  575,  574,  596,
	  575,  574,  597,  575,  574,  589,  575,  574,  598,  575,  574,  599,
	  575,  574,  600,  575,  574,  601,  575,  574,  602,  575,  574,  603,
	  575,  574,  604,  575,  574,  605,  575,  574,  606,  575,  574,  607,
	  575,  574,  608,  575,  574,  609,  575,  574,  610,  575,  574,  611,
	  575,  574,  612,  575,  574,  613,  575,  574,  575,  590,  574,  614,
	  575,  574,  615,  575,  574,  616,  575,  574,  617,  575,  574,  618,
	  575,  574,  619,  575,  574,  620,  575,  574,  621,  575,  574,  622,
	  575,  574,  623,  575,  574,  624,  575,  574,  583,  575,  574,  625,
	  575,  574,  626,  575,  574,  627,  575,  574,  628,  575,  574,  629,
	  575,  574,  630,  575,  574,  631,  575,  574,  632,  575,  574,  633,
	  575,  574,  634,  575,  574,  635,  575,  574,  636,  575,  574,  637,
	  575,  574,  613,  575,  574,  638,  639,  575,  574,  640,  575,  574,
	  641,  575,  574,  642,  575,  574,  643,  575,  574,  644,  575,  574,
	  645,  575,  574,  646,  575,  574,  647,  575,  574,  648,  575,  574,
	  649,  575,  574,  650,  575,  574,  651,  575,  574,  652,  575,  574,
	  653,  575,  574,  654,  575,  574,  655,  575,  574,  656,  575,  574,
	  657,  575,  574,  658,  575,  574,  607,  575,  574,  659,  575,  574,
	  660,  575,  574,  661,  575,  574,  589,  575,  574,  662,  575,  574,
	  663,  575,  574,  664,  665,  666,  575,  574,  667,  575,  574,  668,
	  575,  574,  669,  575,  574,  589,  575,  574,  670,  575,  574,  671,
	  575,  574,  672,  575,  574,  673,  575,  574,  674,  575,  574,  589,
	  575,  574,  675,  575,  574,  676,  575,  574,  677,  575,  574,  589,
	  575,  574,  575,  678,  574,  575,  679,  574,  575,  680,  574,  575,
	  681,  574,  575,  682,  574,  575,  683,  574,  575,  684,  574,  575,
	  685,  574,  575,  686,  574,  575,  687,  574,  575,  688,  574,  575,
	  689,  574,  575,  690,  574,  575,  691,  574,  693,  692,  695,  694,
	  696,  697,  698,  695,  699,  700,  701,  702,  700,  699,  694,  703,
	  704,  705,  706,  707,  708,  695,  694,  709,  695,  694,  710,  695,
	  694,  695,  711,  694,  712,  695,  694,  713,  695,  694,  714,  695,
	  694,  715,  695,  694,  716,  695,  694,  717,  695,  694,  718,  695,
	  694,  719,  695,  694,  695,  711,  694,  720,  695,  694,  721,  695,
	  694,  722,  695,  694,  723,  695,  694,  724,  695,  694,  725,  695,
	  694,  726,  695,  694,  710,  695,  694,  727,  695,  694,  728,  695,
	  694,  729,  695,  694,  730,  695,  694,  731,  695,  694,  732,  695,
	  694,  733,  695,  694,  734,  695,  694,  735,  695,  694,  736,  695,
	  694,  737,  695,  694,  738,  695,  694,  739,  695,  694,  740,  695,
	  694,  741,  695,  694,  719,  695,  694,  742,  695,  694,  743,  695,
	  694,  744,  695,  694,  745,  695,  694,  746,  695,  694,  747,  695,
	  694,  748,  695,  694,  749,  695,  694,  750,  695,  694,  751,  695,
	  694,  752,  695,  694,  703,  695,  694,  753,  695,  694,  754,  695,
	  694,  755,  695,  694,  756,  695,  694,  757,  695,  694,  758,  695,
	  694,  759,  695,  694,  760,  695,  694,  761,  695,  694,  762,  695,
	  694,  763,  695,  694,  764,  695,  694,  765,  695,  694,  766,  695,
	  694,  767,  695,  711,  694,  768,  695,  694,  769,  695,  694,  770,
	  695,  694,  771,  695,  694,  772,  695,  694,  695,  773,  694,  774,
	  695,  694,  775,  695,  694,  776,  695,  694,  777,  695,  694,  778,
	  695,  694,  779,  695,  694,  780,  695,  694,  781,  695,  694,  782,
	  695,  694,  783,  695,  694,  784,  695,  694,  785,  695,  694,  786,
	  695,  694,  787,  695,  694,  788,  695,  694,  719,  695,  694,  789,
	  790,  695,  694,  791,  695,  694,  792,  695,  694,  793,  695,  694,
	  794,  695,  694,  795,  695,  694,  796,  695,  694,  797,  695,  694,
	  798,  695,  694,  799,  695,  694,  800,  695,  694,  801,  695,  694,
	  802,  695,  694,  803,  695,  694,  804,  695,  694,  805,  695,  694,
	  806,  695,  694,  807,  695,  694,  808,  695,  694,  809,  695,  694,
	  736,  695,  694,  810,  695,  694,  811,  695,  694,  812,  695,  694,
	  710,  695,  694,  813,  695,  694,  814,  695,  694,  815,  816,  817,
	  695,  694,  818,  695,  694,  819,  695,  694,  820,  695,  694,  710,
	  695,  694,  821,  695,  694,  822,  695,  694,  823,  695,  694,  824,
	  695,  694,  825,  695,  694,  710,  695,  694,  826,  695,  694,  827,
	  695,  694,  828,  695,  694,  710,  695,  694,  695,  829,  694,  695,
	  830,  694,  695,  831,  694,  695,  832,  694,  695,  833,  694,  695,
	  834,  694,  695,  835,  694,  695,  836,  694,  695,  837,  694,  695,
	  838,  694,  695,  839,  694,  695,  840,  694,  695,  841,  694,  695,
	  842,  694,  843,    0,    5,    0,  844,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    9,   51,  759,    8,    8,   68,   78,   80,    5,   94,
	   97,    3,  275,  421,  429,  450,  462,    4,    5,    6,    7,    8,
	   79,    7,    8,   79,   10,  271,   11,  215,   12,   13,   14,   15,
	   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
	   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
	   38,   39,   40,  169,   39,    8,  201,   41,  103,  132,   42,   43,
	   44,   45,   46,   47,   48,   49,   50,    2,    9,   51,    8,    8,
	   68,   78,   80,    5,   94,   97,   52,   53,   54,   58,   64,   55,
	   56,   57,   59,   60,   61,   62,   63,   65,   66,   67,   69,   70,
	   71,   72,   71,   71,   72,   71,   73,   73,   73,   74,   73,   73,
	   73,   74,   75,   76,   77,    8,   77,   78,    8,   79,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,  761,
	   95,   96,    8,   95,   94,   96,   97,   98,   99,  101,  102,  100,
	   98,   99,  100,   98,  101,    2,    9,   51,  102,   68,   78,   80,
	    5,   94,   97,  104,  117,  105,  106,  107,  108,  109,  110,  111,
	  112,  113,  114,  115,  116,  118,  119,  120,  121,  122,  123,  124,
	  125,  126,  127,  128,  129,  130,  131,  133,  134,  135,  136,  137,
	  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
	  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
	  162,  163,  164,  165,  166,  167,  168,  170,  171,  190,  172,  173,
	  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
	  186,  187,  188,  189,  191,  192,  193,  194,  195,  196,  197,  198,
	  199,  200,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
	  212,  213,  214,    8,  216,  217,  218,  219,  220,  221,  222,  223,
	  224,  225,  226,  227,  228,  229,  230,  231,  230,  231,  232,  250,
	  231,    8,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
	  243,  244,  245,  246,  247,  248,  249,   50,  251,  252,  253,  254,
	  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
	  267,  268,  269,  270,  272,  273,  274,  276,  277,  278,  279,  280,
	  281,  282,  283,  284,  285,  286,  285,  286,  287,  365,  390,  286,
	    8,  407,  290,  288,  291,  299,  316,  328,  289,  290,   50,  292,
	  293,  294,  295,  296,  297,  298,  300,  301,  302,  303,  304,  305,
	  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  317,  318,
	  319,  320,  321,  322,  323,  324,  325,  326,  327,  329,  330,  331,
	  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
	  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
	  356,  357,  358,  359,  360,  361,  362,  363,  364,  366,  386,  367,
	  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
	  380,  381,  382,  383,  384,  385,  387,  388,  389,  391,  392,  393,
	  397,  403,  394,  395,  396,  398,  399,  400,  401,  402,  404,  405,
	  406,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
	  419,  420,    8,  422,  423,  424,  425,  426,  427,  428,  430,  441,
	  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  442,  443,
	  444,  445,  446,  447,  448,  449,  451,  452,  453,  454,  455,  456,
	  457,  458,  459,  460,  461,  463,  464,  465,  466,  467,  468,  469,
	  470,  471,  472,  473,  474,  475,  476,  477,  614,  478,  479,  480,
	  481,  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
	  493,  494,  495,  496,  497,  498,  499,  500,  501,  502,  501,  502,
	  503,  558,  583,  502,    8,  600,  506,  504,  507,  515,  532,  544,
	  505,  506,   50,  508,  509,  510,  511,  512,  513,  514,  516,  517,
	  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,  528,  529,
	  530,  531,  533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
	  543,  545,  546,  547,  548,  549,  550,  551,  552,  553,  554,  555,
	  556,  557,  559,  579,  560,  561,  562,  563,  564,  565,  566,  567,
	  568,  569,  570,  571,  572,  573,  574,  575,  576,  577,  578,  580,
	  581,  582,  584,  585,  586,  590,  596,  587,  588,  589,  591,  592,
	  593,  594,  595,  597,  598,  599,  601,  602,  603,  604,  605,  606,
	  607,  608,  609,  610,  611,  612,  613,    8,  615,  616,  615,  616,
	  617,  703,  728,  616,    8,  745,  620,  618,  621,  630,  638,  654,
	  666,  619,  620,   50,  622,  623,  624,  625,  626,  627,  628,  629,
	  631,  632,  633,  634,  635,  636,  637,  639,  640,  641,  642,  643,
	  644,  645,  646,  647,  648,  649,  650,  651,  652,  653,  655,  656,
	  657,  658,  659,  660,  661,  662,  663,  664,  665,  667,  668,  669,
	  670,  671,  672,  673,  674,  675,  676,  677,  678,  679,  680,  681,
	  682,  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,  693,
	  694,  695,  696,  697,  698,  699,  700,  701,  702,  704,  724,  705,
	  706,  707,  708,  709,  710,  711,  712,  713,  714,  715,  716,  717,
	  718,  719,  720,  721,  722,  723,  725,  726,  727,  729,  730,  731,
	  735,  741,  732,  733,  734,  736,  737,  738,  739,  740,  742,  743,
	  744,  746,  747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
	  757,  758,    8,  760,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,   29,   29,    0,    0,   54,    3,    1,    0,   29,    1,
	   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,
	  126,    0,  110,   23,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,   84,   84,    0,   69,   33,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   13,   63,   63,   63,   31,  130,
	   60,   57,   31,   63,   57,   66,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,
	  122,   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   27,  118,   27,   51,    0,    0,    0,   37,   37,   54,   37,
	   87,    0,    0,   39,    0,   96,   96,   96,    0,   93,   90,   41,
	   96,   90,   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,   84,
	    0,   81,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   21,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  144,    0,   54,   84,   84,   84,    0,
	   72,   33,   84,    0,    0,    0,    0,    0,    0,    0,   15,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	   84,   84,   84,    0,   78,   33,   84,    0,    0,    0,    0,    0,
	    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   19,   57,  144,    0,   54,
	   84,   84,   84,    0,   75,   33,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   17,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 761;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 937 "java/src/main/java/gherkin/lexer/Tt.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
    
// line 944 "java/src/main/java/gherkin/lexer/Tt.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1205 "java/src/main/java/gherkin/lexer/Tt.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1237 "java/src/main/java/gherkin/lexer/Tt.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/tt.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

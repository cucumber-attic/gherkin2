
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Ja implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"


  private final Listener listener;

  public Ja(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Ja.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   16,   19,   23,   24,   25,   26,   28,   30,   45,   47,
	   48,   49,   50,   51,   52,   53,   54,   55,   63,   65,   67,   69,
	   71,   73,   75,   77,   79,   81,   83,   85,   87,   89,   91,   93,
	  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
	  120,  121,  132,  135,  138,  140,  142,  144,  146,  148,  150,  152,
	  154,  156,  158,  160,  162,  164,  166,  168,  170,  172,  174,  176,
	  179,  182,  184,  186,  188,  190,  192,  194,  196,  198,  200,  202,
	  204,  206,  208,  210,  212,  214,  216,  218,  220,  222,  224,  226,
	  228,  230,  232,  234,  237,  239,  241,  243,  245,  247,  250,  252,
	  254,  256,  258,  260,  262,  264,  266,  268,  270,  272,  274,  276,
	  278,  280,  282,  284,  286,  288,  290,  292,  294,  296,  298,  300,
	  302,  304,  306,  308,  310,  312,  314,  316,  318,  320,  322,  324,
	  326,  328,  330,  332,  334,  336,  338,  340,  342,  344,  345,  346,
	  347,  348,  349,  350,  351,  352,  364,  368,  373,  375,  377,  379,
	  381,  383,  385,  387,  389,  391,  393,  395,  397,  399,  401,  403,
	  405,  407,  409,  412,  414,  416,  418,  420,  422,  424,  426,  428,
	  430,  433,  436,  438,  440,  442,  444,  446,  448,  450,  452,  454,
	  456,  458,  460,  462,  464,  466,  468,  470,  472,  474,  476,  478,
	  480,  482,  484,  486,  488,  490,  493,  495,  497,  499,  501,  503,
	  506,  508,  510,  512,  514,  516,  518,  520,  522,  524,  526,  528,
	  530,  532,  534,  536,  538,  540,  542,  544,  546,  548,  550,  552,
	  554,  556,  558,  560,  562,  564,  566,  568,  570,  572,  574,  576,
	  578,  580,  582,  584,  586,  588,  590,  592,  594,  596,  598,  600,
	  602,  603,  604,  606,  608,  613,  618,  623,  628,  632,  636,  638,
	  639,  640,  641,  642,  643,  644,  645,  646,  647,  648,  649,  650,
	  651,  652,  653,  654,  659,  666,  671,  675,  681,  684,  686,  692,
	  707,  709,  711,  713,  715,  717,  718,  719,  720,  721,  722,  723,
	  724,  725,  726,  727,  728,  729,  732,  733,  734,  735,  736,  737,
	  738,  739,  740,  741,  742,  743,  744,  745,  746,  747,  748,  749,
	  750,  752,  754,  755,  756,  757,  758,  759,  760,  761,  762,  763,
	  764,  765,  766,  767,  768,  769,  770,  771,  772,  773,  785,  789,
	  794,  796,  798,  800,  802,  804,  806,  808,  810,  812,  814,  816,
	  818,  820,  822,  824,  826,  828,  830,  833,  835,  837,  839,  841,
	  843,  845,  847,  849,  851,  853,  855,  857,  859,  861,  863,  865,
	  867,  869,  871,  873,  875,  877,  879,  881,  883,  885,  887,  889,
	  891,  893,  895,  897,  899,  901,  903,  905,  907,  909,  911,  913,
	  915,  917,  919,  921,  923,  925,  927,  929,  931,  933,  934,  935,
	  936,  937,  938,  939,  940,  941,  942,  943,  945,  946,  947,  948,
	  949,  950,  951,  952,  965,  969,  974,  976,  978,  980,  982,  984,
	  986,  988,  990,  992,  994,  996,  998, 1000, 1002, 1004, 1006, 1008,
	 1010, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1034,
	 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059,
	 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083,
	 1085, 1087, 1089, 1091, 1094, 1096, 1098, 1100, 1102, 1104, 1107, 1109,
	 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133,
	 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157,
	 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181,
	 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205,
	 1207, 1209, 1211, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	 1235, 1236, 1237, 1238
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -29,  -28,  -27,  -26,  -24,  -17,   10,   32,   34,   35,   37,   42,
	   64,  124,    9,   13, -127, -126, -125, -117, -105,  -97,  -86,  -29,
	 -127,  -92,   10,   13,   10,   13,  -29,  -28,  -27,  -26,  -24,   10,
	   32,   34,   35,   37,   42,   64,  124,    9,   13,  -67,  -66, -122,
	  -29, -127, -105, -117,   58,   10,   10,  -29,  -26,   10,   32,   35,
	  124,    9,   13, -125,   10, -107,   10,  -29,   10, -126,   10,  -93,
	   10,  -29,   10, -125,   10,  -68,   10,  -29,   10, -125,   10, -127,
	   10,  -29,   10, -125,   10,  -93,   10,   10,   58,  -29,  -28,  -27,
	  -26,  -24,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	 -119, -115,  -26, -113, -112,  -87,  -97,  -24, -125,  -67,   58,   10,
	   10,  -29,  -28,  -26,  -24,   10,   32,   35,   37,   64,    9,   13,
	 -126, -125,   10,  -75,  -73,   10,  -29,   10, -125,   10,  -77,   10,
	  -29,   10, -125,   10, -105,   10,  -29,   10, -125,   10,  -85,   10,
	   10,   58,  -29,   10, -125,   10, -118,   10,  -29,   10, -125,   10,
	  -86,   10,  -29,   10, -126,   10,  -86,   10,  -29,   10,   58, -126,
	 -125,   10,  -94,   10,  -29,   10, -126,   10,  -90,   10,  -29,   10,
	 -125,   10, -120,   10,  -29,   10, -125,   10,  -87,   10,  -29,   10,
	 -126,   10,  -92,   10,  -29,   10, -125,   10,  -77,   10, -122,   10,
	  -29,   10, -125,   10,  -77,   10,  -29,   10, -125,   10, -105,   10,
	  -29,   10, -125,   10,  -84,   10,  -29,   10,   58, -125,   10,  -68,
	   10,  -29,   10, -125,   10, -120,   10, -122, -107,   10,  -29,   10,
	 -125,   10,  -77,   10,  -29,   10, -125,   10, -105,   10,  -29,   10,
	 -125,   10,  -84,   10,  -29,   10, -126,   10,  -93,   10,  -29,   10,
	 -125,   10,  -68,   10,  -29,   10, -125,   10, -127,   10,  -29,   10,
	 -125,   10,  -93,   10,  -66,   10, -117,   10,  -87,   10,  -97,   10,
	  -24,   10, -125,   10,  -67,   10, -125,   10, -116,   10,  -26,   10,
	 -103,   10,  -81,   10,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37, -125, -116,  -26, -103,
	  -81,   58,   10,   10,  -29,  -28,  -27,  -26,   10,   32,   35,   37,
	   42,   64,    9,   13, -127, -126, -125,   10, -117, -105,  -97,  -86,
	   10,  -29,   10, -127,   10,  -92,   10,  -29,   10, -127,   10, -117,
	   10,  -29,   10, -127,   10, -105,   10,  -29,   10, -127,   10,  -96,
	   10,  -29,   10, -126,   10, -119,   10,  -29,   10, -127,   10,  -80,
	   10, -126,  -73,   10,  -29,   10, -125,   10, -118,   10,  -29,   10,
	 -125,   10,  -86,   10,  -29,   10, -126,   10,  -86,   10,  -29,   10,
	   58, -126, -125,   10,  -94,   10,  -29,   10, -126,   10,  -90,   10,
	  -29,   10, -125,   10, -120,   10,  -29,   10, -125,   10,  -87,   10,
	  -29,   10, -126,   10,  -92,   10,  -29,   10, -125,   10,  -77,   10,
	   10,   58, -122,   10,  -29,   10, -125,   10,  -77,   10,  -29,   10,
	 -125,   10, -105,   10,  -29,   10, -125,   10,  -84,   10,  -29,   10,
	   58, -125,   10,  -68,   10,  -29,   10, -125,   10, -120,   10, -122,
	 -107,   10,  -29,   10, -125,   10,  -77,   10,  -29,   10, -125,   10,
	 -105,   10,  -29,   10, -125,   10,  -84,   10,  -29,   10, -126,   10,
	  -93,   10,  -29,   10, -125,   10,  -68,   10,  -29,   10, -125,   10,
	 -127,   10,  -29,   10, -125,   10,  -93,   10,  -67,   10, -122,   10,
	 -119,   10, -115,   10,  -26,   10, -113,   10, -112,   10,  -87,   10,
	  -97,   10,  -24,   10, -125,   10,  -67,   10,   10,   95,   10,   70,
	   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,
	   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,
	   10,   32,   34,   34,   10,   13,   10,   13,   10,   32,   34,    9,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,   13,
	   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,   95,
	   69,   78,   68,   95,   37,   32,   13,   32,   64,    9,   10,    9,
	   10,   13,   32,   64,   11,   12,   10,   32,   64,    9,   13,   32,
	  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,
	   10,   92,   10,   32,   92,  124,    9,   13,  -29,  -28,  -27,  -26,
	  -24,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,  -87,
	   10,  -97,   10,  -24,   10, -125,   10,  -67,   10,  -29, -127, -117,
	  -29, -127,  -96,  -29, -126, -119,  -29, -127,  -80, -126,  -75,  -73,
	  -29, -125,  -77,  -29, -125, -105,  -29, -125,  -85,  -29, -125, -118,
	  -29, -125,  -86,  -29, -126,  -86,  -29,   58, -126, -125,  -94,  -29,
	 -126,  -90,  -29, -125, -120,  -29, -125,  -87,  -29, -126,  -92,  -29,
	 -125,  -77,   58,   10,   10,  -29,  -28,  -27,  -26,   10,   32,   35,
	   37,   42,   64,    9,   13, -127, -126, -125,   10, -117, -105,  -97,
	  -86,   10,  -29,   10, -127,   10,  -92,   10,  -29,   10, -127,   10,
	 -117,   10,  -29,   10, -127,   10, -105,   10,  -29,   10, -127,   10,
	  -96,   10,  -29,   10, -126,   10, -119,   10,  -29,   10, -127,   10,
	  -80,   10, -126,  -73,   10,  -29,   10, -125,   10, -118,   10,  -29,
	   10, -125,   10,  -86,   10,  -29,   10, -126,   10,  -86,   10,   10,
	   58, -107,   10,  -29,   10, -126,   10,  -93,   10,  -29,   10, -125,
	   10,  -68,   10,  -29,   10, -125,   10, -127,   10,  -29,   10, -125,
	   10,  -93,   10,  -67,   10, -122,   10, -119,   10, -115,   10,  -26,
	   10, -113,   10, -112,   10,  -87,   10,  -97,   10,  -24,   10, -125,
	   10,  -67,   10,   10,   95,   10,   70,   10,   69,   10,   65,   10,
	   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,
	   78,   10,   68,   10,   95,   10,   37,   10,   32, -122,  -29, -125,
	  -77,  -29, -125, -105,  -29, -125,  -84,  -29,   58, -125,  -68,  -29,
	 -125, -120,   10,   10,  -29,  -28,  -27,  -26,  -24,   10,   32,   35,
	   37,   42,   64,    9,   13, -127, -126, -125,   10, -117, -105,  -97,
	  -86,   10,  -29,   10, -127,   10,  -92,   10,  -29,   10, -127,   10,
	 -117,   10,  -29,   10, -127,   10, -105,   10,  -29,   10, -127,   10,
	  -96,   10,  -29,   10, -126,   10, -119,   10,  -29,   10, -127,   10,
	  -80,   10, -126,  -73,   10,  -29,   10, -125,   10, -118,   10,  -29,
	   10, -125,   10,  -86,   10,  -29,   10, -126,   10,  -86,   10,  -29,
	   10,   58, -126, -125,   10,  -94,   10,  -29,   10, -126,   10,  -90,
	   10,  -29,   10, -125,   10, -120,   10,  -29,   10, -125,   10,  -87,
	   10,  -29,   10, -126,   10,  -92,   10,  -29,   10, -125,   10,  -77,
	   10,   10,   58, -122,   10,  -29,   10, -125,   10,  -77,   10,  -29,
	   10, -125,   10, -105,   10,  -29,   10, -125,   10,  -84,   10,  -29,
	   10,   58, -125,   10,  -68,   10,  -29,   10, -125,   10, -120,   10,
	 -122, -107,   10,  -29,   10, -125,   10,  -77,   10,  -29,   10, -125,
	   10, -105,   10,  -29,   10, -125,   10,  -84,   10,  -29,   10, -126,
	   10,  -93,   10,  -29,   10, -125,   10,  -68,   10,  -29,   10, -125,
	   10, -127,   10,  -29,   10, -125,   10,  -93,   10,  -67,   10, -122,
	   10, -119,   10, -115,   10,  -26,   10, -113,   10, -112,   10,  -87,
	   10,  -97,   10,  -24,   10, -125,   10,  -67,   10, -125,   10, -116,
	   10,  -26,   10, -103,   10,  -81,   10,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   32, -122, -107,  -29, -125,  -77,  -29, -125, -105,  -29, -125,  -84,
	  -29, -126,  -93,  -29, -125,  -68,  -29, -125, -127,  -29, -125,  -93,
	  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   14,    3,    4,    1,    1,    1,    2,    2,   13,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    6,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   13,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    9,    3,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,   10,    4,    5,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    1,    2,    2,    3,    3,    3,    3,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    3,    5,    3,    2,    4,    3,    2,    4,   13,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,   10,    4,    5,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,   11,    4,    5,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    1,    1,    1,    1,    0,    0,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   16,   20,   25,   27,   29,   31,   34,   37,   52,   55,
	   57,   59,   61,   63,   65,   67,   69,   71,   79,   82,   85,   88,
	   91,   94,   97,  100,  103,  106,  109,  112,  115,  118,  121,  124,
	  139,  141,  143,  145,  147,  149,  151,  153,  155,  157,  159,  161,
	  163,  165,  176,  180,  184,  187,  190,  193,  196,  199,  202,  205,
	  208,  211,  214,  217,  220,  223,  226,  229,  232,  235,  238,  241,
	  245,  249,  252,  255,  258,  261,  264,  267,  270,  273,  276,  279,
	  282,  285,  288,  291,  294,  297,  300,  303,  306,  309,  312,  315,
	  318,  321,  324,  327,  331,  334,  337,  340,  343,  346,  350,  353,
	  356,  359,  362,  365,  368,  371,  374,  377,  380,  383,  386,  389,
	  392,  395,  398,  401,  404,  407,  410,  413,  416,  419,  422,  425,
	  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,  458,  461,
	  464,  467,  470,  473,  476,  479,  482,  485,  488,  491,  493,  495,
	  497,  499,  501,  503,  505,  507,  519,  524,  530,  533,  536,  539,
	  542,  545,  548,  551,  554,  557,  560,  563,  566,  569,  572,  575,
	  578,  581,  584,  588,  591,  594,  597,  600,  603,  606,  609,  612,
	  615,  619,  623,  626,  629,  632,  635,  638,  641,  644,  647,  650,
	  653,  656,  659,  662,  665,  668,  671,  674,  677,  680,  683,  686,
	  689,  692,  695,  698,  701,  704,  708,  711,  714,  717,  720,  723,
	  727,  730,  733,  736,  739,  742,  745,  748,  751,  754,  757,  760,
	  763,  766,  769,  772,  775,  778,  781,  784,  787,  790,  793,  796,
	  799,  802,  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,
	  835,  838,  841,  844,  847,  850,  853,  856,  859,  862,  865,  868,
	  871,  873,  875,  878,  881,  886,  891,  896,  901,  905,  909,  912,
	  914,  916,  918,  920,  922,  924,  926,  928,  930,  932,  934,  936,
	  938,  940,  942,  944,  949,  956,  961,  965,  971,  975,  978,  984,
	  999, 1002, 1005, 1008, 1011, 1014, 1016, 1018, 1020, 1022, 1024, 1026,
	 1028, 1030, 1032, 1034, 1036, 1038, 1042, 1044, 1046, 1048, 1050, 1052,
	 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076,
	 1078, 1081, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102,
	 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1134, 1139,
	 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178,
	 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1203, 1206, 1209, 1212, 1215,
	 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251,
	 1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287,
	 1290, 1293, 1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323,
	 1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350, 1353, 1355, 1357,
	 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1376, 1378, 1380, 1382,
	 1384, 1386, 1388, 1390, 1403, 1408, 1414, 1417, 1420, 1423, 1426, 1429,
	 1432, 1435, 1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459, 1462, 1465,
	 1468, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499, 1503,
	 1507, 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540,
	 1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576,
	 1579, 1582, 1585, 1588, 1592, 1595, 1598, 1601, 1604, 1607, 1611, 1614,
	 1617, 1620, 1623, 1626, 1629, 1632, 1635, 1638, 1641, 1644, 1647, 1650,
	 1653, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 1683, 1686,
	 1689, 1692, 1695, 1698, 1701, 1704, 1707, 1710, 1713, 1716, 1719, 1722,
	 1725, 1728, 1731, 1734, 1737, 1740, 1743, 1746, 1749, 1752, 1755, 1758,
	 1761, 1764, 1767, 1770, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787,
	 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811,
	 1813, 1815, 1817, 1819
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    3,    4,    5,    6,    8,    7,    9,   10,   11,   12,
	   13,   14,    7,    0,   15,   16,   17,    0,   18,   19,   20,   21,
	    0,   22,    0,   23,    0,   24,    0,   26,   27,   25,   29,   30,
	   28,    1,    2,    3,    4,    5,    8,    7,    9,   10,   11,   12,
	   13,   14,    7,    0,   31,   32,    0,   33,    0,   34,    0,   35,
	    0,   24,    0,   36,    0,   37,    0,   39,   38,   41,   40,   42,
	   43,   41,   44,   45,   45,   44,   40,   46,   41,   40,   47,   41,
	   40,   48,   41,   40,   49,   41,   40,   50,   41,   40,   51,   41,
	   40,   52,   41,   40,   53,   41,   40,   54,   41,   40,   55,   41,
	   40,   56,   41,   40,   57,   41,   40,   58,   41,   40,   59,   41,
	   40,   41,   60,   40,   61,   62,   63,   64,   65,   67,   66,   68,
	   69,   70,   71,   72,   73,   66,    0,   74,    0,   75,    0,   76,
	    0,   77,    0,   24,    0,   78,    0,   79,    0,   80,    0,   81,
	    0,   82,    0,   83,    0,   85,   84,   87,   86,   88,   89,   90,
	   91,   87,   92,   93,   94,   93,   92,   86,   95,   96,   87,   86,
	   97,   98,   87,   86,   99,   87,   86,  100,   87,   86,  101,   87,
	   86,  102,   87,   86,  103,   87,   86,  104,   87,   86,  105,   87,
	   86,  106,   87,   86,  107,   87,   86,   87,  108,   86,  109,   87,
	   86,  110,   87,   86,  111,   87,   86,  112,   87,   86,  113,   87,
	   86,  114,   87,   86,  115,   87,   86,  116,   87,   86,  117,   87,
	   86,  118,   87,  108,   86,  119,  120,   87,   86,  121,   87,   86,
	  122,   87,   86,  123,   87,   86,  124,   87,   86,  125,   87,   86,
	  126,   87,   86,  127,   87,   86,  128,   87,   86,  129,   87,   86,
	  130,   87,   86,  131,   87,   86,  132,   87,   86,  133,   87,   86,
	  134,   87,   86,  135,   87,   86,  107,   87,   86,  136,   87,   86,
	  137,   87,   86,  138,   87,   86,  139,   87,   86,  140,   87,   86,
	  141,   87,   86,  142,   87,   86,  143,   87,   86,  144,   87,   86,
	  145,   87,   86,  146,   87,  108,   86,  147,   87,   86,  148,   87,
	   86,  149,   87,   86,  150,   87,   86,  107,   87,   86,  151,  152,
	   87,   86,  153,   87,   86,  154,   87,   86,  155,   87,   86,  156,
	   87,   86,  157,   87,   86,  158,   87,   86,  159,   87,   86,  160,
	   87,   86,  107,   87,   86,  161,   87,   86,  162,   87,   86,  163,
	   87,   86,  164,   87,   86,  165,   87,   86,  166,   87,   86,  167,
	   87,   86,  168,   87,   86,  169,   87,   86,  170,   87,   86,  171,
	   87,   86,  107,   87,   86,  172,   87,   86,  107,   87,   86,  173,
	   87,   86,  174,   87,   86,  175,   87,   86,  176,   87,   86,  107,
	   87,   86,  177,   87,   86,  178,   87,   86,  179,   87,   86,  180,
	   87,   86,  107,   87,   86,   87,  181,   86,   87,  182,   86,   87,
	  183,   86,   87,  184,   86,   87,  185,   86,   87,  186,   86,   87,
	  187,   86,   87,  188,   86,   87,  189,   86,   87,  190,   86,   87,
	  191,   86,   87,  192,   86,   87,  193,   86,   87,  194,   86,  195,
	    0,  196,    0,  197,    0,  198,    0,  199,    0,  200,    0,  202,
	  201,  204,  203,  205,  206,  207,  208,  204,  209,  210,  211,  212,
	  210,  209,  203,  213,  214,  215,  204,  203,  216,  217,  218,  219,
	  204,  203,  220,  204,  203,  221,  204,  203,  222,  204,  203,  223,
	  204,  203,  224,  204,  203,  225,  204,  203,  226,  204,  203,  227,
	  204,  203,  222,  204,  203,  228,  204,  203,  229,  204,  203,  225,
	  204,  203,  230,  204,  203,  231,  204,  203,  232,  204,  203,  233,
	  204,  203,  234,  204,  203,  222,  204,  203,  225,  235,  204,  203,
	  236,  204,  203,  237,  204,  203,  238,  204,  203,  239,  204,  203,
	  240,  204,  203,  241,  204,  203,  242,  204,  203,  243,  204,  203,
	  244,  204,  203,  245,  204,  222,  203,  246,  247,  204,  203,  248,
	  204,  203,  249,  204,  203,  250,  204,  203,  251,  204,  203,  252,
	  204,  203,  253,  204,  203,  254,  204,  203,  255,  204,  203,  256,
	  204,  203,  257,  204,  203,  258,  204,  203,  259,  204,  203,  260,
	  204,  203,  261,  204,  203,  262,  204,  203,  263,  204,  203,  204,
	  222,  203,  264,  204,  203,  265,  204,  203,  266,  204,  203,  267,
	  204,  203,  268,  204,  203,  269,  204,  203,  270,  204,  203,  271,
	  204,  203,  272,  204,  203,  273,  204,  203,  274,  204,  222,  203,
	  275,  204,  203,  276,  204,  203,  277,  204,  203,  278,  204,  203,
	  263,  204,  203,  279,  280,  204,  203,  281,  204,  203,  282,  204,
	  203,  283,  204,  203,  284,  204,  203,  285,  204,  203,  286,  204,
	  203,  287,  204,  203,  288,  204,  203,  263,  204,  203,  289,  204,
	  203,  290,  204,  203,  291,  204,  203,  292,  204,  203,  293,  204,
	  203,  294,  204,  203,  295,  204,  203,  296,  204,  203,  297,  204,
	  203,  298,  204,  203,  299,  204,  203,  263,  204,  203,  300,  204,
	  203,  225,  204,  203,  301,  204,  203,  302,  204,  203,  303,  204,
	  203,  304,  204,  203,  222,  204,  203,  305,  204,  203,  306,  204,
	  203,  307,  204,  203,  308,  204,  203,  263,  204,  203,  204,  309,
	  203,  204,  310,  203,  204,  311,  203,  204,  312,  203,  204,  313,
	  203,  204,  314,  203,  204,  315,  203,  204,  316,  203,  204,  317,
	  203,  204,  318,  203,  204,  319,  203,  204,  320,  203,  204,  321,
	  203,  204,  322,  203,  204,  222,  203,  323,    0,  324,    0,  326,
	  327,  325,  329,  330,  328,  333,  332,  334,  332,  331,  337,  336,
	  338,  336,  335,  337,  336,  339,  336,  335,  337,  336,  340,  336,
	  335,  342,  341,  341,    0,    8,  343,  343,    0,  345,  346,  344,
	    8,    0,  347,    0,  348,    0,  349,    0,  350,    0,  351,    0,
	  352,    0,  353,    0,  354,    0,  355,    0,  356,    0,  357,    0,
	  358,    0,  359,    0,  360,    0,   24,    0,    0,    0,    0,    0,
	  361,  362,  363,  362,  362,  365,  364,  361,    8,  366,   13,  366,
	    0,  367,  368,  367,    0,  371,  370,  372,  373,  370,  369,    0,
	  375,  376,  374,    0,  375,  374,  371,  377,  375,  376,  377,  374,
	  378,  379,  380,  381,  382,  371,  383,  384,  385,  386,  387,  388,
	  389,  383,    0,  390,   41,   40,  391,   41,   40,  392,   41,   40,
	  393,   41,   40,   59,   41,   40,  394,    0,  395,    0,   33,    0,
	  396,    0,  397,    0,   33,    0,  398,    0,  399,    0,  400,    0,
	  401,    0,  402,    0,   24,    0,   33,  403,  404,    0,  405,    0,
	  406,    0,  407,    0,  408,    0,  409,    0,  410,    0,  411,    0,
	  412,    0,   36,    0,  413,    0,  414,    0,  415,    0,  416,    0,
	  417,    0,  418,    0,  419,    0,  420,    0,  421,    0,  422,  423,
	    0,  424,  425,    0,  426,    0,  427,    0,  428,    0,  429,    0,
	  430,    0,  431,    0,  432,    0,  433,    0,  434,    0,  435,    0,
	  436,    0,  437,    0,  438,    0,  439,    0,  440,    0,  441,    0,
	  442,    0,  444,  443,  446,  445,  447,  448,  449,  450,  446,  451,
	  452,  453,  454,  452,  451,  445,  455,  456,  457,  446,  445,  458,
	  459,  460,  461,  446,  445,  462,  446,  445,  463,  446,  445,  464,
	  446,  445,  465,  446,  445,  466,  446,  445,  467,  446,  445,  468,
	  446,  445,  469,  446,  445,  464,  446,  445,  470,  446,  445,  471,
	  446,  445,  467,  446,  445,  472,  446,  445,  473,  446,  445,  474,
	  446,  445,  475,  446,  445,  476,  446,  445,  464,  446,  445,  467,
	  477,  446,  445,  478,  446,  445,  479,  446,  445,  480,  446,  445,
	  481,  446,  445,  482,  446,  445,  483,  446,  445,  484,  446,  445,
	  485,  446,  445,  486,  446,  445,  446,  464,  445,  487,  446,  445,
	  488,  446,  445,  489,  446,  445,  490,  446,  445,  491,  446,  445,
	  492,  446,  445,  493,  446,  445,  494,  446,  445,  495,  446,  445,
	  496,  446,  445,  497,  446,  445,  498,  446,  445,  486,  446,  445,
	  499,  446,  445,  467,  446,  445,  500,  446,  445,  501,  446,  445,
	  502,  446,  445,  503,  446,  445,  464,  446,  445,  504,  446,  445,
	  505,  446,  445,  506,  446,  445,  507,  446,  445,  486,  446,  445,
	  446,  508,  445,  446,  509,  445,  446,  510,  445,  446,  511,  445,
	  446,  512,  445,  446,  513,  445,  446,  514,  445,  446,  515,  445,
	  446,  516,  445,  446,  517,  445,  446,  518,  445,  446,  519,  445,
	  446,  520,  445,  446,  521,  445,  446,  464,  445,  522,    0,  523,
	    0,  524,    0,  525,    0,  526,    0,  527,    0,  528,    0,  529,
	    0,  530,    0,  531,    0,  532,  442,    0,  533,    0,  534,    0,
	  535,    0,  536,    0,  441,    0,  538,  537,  540,  539,  541,  542,
	  543,  544,  545,  540,  546,  547,  548,  549,  547,  546,  539,  550,
	  551,  552,  540,  539,  553,  554,  555,  556,  540,  539,  557,  540,
	  539,  558,  540,  539,  559,  540,  539,  560,  540,  539,  561,  540,
	  539,  562,  540,  539,  563,  540,  539,  564,  540,  539,  559,  540,
	  539,  565,  540,  539,  566,  540,  539,  562,  540,  539,  567,  540,
	  539,  568,  540,  539,  569,  540,  539,  570,  540,  539,  571,  540,
	  539,  559,  540,  539,  562,  572,  540,  539,  573,  540,  539,  574,
	  540,  539,  575,  540,  539,  576,  540,  539,  577,  540,  539,  578,
	  540,  539,  579,  540,  539,  580,  540,  539,  581,  540,  539,  582,
	  540,  559,  539,  583,  584,  540,  539,  585,  540,  539,  586,  540,
	  539,  587,  540,  539,  588,  540,  539,  589,  540,  539,  590,  540,
	  539,  591,  540,  539,  592,  540,  539,  593,  540,  539,  594,  540,
	  539,  595,  540,  539,  596,  540,  539,  597,  540,  539,  598,  540,
	  539,  599,  540,  539,  600,  540,  539,  540,  559,  539,  601,  540,
	  539,  602,  540,  539,  603,  540,  539,  604,  540,  539,  605,  540,
	  539,  606,  540,  539,  607,  540,  539,  608,  540,  539,  609,  540,
	  539,  610,  540,  539,  611,  540,  559,  539,  612,  540,  539,  613,
	  540,  539,  614,  540,  539,  615,  540,  539,  600,  540,  539,  616,
	  617,  540,  539,  618,  540,  539,  619,  540,  539,  620,  540,  539,
	  621,  540,  539,  622,  540,  539,  623,  540,  539,  624,  540,  539,
	  625,  540,  539,  600,  540,  539,  626,  540,  539,  627,  540,  539,
	  628,  540,  539,  629,  540,  539,  630,  540,  539,  631,  540,  539,
	  632,  540,  539,  633,  540,  539,  634,  540,  539,  635,  540,  539,
	  636,  540,  539,  600,  540,  539,  637,  540,  539,  562,  540,  539,
	  638,  540,  539,  639,  540,  539,  640,  540,  539,  641,  540,  539,
	  559,  540,  539,  642,  540,  539,  643,  540,  539,  644,  540,  539,
	  645,  540,  539,  600,  540,  539,  646,  540,  539,  647,  540,  539,
	  648,  540,  539,  649,  540,  539,  600,  540,  539,  540,  650,  539,
	  540,  651,  539,  540,  652,  539,  540,  653,  539,  540,  654,  539,
	  540,  655,  539,  540,  656,  539,  540,  657,  539,  540,  658,  539,
	  540,  659,  539,  540,  660,  539,  540,  661,  539,  540,  662,  539,
	  540,  663,  539,  540,  559,  539,  664,  665,    0,  666,    0,  667,
	    0,  668,    0,  669,    0,  670,    0,  671,    0,  672,    0,  673,
	    0,  441,    0,  674,    0,  675,    0,  676,    0,  677,    0,  678,
	    0,  679,    0,  680,    0,  681,    0,  682,    0,  683,    0,  684,
	    0,   82,    0,  685,    0,    7,    0,  686,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,   10,   36,   41,  153,  601,    9,    9,  276,  286,  288,
	  302,  303,  306,    3,  329,  579,    4,  317,  320,  323,    5,    6,
	    7,    8,    9,  287,    8,    9,  287,   11,   15,   12,   13,   14,
	   16,   17,   18,   19,   18,   19,   20,  312,   19,    9,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
	   35,    2,   10,   36,   41,  153,    9,    9,  276,  286,  288,  302,
	  303,  306,   37,   38,   39,   40,   42,   43,   44,   45,   46,   47,
	   48,   49,   48,   49,   50,  127,  129,  134,   49,    9,  139,   51,
	  105,   52,   62,   53,   54,   55,   56,   57,   58,   59,   60,   61,
	   35,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
	   89,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
	   85,   86,   87,   88,   90,   91,   92,   93,   94,   95,   96,   97,
	   98,   99,  100,  101,  102,  103,  104,  106,  115,  107,  108,  109,
	  110,  111,  112,  113,  114,  116,  117,  118,  119,  120,  121,  122,
	  123,  124,  125,  126,  128,  130,  131,  132,  133,  135,  136,  137,
	  138,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
	  151,  152,    9,  154,  155,  156,  157,  158,  159,  160,  161,  160,
	  161,  162,  249,  251,  256,  161,    9,  261,  275,  163,  182,  227,
	  164,  167,  173,  176,  165,  166,   35,  168,  169,  170,  171,  172,
	  174,  175,  177,  178,  179,  180,  181,  183,  184,  185,  186,  187,
	  188,  189,  190,  191,  192,  193,  194,  211,  195,  196,  197,  198,
	  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
	  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
	  224,  225,  226,  228,  237,  229,  230,  231,  232,  233,  234,  235,
	  236,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
	  250,  252,  253,  254,  255,  257,  258,  259,  260,  262,  263,  264,
	  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,    9,  277,
	  278,  279,  280,  279,  279,  280,  279,  281,  281,  281,  282,  281,
	  281,  281,  282,  283,  284,  285,    9,  285,  286,    9,  287,  289,
	  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
	  603,  304,  305,    9,  304,  303,  305,  306,  307,  308,  310,  311,
	  309,  307,  308,  309,  307,  310,    2,   10,   36,   41,  153,  311,
	  276,  286,  288,  302,  303,  306,  313,  314,  315,  316,  318,  319,
	  321,  322,  324,  325,  326,  327,  328,  330,  339,  331,  332,  333,
	  334,  335,  336,  337,  338,  340,  341,  342,  343,  344,  345,  346,
	  347,  348,  349,  457,  350,  441,  351,  352,  353,  354,  355,  356,
	  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
	  369,  368,  369,  370,  414,  416,  421,  369,    9,  426,  440,  371,
	  390,  401,  372,  375,  381,  384,  373,  374,   35,  376,  377,  378,
	  379,  380,  382,  383,  385,  386,  387,  388,  389,  391,  392,  393,
	  394,  395,  396,  397,  398,  399,  400,  402,  403,  404,  405,  406,
	  407,  408,  409,  410,  411,  412,  413,  415,  417,  418,  419,  420,
	  422,  423,  424,  425,  427,  428,  429,  430,  431,  432,  433,  434,
	  435,  436,  437,  438,  439,    9,  442,  443,  444,  445,  446,  447,
	  448,  449,  450,  451,  452,  453,  454,  455,  456,  458,  459,  458,
	  459,  460,  547,  549,  554,  559,  459,    9,  564,  578,  461,  480,
	  525,  462,  465,  471,  474,  463,  464,   35,  466,  467,  468,  469,
	  470,  472,  473,  475,  476,  477,  478,  479,  481,  482,  483,  484,
	  485,  486,  487,  488,  489,  490,  491,  492,  509,  493,  494,  495,
	  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
	  508,  510,  511,  512,  513,  514,  515,  516,  517,  518,  519,  520,
	  521,  522,  523,  524,  526,  535,  527,  528,  529,  530,  531,  532,
	  533,  534,  536,  537,  538,  539,  540,  541,  542,  543,  544,  545,
	  546,  548,  550,  551,  552,  553,  555,  556,  557,  558,  560,  561,
	  562,  563,  565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
	  575,  576,  577,    9,  580,  589,  581,  582,  583,  584,  585,  586,
	  587,  588,  590,  591,  592,  593,  594,  595,  596,  597,  598,  599,
	  600,  602,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,   29,   29,   29,   29,    0,    0,   54,    3,    1,    0,
	   29,    1,   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  149,  126,    0,  110,   23,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,   84,   84,    0,   81,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   21,   63,   63,   63,   63,   63,   31,  130,   60,   57,   31,   63,
	   57,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,   84,   84,   84,   84,    0,   69,   33,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   13,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,   84,   84,   84,   84,    0,   72,   33,   84,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,    0,
	    0,    7,  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,
	   33,  122,   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   27,  118,   27,   51,    0,    0,    0,   37,   37,   54,
	   37,   87,    0,    0,   39,    0,   96,   96,   96,   96,   96,    0,
	   93,   90,   41,   96,   90,   99,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,   84,   84,   84,   84,    0,   78,   33,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,   84,   84,   84,   84,   84,    0,   75,   33,   84,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 603;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 790 "java/src/main/java/gherkin/lexer/Ja.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
    
// line 797 "java/src/main/java/gherkin/lexer/Ja.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1058 "java/src/main/java/gherkin/lexer/Ja.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1090 "java/src/main/java/gherkin/lexer/Ja.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ja.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}


// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Da implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"


  private final Listener listener;

  public Da(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Da.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   19,   20,   21,   39,   40,   41,   43,   45,   50,   55,
	   60,   65,   70,   74,   78,   80,   81,   82,   83,   84,   85,   86,
	   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   98,  100,
	  105,  112,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
	  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  150,  152,
	  154,  156,  158,  160,  162,  164,  166,  168,  170,  172,  174,  176,
	  178,  180,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
	  208,  223,  225,  227,  229,  231,  233,  235,  237,  239,  241,  243,
	  245,  247,  249,  251,  253,  255,  257,  259,  261,  263,  265,  267,
	  269,  271,  273,  275,  277,  279,  281,  283,  285,  287,  289,  291,
	  293,  295,  297,  299,  301,  303,  305,  307,  309,  311,  313,  315,
	  317,  319,  321,  324,  326,  328,  330,  332,  334,  336,  338,  340,
	  341,  342,  343,  344,  345,  346,  347,  348,  349,  360,  362,  364,
	  366,  368,  370,  372,  374,  376,  378,  380,  382,  384,  386,  388,
	  390,  392,  394,  396,  398,  400,  402,  404,  406,  408,  410,  412,
	  414,  416,  418,  420,  422,  424,  426,  428,  430,  432,  434,  436,
	  439,  441,  443,  445,  447,  449,  451,  453,  455,  457,  459,  461,
	  463,  465,  467,  469,  471,  473,  475,  477,  479,  480,  481,  482,
	  483,  484,  485,  486,  487,  488,  489,  496,  498,  500,  502,  504,
	  506,  508,  510,  512,  513,  514,  515,  516,  517,  518,  519,  520,
	  521,  522,  524,  525,  526,  527,  528,  529,  530,  531,  532,  533,
	  534,  550,  552,  554,  556,  558,  560,  562,  564,  566,  568,  570,
	  572,  574,  576,  578,  580,  582,  584,  586,  588,  590,  592,  594,
	  596,  598,  600,  602,  604,  606,  608,  610,  612,  614,  616,  618,
	  620,  622,  624,  626,  628,  630,  632,  634,  636,  638,  640,  642,
	  644,  646,  648,  650,  652,  654,  656,  658,  660,  662,  665,  667,
	  669,  671,  673,  675,  677,  679,  683,  689,  692,  694,  700,  718,
	  720,  722,  724,  726,  728,  730,  732,  734,  736,  738,  740,  742,
	  744,  746,  748,  750,  752,  754,  757,  759,  761,  763,  765,  767,
	  769,  771
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,   71,
	   77,   78,   79,   83,  124,    9,   13,  -69,  -65,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   69,   71,   77,   78,   79,   83,
	  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,
	    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,
	   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   32,
	   10,   13,   10,   13,   13,   32,   64,    9,   10,    9,   10,   13,
	   32,   64,   11,   12,   10,   32,   64,    9,   13,   98,  115,  116,
	  114,   97,  107,  116,   32,   83,   99,  101,  110,   97,  114,  105,
	  111,   58,   10,   10,   10,   32,   35,   37,   42,   64,   69,   71,
	   77,   78,   79,   83,    9,   13,   10,   95,   10,   70,   10,   69,
	   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,
	   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,
	   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,   71,   77,
	   78,   79,   83,  124,    9,   13,   97,  103,  103,  114,  117,  110,
	  100,   58,   10,   10,   10,   32,   35,   37,   42,   64,   65,   69,
	   71,   77,   78,   79,   83,    9,   13,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   32,   10,   98,   10,  115,   10,  116,   10,  114,   10,   97,   10,
	  107,   10,  116,   10,   32,   10,   83,   10,   99,   10,  101,   10,
	  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   58,   10,
	  103,   10,  101,   10,  110,   10,  115,   10,  107,   10,   97,   10,
	   98,   10,  105,   10,  118,   10,  101,   10,  116,   10,  101,   10,
	  110,  -61,   10,  -91,   10,   10,  114,   10,  103,  -61,   10,   99,
	  -91,   10,   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,
	   10,  101,  103,  107,  101,  110,  115,  107,   97,   98,   58,   10,
	   10,   10,   32,   35,   37,   64,   65,   66,   69,   83,    9,   13,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,   10,   98,   10,  115,   10,  116,   10,  114,
	   10,   97,   10,  107,   10,  116,   10,   32,   10,   83,   10,   99,
	   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,
	   10,   58,   10,   97,   10,  103,   10,  103,   10,  114,   10,  117,
	   10,  110,   10,  100,   10,  103,  107,   10,  101,   10,  110,   10,
	  115,   10,  107,   10,   97,   10,   98,   10,  115,   10,  101,   10,
	  109,   10,  112,   10,  108,   10,  101,   10,  114,   10,   99,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  101,  115,
	  101,  109,  112,  108,  101,  114,   58,   10,   10,   10,   32,   35,
	   69,  124,    9,   13,   10,  103,   10,  101,   10,  110,   10,  115,
	   10,  107,   10,   97,   10,   98,   10,   58,  105,  118,  101,  116,
	  101,  110,  -61,  -91,  114,  103,  -61,   99,  -91,  101,  110,   97,
	  114,  105,  101,   58,   10,   10,   10,   32,   35,   37,   42,   64,
	   65,   66,   69,   71,   77,   78,   79,   83,    9,   13,   10,   95,
	   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,
	   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,
	   10,   37,   10,   32,   10,   98,   10,  115,   10,  116,   10,  114,
	   10,   97,   10,  107,   10,  116,   10,   32,   10,   83,   10,   99,
	   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,
	   10,   58,   10,   97,   10,  103,   10,  103,   10,  114,   10,  117,
	   10,  110,   10,  100,   10,  103,   10,  101,   10,  110,   10,  115,
	   10,  107,   10,   97,   10,   98,   10,  105,   10,  118,   10,  101,
	   10,  116,   10,  101,   10,  110,  -61,   10,  -91,   10,   10,  114,
	   10,  103,  -61,   10,   99,  -91,   10,   10,  101,   10,  110,   10,
	   97,   10,  114,   10,  105,   10,  101,   32,  124,    9,   13,   10,
	   32,   92,  124,    9,   13,   10,   92,  124,   10,   92,   10,   32,
	   92,  124,    9,   13,   10,   32,   34,   35,   37,   42,   64,   65,
	   66,   69,   71,   77,   78,   79,   83,  124,    9,   13,   10,  103,
	   10,  101,   10,  110,   10,  115,   10,  107,   10,   97,   10,   98,
	   10,   58,   10,  105,   10,  118,   10,  101,   10,  116,   10,  101,
	   10,  110,  -61,   10,  -91,   10,   10,  114,   10,  103,  -61,   10,
	   99,  -91,   10,   10,  101,   10,  110,   10,   97,   10,  114,   10,
	  105,   10,  101,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   17,    1,    1,   16,    1,    1,    2,    2,    3,    3,    3,
	    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
	    5,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,   12,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,   16,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	   13,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    9,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    5,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	   14,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    4,    3,    2,    4,   16,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    1,    0,    0,    1,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   19,   21,   23,   41,   43,   45,   48,   51,   56,   61,
	   66,   71,   76,   80,   84,   87,   89,   91,   93,   95,   97,   99,
	  101,  103,  105,  107,  109,  111,  113,  115,  117,  119,  122,  125,
	  130,  137,  142,  144,  146,  148,  150,  152,  154,  156,  158,  160,
	  162,  164,  166,  168,  170,  172,  174,  176,  178,  180,  194,  197,
	  200,  203,  206,  209,  212,  215,  218,  221,  224,  227,  230,  233,
	  236,  239,  257,  259,  261,  263,  265,  267,  269,  271,  273,  275,
	  277,  292,  295,  298,  301,  304,  307,  310,  313,  316,  319,  322,
	  325,  328,  331,  334,  337,  340,  343,  346,  349,  352,  355,  358,
	  361,  364,  367,  370,  373,  376,  379,  382,  385,  388,  391,  394,
	  397,  400,  403,  406,  409,  412,  415,  418,  421,  424,  427,  430,
	  433,  436,  439,  443,  446,  449,  452,  455,  458,  461,  464,  467,
	  469,  471,  473,  475,  477,  479,  481,  483,  485,  496,  499,  502,
	  505,  508,  511,  514,  517,  520,  523,  526,  529,  532,  535,  538,
	  541,  544,  547,  550,  553,  556,  559,  562,  565,  568,  571,  574,
	  577,  580,  583,  586,  589,  592,  595,  598,  601,  604,  607,  610,
	  614,  617,  620,  623,  626,  629,  632,  635,  638,  641,  644,  647,
	  650,  653,  656,  659,  662,  665,  668,  671,  674,  676,  678,  680,
	  682,  684,  686,  688,  690,  692,  694,  701,  704,  707,  710,  713,
	  716,  719,  722,  725,  727,  729,  731,  733,  735,  737,  739,  741,
	  743,  745,  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,
	  768,  784,  787,  790,  793,  796,  799,  802,  805,  808,  811,  814,
	  817,  820,  823,  826,  829,  832,  835,  838,  841,  844,  847,  850,
	  853,  856,  859,  862,  865,  868,  871,  874,  877,  880,  883,  886,
	  889,  892,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922,
	  925,  928,  931,  934,  937,  940,  943,  946,  949,  952,  956,  959,
	  962,  965,  968,  971,  974,  977,  981,  987,  991,  994, 1000, 1018,
	 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054,
	 1057, 1060, 1063, 1066, 1069, 1072, 1076, 1079, 1082, 1085, 1088, 1091,
	 1094, 1097
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,    2,    0,   18,    0,    2,    0,    3,
	    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
	   15,   16,   17,    2,    0,   19,    0,   20,    0,   22,   23,   21,
	   25,   26,   24,   29,   28,   30,   28,   27,   33,   32,   34,   32,
	   31,   33,   32,   35,   32,   31,   33,   32,   36,   32,   31,   38,
	   37,   39,   37,    0,    3,   40,   40,    0,   38,   37,   37,    0,
	   42,   43,   41,    3,    0,   44,    0,   45,    0,   46,    0,   47,
	    0,   48,    0,   49,    0,   50,    0,   51,    0,   52,    0,   53,
	    0,   54,    0,   55,    0,   56,    0,   57,    0,   58,    0,   60,
	   61,   59,   63,   64,   62,    0,    0,    0,    0,   65,   66,   67,
	   66,   66,   69,   68,   65,    3,   70,    8,   70,    0,   71,    0,
	   72,    0,   73,    0,   74,    0,   75,    0,   76,    0,   77,    0,
	   78,    0,   79,    0,   80,    0,   81,    0,   82,    0,   83,    0,
	   84,    0,   85,    0,   86,    0,   87,    0,   89,   88,   91,   90,
	   91,   92,   93,   94,   95,   93,   96,   97,   98,   99,  100,  101,
	   92,   90,   91,  102,   90,   91,  103,   90,   91,  104,   90,   91,
	  105,   90,   91,  106,   90,   91,  107,   90,   91,  108,   90,   91,
	  109,   90,   91,  110,   90,   91,  111,   90,   91,  112,   90,   91,
	  113,   90,   91,  114,   90,   91,  115,   90,   91,  116,   90,  118,
	  117,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
	  130,  131,  132,  117,    0,  133,    0,  134,    0,  135,    0,  136,
	    0,  137,    0,  138,    0,  139,    0,  140,    0,  142,  141,  144,
	  143,  144,  145,  146,  147,  148,  146,  149,  150,  151,  152,  153,
	  154,  155,  145,  143,  144,  156,  143,  144,  157,  143,  144,  158,
	  143,  144,  159,  143,  144,  160,  143,  144,  161,  143,  144,  162,
	  143,  144,  163,  143,  144,  164,  143,  144,  165,  143,  144,  166,
	  143,  144,  167,  143,  144,  168,  143,  144,  169,  143,  144,  170,
	  143,  144,  171,  143,  144,  172,  143,  144,  173,  143,  144,  174,
	  143,  144,  175,  143,  144,  176,  143,  144,  177,  143,  144,  178,
	  143,  144,  179,  143,  144,  180,  143,  144,  181,  143,  144,  182,
	  143,  144,  183,  143,  144,  184,  143,  144,  185,  143,  144,  186,
	  143,  144,  170,  143,  144,  187,  143,  144,  188,  143,  144,  189,
	  143,  144,  190,  143,  144,  191,  143,  144,  192,  143,  144,  186,
	  143,  144,  193,  143,  144,  194,  143,  144,  195,  143,  144,  196,
	  143,  144,  197,  143,  144,  196,  143,  198,  144,  143,  199,  144,
	  143,  144,  196,  143,  144,  196,  143,  200,  144,  201,  143,  196,
	  144,  143,  144,  202,  143,  144,  203,  143,  144,  204,  143,  144,
	  205,  143,  144,  206,  143,  144,  186,  143,  207,  208,    0,  209,
	    0,  210,    0,  211,    0,  212,    0,  213,    0,  214,    0,  215,
	    0,  217,  216,  219,  218,  219,  220,  221,  222,  221,  223,  224,
	  225,  226,  220,  218,  219,  227,  218,  219,  228,  218,  219,  229,
	  218,  219,  230,  218,  219,  231,  218,  219,  232,  218,  219,  233,
	  218,  219,  234,  218,  219,  235,  218,  219,  236,  218,  219,  237,
	  218,  219,  238,  218,  219,  239,  218,  219,  240,  218,  219,  241,
	  218,  219,  242,  218,  219,  243,  218,  219,  244,  218,  219,  245,
	  218,  219,  246,  218,  219,  247,  218,  219,  248,  218,  219,  249,
	  218,  219,  250,  218,  219,  251,  218,  219,  252,  218,  219,  253,
	  218,  219,  254,  218,  219,  255,  218,  219,  256,  218,  219,  257,
	  218,  219,  258,  218,  219,  259,  218,  219,  260,  218,  219,  261,
	  218,  219,  262,  218,  219,  263,  218,  219,  256,  218,  219,  264,
	  265,  218,  219,  266,  218,  219,  267,  218,  219,  268,  218,  219,
	  269,  218,  219,  270,  218,  219,  256,  218,  219,  271,  218,  219,
	  272,  218,  219,  273,  218,  219,  274,  218,  219,  275,  218,  219,
	  276,  218,  219,  256,  218,  219,  277,  218,  219,  278,  218,  219,
	  279,  218,  219,  280,  218,  219,  281,  218,  219,  282,  218,  219,
	  256,  218,  283,    0,  284,    0,  285,    0,  286,    0,  287,    0,
	  288,    0,  289,    0,  290,    0,  292,  291,  294,  293,  294,  295,
	  296,  297,  296,  295,  293,  294,  298,  293,  294,  299,  293,  294,
	  300,  293,  294,  301,  293,  294,  302,  293,  294,  303,  293,  294,
	  304,  293,  294,  305,  293,  306,    0,  307,    0,  308,    0,  309,
	    0,  310,    0,  309,    0,  311,    0,  312,    0,  309,    0,  309,
	    0,  313,  314,    0,  309,    0,  315,    0,  316,    0,  317,    0,
	  318,    0,  319,    0,  320,    0,  321,    0,  323,  322,  325,  324,
	  325,  326,  327,  328,  329,  327,  330,  331,  332,  333,  334,  335,
	  336,  337,  326,  324,  325,  338,  324,  325,  339,  324,  325,  340,
	  324,  325,  341,  324,  325,  342,  324,  325,  343,  324,  325,  344,
	  324,  325,  345,  324,  325,  346,  324,  325,  347,  324,  325,  348,
	  324,  325,  349,  324,  325,  350,  324,  325,  351,  324,  325,  352,
	  324,  325,  353,  324,  325,  354,  324,  325,  355,  324,  325,  356,
	  324,  325,  357,  324,  325,  358,  324,  325,  359,  324,  325,  360,
	  324,  325,  361,  324,  325,  362,  324,  325,  363,  324,  325,  364,
	  324,  325,  365,  324,  325,  366,  324,  325,  367,  324,  325,  368,
	  324,  325,  352,  324,  325,  369,  324,  325,  370,  324,  325,  371,
	  324,  325,  372,  324,  325,  373,  324,  325,  374,  324,  325,  368,
	  324,  325,  375,  324,  325,  376,  324,  325,  377,  324,  325,  378,
	  324,  325,  379,  324,  325,  380,  324,  325,  368,  324,  325,  381,
	  324,  325,  382,  324,  325,  383,  324,  325,  384,  324,  325,  385,
	  324,  325,  384,  324,  386,  325,  324,  387,  325,  324,  325,  384,
	  324,  325,  384,  324,  388,  325,  389,  324,  384,  325,  324,  325,
	  390,  324,  325,  391,  324,  325,  392,  324,  325,  393,  324,  325,
	  394,  324,  325,  368,  324,  395,  396,  395,    0,  399,  398,  400,
	  401,  398,  397,    0,  403,  404,  402,    0,  403,  402,  399,  405,
	  403,  404,  405,  402,  399,  406,  407,  408,  409,  410,  411,  412,
	  413,  414,  415,  416,  417,  418,  419,  420,  406,    0,   91,  421,
	   90,   91,  422,   90,   91,  423,   90,   91,  424,   90,   91,  425,
	   90,   91,  426,   90,   91,  427,   90,   91,  116,   90,   91,  428,
	   90,   91,  429,   90,   91,  430,   90,   91,  431,   90,   91,  432,
	   90,   91,  431,   90,  433,   91,   90,  434,   91,   90,   91,  431,
	   90,   91,  431,   90,  435,   91,  436,   90,  431,   91,   90,   91,
	  437,   90,   91,  438,   90,   91,  439,   90,   91,  440,   90,   91,
	  441,   90,   91,  427,   90,  442,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   16,   18,   32,   35,   38,   74,  142,
	  231,  235,  237,  240,  241,  317,    3,    6,    7,    8,    9,    8,
	    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,
	   13,   14,    4,   15,   14,   16,    4,   17,   19,   20,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   30,   31,  349,   33,   34,
	    4,   17,   34,    4,   17,   36,   37,    4,   36,   35,   37,   39,
	   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
	   52,   53,   54,   55,   56,   57,   56,   57,   57,    4,   58,   72,
	  323,  331,  335,  337,  340,  341,   59,   60,   61,   62,   63,   64,
	   65,   66,   67,   68,   69,   70,   71,    4,   73,    4,    4,    5,
	   16,   18,   32,   35,   38,   74,  142,  231,  235,  237,  240,  241,
	  317,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   83,
	   84,   84,    4,   85,   99,  100,  117,  124,  128,  130,  133,  134,
	   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
	   98,    4,   73,  101,  102,  103,  104,  105,  106,  107,  108,  109,
	  110,  111,  112,  113,  114,  115,  116,  118,  119,  120,  121,  122,
	  123,  125,  126,  127,   99,  129,  131,  132,  135,  136,  137,  138,
	  139,  140,  141,  143,  212,  144,  145,  146,  147,  148,  149,  150,
	  151,  152,  151,  152,  152,    4,  153,  167,  184,  191,  205,  154,
	  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,
	    4,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
	  179,  180,  181,  182,  183,   73,  185,  186,  187,  188,  189,  190,
	  192,  198,  193,  194,  195,  196,  197,  199,  200,  201,  202,  203,
	  204,  206,  207,  208,  209,  210,  211,  213,  214,  215,  216,  217,
	  218,  219,  220,  221,  222,  221,  222,  222,    4,  223,  224,  225,
	  226,  227,  228,  229,  230,   73,  232,  233,  234,   32,  236,  238,
	  239,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
	  251,  252,  252,    4,  253,  267,  268,  285,  292,  299,  303,  305,
	  308,  309,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
	  264,  265,  266,    4,   73,  269,  270,  271,  272,  273,  274,  275,
	  276,  277,  278,  279,  280,  281,  282,  283,  284,  286,  287,  288,
	  289,  290,  291,  293,  294,  295,  296,  297,  298,  300,  301,  302,
	  267,  304,  306,  307,  310,  311,  312,  313,  314,  315,  316,  317,
	  318,  319,  321,  322,  320,  318,  319,  320,  318,  321,  322,    5,
	   16,   18,   32,   35,   38,   74,  142,  231,  235,  237,  240,  241,
	  317,  324,  325,  326,  327,  328,  329,  330,  332,  333,  334,   72,
	  336,  338,  339,  342,  343,  344,  345,  346,  347,  348,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,
	    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,
	    0,   11,  106,    0,    0,    0,  114,   25,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  149,  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,
	   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   19,   19,   31,  130,   60,
	   57,   31,   63,   57,   63,   63,   63,   63,   63,   63,   63,   63,
	   66,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,    0,   72,   33,   84,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   15,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   81,   84,    0,    0,
	    0,    0,    0,    0,    0,   21,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,    0,   75,   33,   84,   84,   84,   84,   84,   84,   84,
	   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   17,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   37,   37,   54,   37,   87,    0,    0,   39,    0,    0,   93,
	   90,   41,   96,   90,   96,   96,   96,   96,   96,   96,   96,   96,
	   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 349;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 544 "java/src/main/java/gherkin/lexer/Da.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
    
// line 551 "java/src/main/java/gherkin/lexer/Da.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 812 "java/src/main/java/gherkin/lexer/Da.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 844 "java/src/main/java/gherkin/lexer/Da.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/da.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

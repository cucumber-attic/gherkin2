
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Vi implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"


  private final Listener listener;

  public Vi(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Vi.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   18,   19,   20,   37,   38,   39,   41,   43,   48,   53,
	   58,   63,   67,   71,   73,   74,   75,   76,   77,   78,   79,   80,
	   81,   82,   83,   84,   85,   86,   87,   88,   89,   91,   93,   98,
	  105,  110,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
	  122,  123,  124,  125,  139,  141,  143,  145,  147,  149,  151,  153,
	  155,  157,  159,  161,  163,  165,  167,  169,  186,  187,  188,  189,
	  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
	  208,  210,  212,  214,  216,  218,  220,  222,  224,  226,  228,  230,
	  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
	  244,  245,  259,  261,  263,  265,  267,  269,  271,  273,  275,  277,
	  279,  281,  283,  285,  287,  289,  292,  294,  296,  298,  300,  302,
	  304,  306,  308,  310,  312,  314,  316,  318,  320,  322,  324,  326,
	  329,  331,  333,  335,  337,  339,  341,  343,  345,  347,  349,  352,
	  354,  356,  358,  361,  363,  365,  367,  369,  371,  373,  375,  377,
	  379,  381,  383,  385,  387,  389,  391,  393,  395,  397,  400,  403,
	  405,  407,  409,  411,  413,  415,  417,  419,  421,  423,  425,  426,
	  427,  428,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
	  440,  441,  442,  443,  444,  458,  460,  462,  464,  466,  468,  470,
	  472,  474,  476,  478,  480,  482,  484,  486,  488,  490,  492,  494,
	  496,  498,  500,  502,  505,  507,  509,  511,  513,  515,  517,  519,
	  521,  523,  525,  527,  529,  531,  533,  535,  537,  539,  542,  545,
	  547,  549,  551,  553,  555,  557,  559,  561,  563,  565,  567,  569,
	  571,  573,  575,  577,  579,  581,  583,  585,  586,  587,  588,  589,
	  590,  591,  592,  593,  594,  595,  596,  597,  598,  599,  600,  601,
	  602,  604,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,
	  616,  617,  618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
	  638,  640,  642,  644,  646,  648,  650,  652,  654,  656,  658,  660,
	  662,  664,  666,  668,  670,  672,  674,  676,  678,  680,  682,  684,
	  686,  688,  690,  692,  694,  696,  698,  700,  702,  704,  706,  708,
	  710,  713,  715,  717,  719,  721,  723,  725,  727,  729,  731,  733,
	  735,  737,  739,  741,  744,  746,  748,  750,  752,  754,  756,  758,
	  760,  762,  764,  766,  768,  770,  772,  775,  777,  779,  781,  783,
	  785,  787,  788,  789,  790,  791,  795,  801,  804,  806,  812,  829,
	  831,  833,  835,  837,  839,  841,  843,  846,  848,  850,  852,  854,
	  856,  858,  860,  862,  864,  866,  868,  871,  873,  875,  877,  880,
	  882,  884,  886,  888,  890,  892,  894,  896,  898,  900,  902,  904,
	  906,  908,  910,  912,  914,  916,  919,  922,  924,  926,  928,  930,
	  932,  934,  936,  938,  940,  942,  943,  944,  945,  946
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   66,   67,   68,   75,
	   78,   84,   86,  124,    9,   13,  -69,  -65,   10,   32,   34,   35,
	   37,   42,   64,   66,   67,   68,   75,   78,   84,   86,  124,    9,
	   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,
	   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,   13,   10,
	   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,   95,   69,
	   78,   68,   95,   37,   32,   10,   13,   10,   13,   13,   32,   64,
	    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,   32,   64,
	    9,   13,  -31,  105,  -69, -111,  105,   32,   99,  -31,  -70,  -93,
	  110,  104,   58,   10,   10,   10,   32,   35,   37,   42,   64,   66,
	   67,   75,   78,   84,   86,    9,   13,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   32,   10,   32,   34,   35,   37,   42,   64,   66,   67,   68,   75,
	   78,   84,   86,  124,    9,   13,  104,  111,  -31,  -69,  -81,   32,
	  108,  105,  -31,  -69, -121,  117,   58,   10,   10,   10,   32,   35,
	   84,  124,    9,   13,  -61,   10,  -83,   10,   10,  110,   10,  104,
	   10,   32,   10,  110,  -60,   10, -125,   10,   10,  110,   10,  103,
	   10,   58,  -31,  104,  -69, -117,   99,  104,   32,   98,  -31,  -70,
	  -93,  110,   58,   10,   10,   10,   32,   35,   37,   42,   64,   66,
	   67,   75,   78,   84,   86,    9,   13,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   32,  -31,   10,  105,  -69,   10, -111,   10,   10,  105,   10,   32,
	   10,   99,  -31,   10,  -70,   10,  -93,   10,   10,  110,   10,  104,
	   10,   58,  -31,   10,  -70,   10,  -65,   10,   10,  116,   10,  104,
	   10,  111,  -31,   10,  104,  -69,   10, -117,   10,   10,   99,   10,
	  104,   10,   32,   10,   98,  -31,   10,  -70,   10,  -93,   10,   10,
	  110,   10,  105,  117,   10,  110,   10,  103,   10,   32,   10,  107,
	  116,  -31,   10,  -61,   10,  -84,   10,   10,  110,   10,  104,   10,
	   32,   10,  104,   10,  117,  -31,   10,  -69,   10, -111,   10,   10,
	  110,   10,  103,   10,  104,  -58,   10,  -80,   10,   10,  110,   10,
	  103,  -61,   10,  104,  -84,  -83,   10,   10,  110,   10,  104,   10,
	   32,   10,  110,  -60,   10, -125,   10,  -61,   10,  -84,   10,  -61,
	   10,  -96,   10,  105,  117,  110,  103,   32,  107,  116,  -31,  -69,
	 -117,   99,  104,   32,   98,  -31,  -70,  -93,  110,   58,   10,   10,
	   10,   32,   35,   37,   42,   64,   66,   67,   75,   78,   84,   86,
	    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,
	   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,
	   10,   68,   10,   95,   10,   37,   10,   32,   10,  105,  -31,   10,
	  -70,   10,  -65,   10,   10,  116,   10,  104,   10,  111,  -31,   10,
	  104,  -69,   10, -117,   10,   10,   99,   10,  104,   10,   32,   10,
	   98,  -31,   10,  -70,   10,  -93,   10,   10,  110,   10,   58,   10,
	  105,   10,  104,  -58,   10,  -80,   10,   10,  110,   10,  103,  -61,
	   10,  104,  -84,  -83,   10,   10,  110,   10,  104,   10,   32,   10,
	  104,   10,  117,  -31,   10,  -69,   10, -111,   10,   10,  110,   10,
	  103,   10,  110,   10,  104,   10,   32,   10,  110,  -60,   10, -125,
	   10,  -61,   10,  -84,   10,  -61,   10,  -96,   10,  -61,  -84,  110,
	  104,   32,  104,  117,  -31,  -69, -111,  110,  103,  104,  -58,  -80,
	  110,  103,  -61,  104,  -84,  -83,  110,  104,   32,  104,  117,  -31,
	  -69, -111,  110,  103,  110,  104,   32,  110,  -60, -125,  110,  103,
	   58,   10,   10,   10,   32,   35,   37,   64,   66,   68,   75,   84,
	    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,
	   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,
	   10,   68,   10,   95,   10,   37,  -31,   10,  -69,   10, -111,   10,
	   10,  105,   10,   32,   10,   99,  -31,   10,  -70,   10,  -93,   10,
	   10,  110,   10,  104,   10,   58,  -31,   10,  -69,   10,  -81,   10,
	   10,   32,   10,  108,   10,  105,  -31,   10,  -69,   10, -121,   10,
	   10,  117,  -31,   10,  104,  -69,   10, -117,   10,   10,   99,   10,
	  104,   10,   32,   10,   98,  -31,   10,  -70,   10,  -93,   10,   10,
	  110,   10,  117,   10,  110,   10,  103,   10,   32,   10,  107,  116,
	  -31,   10,  -61,   10,  -84,   10,   10,  110,   10,  104,   10,   32,
	   10,  104,   10,  117,  -31,   10,  -69,   10, -111,   10,   10,  110,
	   10,  103,  -61,   10,  -84,  -83,   10,   10,  110,   10,  104,   10,
	   32,   10,  110,  -60,   10, -125,   10,  -61,  -84,  -61,  -96,   32,
	  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,
	   10,   92,   10,   32,   92,  124,    9,   13,   10,   32,   34,   35,
	   37,   42,   64,   66,   67,   68,   75,   78,   84,   86,  124,    9,
	   13,   10,  105,  -31,   10,  -70,   10,  -65,   10,   10,  116,   10,
	  104,   10,  111,  -31,   10,  104,  -69,   10, -117,   10,   10,   99,
	   10,  104,   10,   32,   10,   98,  -31,   10,  -70,   10,  -93,   10,
	   10,  110,   10,   58,   10,  105,  117,   10,  110,   10,  103,   10,
	   32,   10,  107,  116,  -31,   10,  -61,   10,  -84,   10,   10,  110,
	   10,  104,   10,   32,   10,  104,   10,  117,  -31,   10,  -69,   10,
	 -111,   10,   10,  110,   10,  103,   10,  104,  -58,   10,  -80,   10,
	   10,  110,   10,  103,  -61,   10,  104,  -84,  -83,   10,   10,  110,
	   10,  104,   10,   32,   10,  110,  -60,   10, -125,   10,  -61,   10,
	  -84,   10,  -61,   10,  -96,   10,  -31,  -70,  -65,  116,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   16,    1,    1,   15,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,   12,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,   15,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,   12,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
	    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,   12,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    2,    4,    3,    2,    4,   15,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    1,    0,    0,    1,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   18,   20,   22,   39,   41,   43,   46,   49,   54,   59,
	   64,   69,   73,   77,   80,   82,   84,   86,   88,   90,   92,   94,
	   96,   98,  100,  102,  104,  106,  108,  110,  112,  115,  118,  123,
	  130,  135,  138,  140,  142,  144,  146,  148,  150,  152,  154,  156,
	  158,  160,  162,  164,  178,  181,  184,  187,  190,  193,  196,  199,
	  202,  205,  208,  211,  214,  217,  220,  223,  240,  242,  244,  246,
	  248,  250,  252,  254,  256,  258,  260,  262,  264,  266,  268,  270,
	  277,  280,  283,  286,  289,  292,  295,  298,  301,  304,  307,  310,
	  313,  315,  317,  319,  321,  323,  325,  327,  329,  331,  333,  335,
	  337,  339,  353,  356,  359,  362,  365,  368,  371,  374,  377,  380,
	  383,  386,  389,  392,  395,  398,  402,  405,  408,  411,  414,  417,
	  420,  423,  426,  429,  432,  435,  438,  441,  444,  447,  450,  453,
	  457,  460,  463,  466,  469,  472,  475,  478,  481,  484,  487,  491,
	  494,  497,  500,  504,  507,  510,  513,  516,  519,  522,  525,  528,
	  531,  534,  537,  540,  543,  546,  549,  552,  555,  558,  562,  566,
	  569,  572,  575,  578,  581,  584,  587,  590,  593,  596,  599,  601,
	  603,  605,  608,  610,  612,  614,  616,  618,  620,  622,  624,  626,
	  628,  630,  632,  634,  636,  650,  653,  656,  659,  662,  665,  668,
	  671,  674,  677,  680,  683,  686,  689,  692,  695,  698,  701,  704,
	  707,  710,  713,  716,  720,  723,  726,  729,  732,  735,  738,  741,
	  744,  747,  750,  753,  756,  759,  762,  765,  768,  771,  775,  779,
	  782,  785,  788,  791,  794,  797,  800,  803,  806,  809,  812,  815,
	  818,  821,  824,  827,  830,  833,  836,  839,  841,  843,  845,  847,
	  849,  851,  853,  855,  857,  859,  861,  863,  865,  867,  869,  871,
	  873,  876,  879,  881,  883,  885,  887,  889,  891,  893,  895,  897,
	  899,  901,  903,  905,  907,  909,  911,  913,  915,  917,  919,  921,
	  932,  935,  938,  941,  944,  947,  950,  953,  956,  959,  962,  965,
	  968,  971,  974,  977,  980,  983,  986,  989,  992,  995,  998, 1001,
	 1004, 1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037,
	 1040, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074,
	 1077, 1080, 1083, 1086, 1090, 1093, 1096, 1099, 1102, 1105, 1108, 1111,
	 1114, 1117, 1120, 1123, 1126, 1129, 1132, 1136, 1139, 1142, 1145, 1148,
	 1151, 1154, 1156, 1158, 1160, 1162, 1166, 1172, 1176, 1179, 1185, 1202,
	 1205, 1208, 1211, 1214, 1217, 1220, 1223, 1227, 1230, 1233, 1236, 1239,
	 1242, 1245, 1248, 1251, 1254, 1257, 1260, 1264, 1267, 1270, 1273, 1277,
	 1280, 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310, 1313,
	 1316, 1319, 1322, 1325, 1328, 1331, 1335, 1339, 1342, 1345, 1348, 1351,
	 1354, 1357, 1360, 1363, 1366, 1369, 1371, 1373, 1375, 1377
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,    2,    0,   17,    0,    2,    0,    3,    2,
	    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
	   16,    2,    0,   18,    0,   19,    0,   21,   22,   20,   24,   25,
	   23,   28,   27,   29,   27,   26,   32,   31,   33,   31,   30,   32,
	   31,   34,   31,   30,   32,   31,   35,   31,   30,   37,   36,   36,
	    0,    3,   38,   38,    0,   40,   41,   39,    3,    0,   42,    0,
	   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   56,    0,   58,   59,   57,   61,   62,   60,    0,    0,
	    0,    0,   63,   64,   65,   64,   64,   67,   66,   63,    3,   68,
	    8,   68,    0,   69,   70,    0,   71,    0,   72,    0,   73,    0,
	   74,    0,   75,    0,   76,    0,   77,    0,   78,    0,   79,    0,
	   80,    0,   81,    0,   83,   82,   85,   84,   85,   86,   87,   88,
	   89,   87,   90,   91,   92,   93,   94,   95,   86,   84,   85,   96,
	   84,   85,   97,   84,   85,   98,   84,   85,   99,   84,   85,  100,
	   84,   85,  101,   84,   85,  102,   84,   85,  103,   84,   85,  104,
	   84,   85,  105,   84,   85,  106,   84,   85,  107,   84,   85,  108,
	   84,   85,  109,   84,   85,  110,   84,  112,  111,  113,  114,  115,
	  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  111,    0,
	  126,    0,  127,    0,  128,    0,  129,    0,  130,    0,  131,    0,
	  132,    0,  133,    0,  134,    0,  135,    0,  136,    0,  137,    0,
	  138,    0,  140,  139,  142,  141,  142,  143,  144,  145,  144,  143,
	  141,  146,  142,  141,  147,  142,  141,  142,  148,  141,  142,  149,
	  141,  142,  150,  141,  142,  151,  141,  152,  142,  141,  153,  142,
	  141,  142,  154,  141,  142,  155,  141,  142,  156,  141,  157,  158,
	    0,  159,    0,  160,    0,  161,    0,  162,    0,  163,    0,  164,
	    0,  165,    0,  166,    0,  167,    0,  168,    0,  169,    0,  171,
	  170,  173,  172,  173,  174,  175,  176,  177,  175,  178,  179,  180,
	  181,  182,  183,  174,  172,  173,  184,  172,  173,  185,  172,  173,
	  186,  172,  173,  187,  172,  173,  188,  172,  173,  189,  172,  173,
	  190,  172,  173,  191,  172,  173,  192,  172,  173,  193,  172,  173,
	  194,  172,  173,  195,  172,  173,  196,  172,  173,  197,  172,  173,
	  198,  172,  199,  173,  200,  172,  201,  173,  172,  202,  173,  172,
	  173,  203,  172,  173,  204,  172,  173,  205,  172,  206,  173,  172,
	  207,  173,  172,  208,  173,  172,  173,  209,  172,  173,  210,  172,
	  173,  198,  172,  211,  173,  172,  212,  173,  172,  213,  173,  172,
	  173,  214,  172,  173,  215,  172,  173,  214,  172,  216,  173,  217,
	  172,  218,  173,  172,  219,  173,  172,  173,  220,  172,  173,  221,
	  172,  173,  222,  172,  173,  223,  172,  224,  173,  172,  225,  173,
	  172,  226,  173,  172,  173,  210,  172,  173,  214,  227,  172,  173,
	  228,  172,  173,  229,  172,  173,  230,  172,  173,  231,  232,  172,
	  216,  173,  172,  233,  173,  172,  234,  173,  172,  173,  235,  172,
	  173,  236,  172,  173,  237,  172,  173,  238,  172,  173,  239,  172,
	  240,  173,  172,  241,  173,  172,  242,  173,  172,  173,  243,  172,
	  173,  210,  172,  173,  244,  172,  245,  173,  172,  246,  173,  172,
	  173,  247,  172,  173,  214,  172,  248,  173,  249,  172,  234,  250,
	  173,  172,  173,  251,  172,  173,  252,  172,  173,  253,  172,  173,
	  254,  172,  255,  173,  172,  242,  173,  172,  256,  173,  172,  214,
	  173,  172,  257,  173,  172,  214,  173,  172,  127,  258,    0,  259,
	    0,  260,    0,  261,    0,  262,  263,    0,  264,    0,  265,    0,
	  266,    0,  267,    0,  268,    0,  269,    0,  270,    0,  271,    0,
	  272,    0,  273,    0,  274,    0,  275,    0,  277,  276,  279,  278,
	  279,  280,  281,  282,  283,  281,  284,  285,  286,  287,  288,  289,
	  280,  278,  279,  290,  278,  279,  291,  278,  279,  292,  278,  279,
	  293,  278,  279,  294,  278,  279,  295,  278,  279,  296,  278,  279,
	  297,  278,  279,  298,  278,  279,  299,  278,  279,  300,  278,  279,
	  301,  278,  279,  302,  278,  279,  303,  278,  279,  304,  278,  279,
	  305,  278,  306,  279,  278,  307,  279,  278,  308,  279,  278,  279,
	  309,  278,  279,  310,  278,  279,  309,  278,  311,  279,  312,  278,
	  313,  279,  278,  314,  279,  278,  279,  315,  278,  279,  316,  278,
	  279,  317,  278,  279,  318,  278,  319,  279,  278,  320,  279,  278,
	  321,  279,  278,  279,  322,  278,  279,  304,  278,  279,  309,  278,
	  279,  323,  278,  324,  279,  278,  325,  279,  278,  279,  326,  278,
	  279,  309,  278,  327,  279,  328,  278,  329,  330,  279,  278,  279,
	  331,  278,  279,  332,  278,  279,  333,  278,  279,  334,  278,  279,
	  335,  278,  336,  279,  278,  337,  279,  278,  338,  279,  278,  279,
	  339,  278,  279,  322,  278,  279,  340,  278,  279,  341,  278,  279,
	  342,  278,  279,  343,  278,  344,  279,  278,  338,  279,  278,  345,
	  279,  278,  309,  279,  278,  346,  279,  278,  309,  279,  278,  347,
	    0,  348,    0,  349,    0,  350,    0,  351,    0,  352,    0,  353,
	    0,  354,    0,  355,    0,  356,    0,  357,    0,  274,    0,  358,
	    0,  359,    0,  360,    0,  361,    0,  127,    0,  362,  363,    0,
	  364,  365,    0,  366,    0,  367,    0,  368,    0,  369,    0,  370,
	    0,  371,    0,  372,    0,  373,    0,  374,    0,  168,    0,  375,
	    0,  376,    0,  377,    0,  378,    0,  379,    0,  380,    0,  381,
	    0,  382,    0,  383,    0,  385,  384,  387,  386,  387,  388,  389,
	  390,  389,  391,  392,  393,  394,  388,  386,  387,  395,  386,  387,
	  396,  386,  387,  397,  386,  387,  398,  386,  387,  399,  386,  387,
	  400,  386,  387,  401,  386,  387,  402,  386,  387,  403,  386,  387,
	  404,  386,  387,  405,  386,  387,  406,  386,  387,  407,  386,  387,
	  408,  386,  409,  387,  386,  410,  387,  386,  411,  387,  386,  387,
	  412,  386,  387,  413,  386,  387,  414,  386,  415,  387,  386,  416,
	  387,  386,  417,  387,  386,  387,  418,  386,  387,  419,  386,  387,
	  420,  386,  421,  387,  386,  422,  387,  386,  423,  387,  386,  387,
	  424,  386,  387,  425,  386,  387,  426,  386,  427,  387,  386,  428,
	  387,  386,  429,  387,  386,  387,  419,  386,  430,  387,  431,  386,
	  432,  387,  386,  433,  387,  386,  387,  434,  386,  387,  435,  386,
	  387,  436,  386,  387,  437,  386,  438,  387,  386,  439,  387,  386,
	  440,  387,  386,  387,  419,  386,  387,  441,  386,  387,  442,  386,
	  387,  443,  386,  387,  444,  386,  387,  445,  446,  386,  430,  387,
	  386,  447,  387,  386,  448,  387,  386,  387,  449,  386,  387,  450,
	  386,  387,  451,  386,  387,  452,  386,  387,  453,  386,  454,  387,
	  386,  455,  387,  386,  456,  387,  386,  387,  457,  386,  387,  419,
	  386,  458,  387,  386,  448,  459,  387,  386,  387,  460,  386,  387,
	  461,  386,  387,  462,  386,  387,  463,  386,  464,  387,  386,  456,
	  387,  386,  465,    0,  127,    0,  466,    0,  127,    0,  467,  468,
	  467,    0,  471,  470,  472,  473,  470,  469,    0,  475,  476,  474,
	    0,  475,  474,  471,  477,  475,  476,  477,  474,  471,  478,  479,
	  480,  481,  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,
	  478,    0,   85,  492,   84,  493,   85,   84,  494,   85,   84,  495,
	   85,   84,   85,  496,   84,   85,  497,   84,   85,  496,   84,  498,
	   85,  499,   84,  500,   85,   84,  501,   85,   84,   85,  502,   84,
	   85,  503,   84,   85,  504,   84,   85,  505,   84,  506,   85,   84,
	  507,   85,   84,  508,   85,   84,   85,  509,   84,   85,  110,   84,
	   85,  496,  510,   84,   85,  511,   84,   85,  512,   84,   85,  513,
	   84,   85,  514,  515,   84,  498,   85,   84,  516,   85,   84,  517,
	   85,   84,   85,  518,   84,   85,  519,   84,   85,  520,   84,   85,
	  521,   84,   85,  522,   84,  523,   85,   84,  524,   85,   84,  525,
	   85,   84,   85,  526,   84,   85,  509,   84,   85,  527,   84,  528,
	   85,   84,  529,   85,   84,   85,  530,   84,   85,  496,   84,  531,
	   85,  532,   84,  517,  533,   85,   84,   85,  534,   84,   85,  535,
	   84,   85,  536,   84,   85,  537,   84,  538,   85,   84,  525,   85,
	   84,  539,   85,   84,  496,   85,   84,  540,   85,   84,  496,   85,
	   84,  541,    0,  542,    0,  543,    0,  127,    0,  544,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   68,   70,
	   95,  283,  288,  387,  389,    3,    6,    7,    8,    9,    8,    8,
	    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,   13,
	   14,    4,   14,   15,    4,   16,   18,   19,   20,   21,   22,   23,
	   24,   25,   26,   27,   28,   29,   30,  453,   32,   33,    4,   16,
	   33,    4,   16,   35,   36,    4,   35,   34,   36,   38,  449,   39,
	   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
	   50,   51,   51,    4,   52,   66,  395,  400,  402,  432,  437,  447,
	   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
	   65,    4,   67,    4,    4,    5,   15,   17,   31,   34,   37,   68,
	   70,   95,  283,  288,  387,  389,   69,   31,   71,   72,   73,   74,
	   75,   76,   77,   78,   79,   80,   81,   82,   83,   82,   83,   83,
	    4,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
	   67,   96,  189,   97,   98,   99,  100,  101,  102,  103,  104,  105,
	  106,  107,  108,  109,  108,  109,  109,    4,  110,  124,  125,  141,
	  143,  172,  177,  187,  111,  112,  113,  114,  115,  116,  117,  118,
	  119,  120,  121,  122,  123,    4,   67,  126,  137,  127,  128,  129,
	  130,  131,  132,  133,  134,  135,  136,  138,  139,  140,  124,  142,
	  144,  154,  145,  146,  147,  148,  149,  150,  151,  152,  153,  155,
	  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
	  168,  169,  170,  171,  173,  174,  175,  176,  178,  185,  179,  180,
	  181,  182,  183,  184,  186,  188,  190,  191,  192,  193,  194,  271,
	  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
	  207,  208,  207,  208,  208,    4,  209,  223,  224,  229,  231,  244,
	  249,  269,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
	  220,  221,  222,    4,   67,  225,  226,  227,  228,  223,  230,  232,
	  243,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  245,
	  246,  247,  248,  250,  267,  251,  261,  252,  253,  254,  255,  256,
	  257,  258,  259,  260,  262,  263,  264,  265,  266,  268,  270,  272,
	  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  284,  285,
	  286,  287,  289,  385,  290,  300,  291,  292,  293,  294,  295,  296,
	  297,  298,  299,  301,  302,  303,  304,  305,  306,  307,  308,  309,
	  310,  311,  310,  311,  311,    4,  312,  326,  338,  348,  377,  313,
	  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
	    4,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
	   67,  339,  340,  341,  342,  343,  344,  345,  346,  347,  349,  359,
	  350,  351,  352,  353,  354,  355,  356,  357,  358,  360,  361,  362,
	  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
	  375,  376,  378,  379,  380,  381,  382,  383,  384,  386,  388,  389,
	  390,  391,  393,  394,  392,  390,  391,  392,  390,  393,  394,    5,
	   15,   17,   31,   34,   37,   68,   70,   95,  283,  288,  387,  389,
	  396,  397,  398,  399,   66,  401,  403,  414,  404,  405,  406,  407,
	  408,  409,  410,  411,  412,  413,  415,  416,  417,  418,  419,  420,
	  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  433,
	  434,  435,  436,  438,  445,  439,  440,  441,  442,  443,  444,  446,
	  448,  450,  451,  452,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,    0,
	  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,    0,
	   11,  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,  126,
	    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,    0,   72,   33,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   15,   15,   31,  130,   60,   57,   31,   63,   57,   63,   63,
	   63,   63,   63,   63,   63,   66,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,
	   81,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   75,   33,   84,   84,   84,
	   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   78,   33,   84,   84,   84,   84,   84,
	   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   19,   19,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   37,   37,   54,   37,   87,    0,    0,   39,    0,    0,   93,
	   90,   41,   96,   90,   96,   96,   96,   96,   96,   96,   96,   99,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 453;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 639 "java/src/main/java/gherkin/lexer/Vi.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
    
// line 646 "java/src/main/java/gherkin/lexer/Vi.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 907 "java/src/main/java/gherkin/lexer/Vi.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 939 "java/src/main/java/gherkin/lexer/Vi.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/vi.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

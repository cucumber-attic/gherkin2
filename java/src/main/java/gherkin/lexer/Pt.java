
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Pt implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"


  private final Listener listener;

  public Pt(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Pt.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   17,   18,   19,   35,   36,   37,   39,   41,   46,   51,
	   56,   61,   65,   69,   71,   72,   73,   74,   75,   76,   77,   78,
	   79,   80,   81,   82,   83,   84,   85,   86,   87,   89,   91,   96,
	  103,  108,  111,  112,  113,  114,  115,  116,  117,  119,  120,  121,
	  122,  123,  124,  125,  126,  127,  128,  139,  141,  143,  145,  147,
	  149,  151,  153,  155,  157,  159,  161,  163,  165,  167,  171,  173,
	  175,  177,  179,  181,  183,  186,  188,  190,  192,  194,  196,  198,
	  200,  216,  218,  219,  221,  223,  224,  225,  226,  227,  228,  230,
	  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
	  243,  244,  245,  246,  247,  248,  249,  263,  265,  267,  269,  271,
	  273,  275,  277,  279,  281,  283,  285,  287,  289,  291,  293,  296,
	  298,  300,  302,  304,  306,  308,  311,  313,  315,  317,  319,  321,
	  323,  325,  327,  330,  332,  334,  336,  338,  340,  342,  345,  348,
	  351,  353,  356,  358,  360,  362,  364,  366,  368,  370,  372,  374,
	  376,  378,  380,  382,  384,  386,  388,  390,  392,  394,  396,  398,
	  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  412,  413,
	  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
	  427,  428,  429,  431,  432,  433,  434,  435,  436,  437,  438,  439,
	  440,  448,  450,  452,  454,  456,  458,  460,  462,  465,  467,  469,
	  471,  473,  475,  477,  479,  481,  483,  485,  487,  489,  491,  493,
	  495,  497,  499,  501,  503,  505,  506,  507,  509,  510,  511,  512,
	  513,  514,  515,  516,  517,  518,  519,  520,  521,  522,  523,  537,
	  539,  541,  543,  545,  547,  549,  551,  553,  555,  557,  559,  561,
	  563,  565,  567,  570,  572,  574,  576,  578,  580,  582,  585,  587,
	  589,  591,  593,  595,  597,  599,  601,  604,  606,  608,  610,  612,
	  615,  617,  620,  623,  625,  627,  629,  631,  633,  636,  638,  640,
	  642,  644,  646,  648,  650,  652,  654,  656,  658,  660,  662,  664,
	  666,  668,  670,  672,  674,  676,  678,  680,  684,  686,  689,  691,
	  693,  695,  697,  699,  701,  703,  705,  707,  709,  711,  713,  715,
	  717,  719,  721,  723,  725,  727,  729,  731,  733,  735,  737,  739,
	  741,  743,  745,  747,  749,  751,  753,  754,  755,  756,  757,  758,
	  759,  763,  769,  772,  774,  780,  796,  798,  801,  803,  805,  807,
	  809,  813,  815,  817,  819,  821,  823,  825,  827,  829,  831,  833,
	  835,  837,  839,  841,  843,  845,  847,  849,  851,  854,  856,  858,
	  860,  862,  864,  866,  868,  870,  872,  874,  876,  878,  880,  882,
	  884,  886,  888,  890,  892,  894,  896,  898,  900,  902,  904,  907,
	  909,  911,  913,  915,  917,  919,  921,  923,  925,  927,  929,  931,
	  934,  936,  938,  940,  942,  944,  946,  948,  950,  953,  955,  957,
	  959,  961,  963,  965,  967,  969,  971,  973,  974,  976,  977,  978,
	  979,  980,  983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
	 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028,
	 1030, 1032, 1034, 1036, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1055,
	 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1074, 1076, 1078, 1080,
	 1082, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105,
	 1107, 1109, 1111, 1114, 1116, 1119, 1122, 1124, 1126, 1128, 1130, 1132,
	 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157,
	 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181,
	 1183, 1185, 1189, 1191, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208,
	 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1225, 1227, 1229, 1232, 1234,
	 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258,
	 1260, 1262, 1264, 1265, 1266, 1267, 1268, 1269
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   67,   68,   69,   70,
	   77,   81,  124,    9,   13,  -69,  -65,   10,   32,   34,   35,   37,
	   42,   64,   67,   68,   69,   70,   77,   81,  124,    9,   13,   34,
	   34,   10,   13,   10,   13,   10,   32,   34,    9,   13,   10,   32,
	   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,
	   13,   10,   32,    9,   13,   10,   32,    9,   13,   10,   13,   10,
	   95,   70,   69,   65,   84,   85,   82,   69,   95,   69,   78,   68,
	   95,   37,   32,   10,   13,   10,   13,   13,   32,   64,    9,   10,
	    9,   10,   13,   32,   64,   11,   12,   10,   32,   64,    9,   13,
	   97,  101,  111,  114,   97,   99,  116,  101,  114,  -61,  105,  -83,
	  115,  116,  105,   99,   97,   58,   10,   10,   10,   32,   35,   37,
	   64,   67,   68,   69,   70,    9,   13,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   97,  101,  111,   10,  114,   10,   97,   10,   99,   10,  116,   10,
	  101,   10,  114,  -61,   10,  105,  -83,   10,   10,  115,   10,  116,
	   10,  105,   10,   99,   10,   97,   10,   58,   10,   32,   34,   35,
	   37,   42,   64,   67,   68,   69,   70,   77,   81,  124,    9,   13,
	   97,  101,  100,   97,  111,   32,  115,  108,  105,  110,  101,   97,
	  -61,   99,  -89,  -61,  -93,  111,   32,  100,  111,   32,   67,  101,
	  110,  -61,  -95,  114,  105,  111,   58,   10,   10,   10,   32,   35,
	   37,   42,   64,   67,   68,   69,   70,   77,   81,    9,   13,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,   10,   32,   10,   97,  101,   10,  114,   10,   97,
	   10,   99,   10,  116,   10,  101,   10,  114,  -61,   10,  105,  -83,
	   10,   10,  115,   10,  116,   10,  105,   10,   99,   10,   97,   10,
	   58,   10,  110,  -61,   10,   97,  -95,   10,   10,  114,   10,  105,
	   10,  111,   10,   97,   10,  100,   10,   97,  111,   10,   32,  115,
	   10,   32,  110,   10,  116,  -61,   10,   97,  -93,   10,   10,  111,
	   10,  117,   10,  110,   10,   99,   10,  105,   10,  111,   10,  110,
	   10,   97,   10,  108,   10,  105,   10,  100,   10,   97,   10,  100,
	   10,  101,   10,   97,   10,  115,   10,  117,   10,   97,   10,  110,
	   10,  100,   97,  111,   32,  100,  111,   32,   67,  101,  110,   97,
	   32,  110,  115,  120,  116,  -61,   97,  -93,  111,  113,  117,  101,
	  109,   97,   32,  100,  111,   32,   67,  101,  110,  -61,   97,  101,
	  109,  112,  108,  111,  115,   58,   10,   10,   10,   32,   35,   67,
	   70,  124,    9,   13,   10,   97,   10,  114,   10,   97,   10,   99,
	   10,  116,   10,  101,   10,  114,  -61,   10,  105,  -83,   10,   10,
	  115,   10,  116,   10,  105,   10,   99,   10,   97,   10,   58,   10,
	  117,   10,  110,   10,   99,   10,  105,   10,  111,   10,  110,   10,
	   97,   10,  108,   10,  105,   10,  100,   10,   97,   10,  100,   10,
	  101,  117,  110,   99,  100,  105,  111,  110,   97,  108,  105,  100,
	   97,  100,  101,  111,   58,   10,   10,   10,   32,   35,   37,   42,
	   64,   67,   68,   69,   70,   77,   81,    9,   13,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37,   10,   32,   10,   97,  101,   10,  114,   10,   97,   10,   99,
	   10,  116,   10,  101,   10,  114,  -61,   10,  105,  -83,   10,   10,
	  115,   10,  116,   10,  105,   10,   99,   10,   97,   10,   58,   10,
	  110,  -61,   10,   97,  -95,   10,   10,  114,   10,  105,   10,  111,
	   10,   97,  101,   10,  100,   10,   97,  111,   10,   32,  115,   10,
	  108,   10,  105,   10,  110,   10,  101,   10,   97,  -61,   10,   99,
	  -89,   10,  -61,   10,  -93,   10,   10,  111,   10,   32,   10,  100,
	   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,  -61,   10,
	   10,   97,   10,  111,   10,   32,   10,  100,   10,  111,   10,   32,
	   10,   67,   10,  101,   10,  110,   10,   97,   10,   32,  110,  115,
	   10,  116,  -61,   10,   97,  -93,   10,   10,  111,   10,  113,   10,
	  117,   10,  101,   10,  109,   10,   97,   10,   32,   10,  100,   10,
	  111,   10,   32,   10,   67,   10,  101,   10,  117,   10,  110,   10,
	   99,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,   10,
	  105,   10,  100,   10,   97,   10,  100,   10,  101,   10,   97,   10,
	  115,   10,  117,   10,   97,   10,  110,   10,  100,   97,  115,  117,
	   97,  110,  100,   32,  124,    9,   13,   10,   32,   92,  124,    9,
	   13,   10,   92,  124,   10,   92,   10,   32,   92,  124,    9,   13,
	   10,   32,   34,   35,   37,   42,   64,   67,   68,   69,   70,   77,
	   81,  124,    9,   13,   10,  110,  -61,   10,   97,  -95,   10,   10,
	  114,   10,  105,   10,  111,   10,   32,   58,  115,   10,  100,   10,
	  101,   10,   32,   10,   70,   10,  117,   10,  110,   10,  100,   10,
	  111,   10,  110,   10,  116,   10,  101,   10,  120,   10,  116,   10,
	  101,   10,  108,   10,  105,   10,  110,   10,  101,   10,   97,  -61,
	   10,   99,  -89,   10,  -61,   10,  -93,   10,   10,  111,   10,   32,
	   10,  100,   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,
	  -61,   10,  -95,   10,   10,  114,   10,  105,   10,   97,   10,  111,
	   10,   32,   10,  100,   10,  111,   10,   32,   10,   67,   10,  101,
	   10,  110,   10,   97,   10,  115,  120,   10,  113,   10,  117,   10,
	  101,   10,  109,   10,   97,   10,   32,   10,  100,   10,  111,   10,
	   32,   10,   67,   10,  101,   10,  110,  -61,   10,   97,   10,  101,
	   10,  109,   10,  112,   10,  108,   10,  111,   10,  115,   10,  117,
	   10,  110,   10,   99,  100,   10,  105,   10,  111,   10,  110,   10,
	   97,   10,  108,   10,  105,   10,  100,   10,   97,   10,  100,   10,
	  101,  110,  -61,   97,  -95,  114,  105,  111,   32,   58,  115,  100,
	  101,   32,   70,  117,  110,  100,   10,   10,   10,   32,   35,   37,
	   42,   64,   67,   68,   69,   70,   77,   81,    9,   13,   10,   95,
	   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,
	   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,
	   10,   37,   10,   32,   10,   97,  101,  111,   10,  114,   10,   97,
	   10,   99,   10,  116,   10,  101,   10,  114,  -61,   10,  105,  -83,
	   10,   10,  115,   10,  116,   10,  105,   10,   99,   10,   97,   10,
	   58,   10,  110,  -61,   10,   97,  -95,   10,   10,  114,   10,  105,
	   10,  111,   10,   32,   58,   10,  100,   10,  101,   10,   32,   10,
	   70,   10,  117,   10,  110,   10,  100,   10,  111,   10,  110,   10,
	  116,   10,  101,   10,  120,   10,  116,   10,   97,  101,   10,  100,
	   10,   97,  111,   10,   32,  115,   10,  108,   10,  105,   10,  110,
	   10,  101,   10,   97,  -61,   10,   99,  -89,   10,  -61,   10,  -93,
	   10,   10,  111,   10,   32,   10,  100,   10,  111,   10,   32,   10,
	   67,   10,  101,   10,  110,  -61,   10,  -95,   10,   10,  114,   10,
	  105,   10,   97,   10,  111,   10,   32,   10,  100,   10,  111,   10,
	   32,   10,   67,   10,  101,   10,  110,   10,   97,   10,   32,  110,
	  115,   10,  116,  -61,   10,   97,  -93,   10,   10,  111,   10,  113,
	   10,  117,   10,  101,   10,  109,   10,   97,   10,   32,   10,  100,
	   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,  -61,   10,
	   97,   10,  117,   10,  110,   10,   99,  100,   10,  105,   10,  111,
	   10,  110,   10,   97,   10,  108,   10,  105,   10,  100,   10,   97,
	   10,  100,   10,  101,   10,   97,   10,  115,   10,  117,   10,   97,
	   10,  110,   10,  100,  110,  116,  101,  120,  116,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   15,    1,    1,   14,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    3,    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    9,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	   14,    2,    1,    2,    2,    1,    1,    1,    1,    1,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,   12,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    3,    3,
	    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,    1,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    6,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   12,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    3,
	    2,    3,    3,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    4,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    2,    4,    3,    2,    4,   14,    2,    3,    2,    2,    2,    2,
	    4,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    2,    1,    1,    1,
	    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    4,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    3,    3,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    4,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   17,   19,   21,   37,   39,   41,   44,   47,   52,   57,
	   62,   67,   71,   75,   78,   80,   82,   84,   86,   88,   90,   92,
	   94,   96,   98,  100,  102,  104,  106,  108,  110,  113,  116,  121,
	  128,  133,  137,  139,  141,  143,  145,  147,  149,  152,  154,  156,
	  158,  160,  162,  164,  166,  168,  170,  181,  184,  187,  190,  193,
	  196,  199,  202,  205,  208,  211,  214,  217,  220,  223,  228,  231,
	  234,  237,  240,  243,  246,  250,  253,  256,  259,  262,  265,  268,
	  271,  287,  290,  292,  295,  298,  300,  302,  304,  306,  308,  311,
	  313,  315,  317,  319,  321,  323,  325,  327,  329,  331,  333,  335,
	  337,  339,  341,  343,  345,  347,  349,  363,  366,  369,  372,  375,
	  378,  381,  384,  387,  390,  393,  396,  399,  402,  405,  408,  412,
	  415,  418,  421,  424,  427,  430,  434,  437,  440,  443,  446,  449,
	  452,  455,  458,  462,  465,  468,  471,  474,  477,  480,  484,  488,
	  492,  495,  499,  502,  505,  508,  511,  514,  517,  520,  523,  526,
	  529,  532,  535,  538,  541,  544,  547,  550,  553,  556,  559,  562,
	  564,  566,  568,  570,  572,  574,  576,  578,  580,  582,  587,  589,
	  592,  594,  596,  598,  600,  602,  604,  606,  608,  610,  612,  614,
	  616,  618,  620,  623,  625,  627,  629,  631,  633,  635,  637,  639,
	  641,  649,  652,  655,  658,  661,  664,  667,  670,  674,  677,  680,
	  683,  686,  689,  692,  695,  698,  701,  704,  707,  710,  713,  716,
	  719,  722,  725,  728,  731,  734,  736,  738,  741,  743,  745,  747,
	  749,  751,  753,  755,  757,  759,  761,  763,  765,  767,  769,  783,
	  786,  789,  792,  795,  798,  801,  804,  807,  810,  813,  816,  819,
	  822,  825,  828,  832,  835,  838,  841,  844,  847,  850,  854,  857,
	  860,  863,  866,  869,  872,  875,  878,  882,  885,  888,  891,  894,
	  898,  901,  905,  909,  912,  915,  918,  921,  924,  928,  931,  934,
	  937,  940,  943,  946,  949,  952,  955,  958,  961,  964,  967,  970,
	  973,  976,  979,  982,  985,  988,  991,  994,  999, 1002, 1006, 1009,
	 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045,
	 1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081,
	 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1104, 1106, 1108, 1110, 1112,
	 1114, 1118, 1124, 1128, 1131, 1137, 1153, 1156, 1160, 1163, 1166, 1169,
	 1172, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207,
	 1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 1234, 1238, 1241, 1244,
	 1247, 1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 1277, 1280,
	 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310, 1313, 1317,
	 1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350, 1353,
	 1357, 1360, 1363, 1366, 1369, 1372, 1375, 1378, 1381, 1385, 1388, 1391,
	 1394, 1397, 1400, 1403, 1406, 1409, 1412, 1415, 1417, 1420, 1422, 1424,
	 1426, 1428, 1432, 1434, 1436, 1438, 1440, 1442, 1444, 1446, 1448, 1450,
	 1464, 1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 1494, 1497,
	 1500, 1503, 1506, 1509, 1514, 1517, 1520, 1523, 1526, 1529, 1532, 1536,
	 1539, 1542, 1545, 1548, 1551, 1554, 1557, 1560, 1564, 1567, 1570, 1573,
	 1576, 1580, 1583, 1586, 1589, 1592, 1595, 1598, 1601, 1604, 1607, 1610,
	 1613, 1616, 1619, 1623, 1626, 1630, 1634, 1637, 1640, 1643, 1646, 1649,
	 1653, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 1683, 1686,
	 1689, 1692, 1695, 1698, 1701, 1704, 1707, 1710, 1713, 1716, 1719, 1722,
	 1725, 1728, 1733, 1736, 1740, 1743, 1746, 1749, 1752, 1755, 1758, 1761,
	 1764, 1767, 1770, 1773, 1776, 1779, 1782, 1786, 1789, 1792, 1796, 1799,
	 1802, 1805, 1808, 1811, 1814, 1817, 1820, 1823, 1826, 1829, 1832, 1835,
	 1838, 1841, 1844, 1846, 1848, 1850, 1852, 1854
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,    2,    0,   16,    0,    2,    0,    3,    2,    4,
	    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,    2,
	    0,   17,    0,   18,    0,   20,   21,   19,   23,   24,   22,   27,
	   26,   28,   26,   25,   31,   30,   32,   30,   29,   31,   30,   33,
	   30,   29,   31,   30,   34,   30,   29,   36,   35,   35,    0,    3,
	   37,   37,    0,   39,   40,   38,    3,    0,   41,    0,   42,    0,
	   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   57,   58,   56,   60,   61,   59,    0,    0,    0,    0,
	   62,   63,   64,   63,   63,   66,   65,   62,    3,   67,    8,   67,
	    0,   68,   69,   70,    0,   71,    0,   72,    0,   73,    0,   74,
	    0,   75,    0,   76,    0,   77,   78,    0,   78,    0,   79,    0,
	   80,    0,   81,    0,   82,    0,   83,    0,   84,    0,   86,   85,
	   88,   87,   88,   89,   90,   91,   90,   92,   93,   94,   95,   89,
	   87,   88,   96,   87,   88,   97,   87,   88,   98,   87,   88,   99,
	   87,   88,  100,   87,   88,  101,   87,   88,  102,   87,   88,  103,
	   87,   88,  104,   87,   88,  105,   87,   88,  106,   87,   88,  107,
	   87,   88,  108,   87,   88,  109,   87,   88,  110,  111,  112,   87,
	   88,  113,   87,   88,  114,   87,   88,  115,   87,   88,  116,   87,
	   88,  117,   87,   88,  118,   87,  119,   88,  120,   87,  120,   88,
	   87,   88,  121,   87,   88,  122,   87,   88,  123,   87,   88,  124,
	   87,   88,  125,   87,   88,  126,   87,  128,  127,  129,  130,  131,
	  132,  133,  134,  135,  136,  137,  138,  139,  140,  127,    0,  141,
	  142,    0,  143,    0,  144,  144,    0,   55,  145,    0,  146,    0,
	  147,    0,  148,    0,  149,    0,  150,    0,  151,  152,    0,  153,
	    0,  154,    0,  155,    0,  156,    0,  157,    0,  158,    0,  159,
	    0,  160,    0,  161,    0,  162,    0,  163,    0,  164,    0,  165,
	    0,  166,    0,  167,    0,  168,    0,  169,    0,  171,  170,  173,
	  172,  173,  174,  175,  176,  177,  175,  178,  179,  180,  181,  182,
	  183,  174,  172,  173,  184,  172,  173,  185,  172,  173,  186,  172,
	  173,  187,  172,  173,  188,  172,  173,  189,  172,  173,  190,  172,
	  173,  191,  172,  173,  192,  172,  173,  193,  172,  173,  194,  172,
	  173,  195,  172,  173,  196,  172,  173,  197,  172,  173,  198,  172,
	  173,  199,  200,  172,  173,  201,  172,  173,  202,  172,  173,  203,
	  172,  173,  204,  172,  173,  205,  172,  173,  206,  172,  207,  173,
	  208,  172,  208,  173,  172,  173,  209,  172,  173,  210,  172,  173,
	  211,  172,  173,  212,  172,  173,  213,  172,  173,  198,  172,  173,
	  214,  172,  215,  173,  216,  172,  216,  173,  172,  173,  217,  172,
	  173,  218,  172,  173,  213,  172,  173,  219,  172,  173,  220,  172,
	  173,  221,  221,  172,  173,  198,  222,  172,  173,  198,  223,  172,
	  173,  224,  172,  225,  173,  226,  172,  226,  173,  172,  173,  222,
	  172,  173,  227,  172,  173,  228,  172,  173,  229,  172,  173,  230,
	  172,  173,  231,  172,  173,  232,  172,  173,  233,  172,  173,  234,
	  172,  173,  235,  172,  173,  236,  172,  173,  237,  172,  173,  238,
	  172,  173,  213,  172,  173,  239,  172,  173,  222,  172,  173,  240,
	  172,  173,  241,  172,  173,  242,  172,  173,  226,  172,  243,    0,
	  244,    0,  245,    0,  246,    0,  247,    0,  248,    0,  249,    0,
	  250,    0,  251,    0,  165,    0,   55,  252,  253,  254,    0,  255,
	    0,  256,  257,    0,  257,    0,  145,    0,  258,    0,  259,    0,
	  260,    0,  261,    0,  262,    0,  263,    0,  264,    0,  265,    0,
	  266,    0,  267,    0,  268,    0,  269,    0,  164,  165,    0,  270,
	    0,  271,    0,  272,    0,  273,    0,  274,    0,  275,    0,  276,
	    0,  278,  277,  280,  279,  280,  281,  282,  283,  284,  282,  281,
	  279,  280,  285,  279,  280,  286,  279,  280,  287,  279,  280,  288,
	  279,  280,  289,  279,  280,  290,  279,  280,  291,  279,  292,  280,
	  293,  279,  293,  280,  279,  280,  294,  279,  280,  295,  279,  280,
	  296,  279,  280,  297,  279,  280,  298,  279,  280,  299,  279,  280,
	  300,  279,  280,  301,  279,  280,  302,  279,  280,  303,  279,  280,
	  304,  279,  280,  305,  279,  280,  306,  279,  280,  307,  279,  280,
	  308,  279,  280,  309,  279,  280,  310,  279,  280,  311,  279,  280,
	  298,  279,  312,    0,  313,    0,  314,  315,    0,  316,    0,  317,
	    0,  318,    0,  319,    0,  320,    0,  321,    0,  322,    0,  323,
	    0,  324,    0,   83,    0,  325,    0,  326,    0,  328,  327,  330,
	  329,  330,  331,  332,  333,  334,  332,  335,  336,  337,  338,  339,
	  340,  331,  329,  330,  341,  329,  330,  342,  329,  330,  343,  329,
	  330,  344,  329,  330,  345,  329,  330,  346,  329,  330,  347,  329,
	  330,  348,  329,  330,  349,  329,  330,  350,  329,  330,  351,  329,
	  330,  352,  329,  330,  353,  329,  330,  354,  329,  330,  355,  329,
	  330,  356,  357,  329,  330,  358,  329,  330,  359,  329,  330,  360,
	  329,  330,  361,  329,  330,  362,  329,  330,  363,  329,  364,  330,
	  365,  329,  365,  330,  329,  330,  366,  329,  330,  367,  329,  330,
	  368,  329,  330,  369,  329,  330,  370,  329,  330,  355,  329,  330,
	  371,  329,  372,  330,  373,  329,  373,  330,  329,  330,  374,  329,
	  330,  375,  329,  330,  370,  329,  330,  376,  377,  329,  330,  378,
	  329,  330,  379,  379,  329,  330,  355,  380,  329,  330,  381,  329,
	  330,  382,  329,  330,  383,  329,  330,  384,  329,  330,  385,  329,
	  386,  330,  387,  329,  388,  330,  329,  389,  330,  329,  390,  330,
	  329,  330,  391,  329,  330,  392,  329,  330,  393,  329,  330,  394,
	  329,  330,  395,  329,  330,  396,  329,  330,  397,  329,  330,  398,
	  329,  372,  330,  329,  330,  399,  329,  330,  400,  329,  330,  401,
	  329,  330,  402,  329,  330,  403,  329,  330,  404,  329,  330,  405,
	  329,  330,  406,  329,  330,  407,  329,  330,  373,  329,  330,  355,
	  408,  409,  329,  330,  410,  329,  411,  330,  412,  329,  412,  330,
	  329,  330,  380,  329,  330,  413,  329,  330,  414,  329,  330,  415,
	  329,  330,  416,  329,  330,  417,  329,  330,  418,  329,  330,  419,
	  329,  330,  420,  329,  330,  421,  329,  330,  422,  329,  330,  357,
	  329,  330,  423,  329,  330,  424,  329,  330,  425,  329,  330,  426,
	  329,  330,  427,  329,  330,  428,  329,  330,  429,  329,  330,  430,
	  329,  330,  431,  329,  330,  432,  329,  330,  433,  329,  330,  434,
	  329,  330,  370,  329,  330,  435,  329,  330,  380,  329,  330,  436,
	  329,  330,  437,  329,  330,  438,  329,  330,  412,  329,  439,    0,
	  145,    0,  440,    0,  441,    0,  442,    0,  257,    0,  443,  444,
	  443,    0,  447,  446,  448,  449,  446,  445,    0,  451,  452,  450,
	    0,  451,  450,  447,  453,  451,  452,  453,  450,  447,  454,  455,
	  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  454,
	    0,   88,  467,   87,  468,   88,  469,   87,  469,   88,   87,   88,
	  470,   87,   88,  471,   87,   88,  472,   87,   88,  473,  126,  125,
	   87,   88,  474,   87,   88,  475,   87,   88,  476,   87,   88,  477,
	   87,   88,  478,   87,   88,  479,   87,   88,  480,   87,   88,  125,
	   87,   88,  481,   87,   88,  482,   87,   88,  483,   87,   88,  484,
	   87,   88,  480,   87,   88,  485,   87,   88,  486,   87,   88,  487,
	   87,   88,  488,   87,   88,  489,   87,   88,  490,   87,  491,   88,
	  492,   87,  493,   88,   87,  494,   88,   87,  495,   88,   87,   88,
	  496,   87,   88,  497,   87,   88,  498,   87,   88,  499,   87,   88,
	  500,   87,   88,  501,   87,   88,  502,   87,   88,  503,   87,  504,
	   88,   87,  505,   88,   87,   88,  506,   87,   88,  480,   87,   88,
	  507,   87,   88,  508,   87,   88,  509,   87,   88,  510,   87,   88,
	  511,   87,   88,  512,   87,   88,  513,   87,   88,  514,   87,   88,
	  515,   87,   88,  505,   87,   88,  516,  517,   87,   88,  518,   87,
	   88,  519,   87,   88,  520,   87,   88,  521,   87,   88,  522,   87,
	   88,  523,   87,   88,  524,   87,   88,  525,   87,   88,  526,   87,
	   88,  527,   87,   88,  528,   87,   88,  529,   87,  504,   88,  505,
	   87,   88,  530,   87,   88,  531,   87,   88,  532,   87,   88,  533,
	   87,   88,  534,   87,   88,  125,   87,   88,  535,   87,   88,  536,
	   87,   88,  537,  480,   87,   88,  538,   87,   88,  539,   87,   88,
	  540,   87,   88,  541,   87,   88,  542,   87,   88,  543,   87,   88,
	  544,   87,   88,  545,   87,   88,  546,   87,   88,  125,   87,  547,
	    0,  548,  549,    0,  549,    0,  550,    0,  551,    0,  552,    0,
	  553,  554,  275,    0,  555,    0,  556,    0,  557,    0,  558,    0,
	  559,    0,  560,    0,  315,    0,  562,  561,  564,  563,  564,  565,
	  566,  567,  568,  566,  569,  570,  571,  572,  573,  574,  565,  563,
	  564,  575,  563,  564,  576,  563,  564,  577,  563,  564,  578,  563,
	  564,  579,  563,  564,  580,  563,  564,  581,  563,  564,  582,  563,
	  564,  583,  563,  564,  584,  563,  564,  585,  563,  564,  586,  563,
	  564,  587,  563,  564,  588,  563,  564,  589,  563,  564,  590,  591,
	  592,  563,  564,  593,  563,  564,  594,  563,  564,  595,  563,  564,
	  596,  563,  564,  597,  563,  564,  598,  563,  599,  564,  600,  563,
	  600,  564,  563,  564,  601,  563,  564,  602,  563,  564,  603,  563,
	  564,  604,  563,  564,  605,  563,  564,  589,  563,  564,  606,  563,
	  607,  564,  608,  563,  608,  564,  563,  564,  609,  563,  564,  610,
	  563,  564,  611,  563,  564,  612,  589,  563,  564,  613,  563,  564,
	  614,  563,  564,  615,  563,  564,  616,  563,  564,  617,  563,  564,
	  618,  563,  564,  619,  563,  564,  605,  563,  564,  620,  563,  564,
	  621,  563,  564,  622,  563,  564,  623,  563,  564,  619,  563,  564,
	  624,  625,  563,  564,  626,  563,  564,  627,  627,  563,  564,  589,
	  628,  563,  564,  629,  563,  564,  630,  563,  564,  631,  563,  564,
	  632,  563,  564,  633,  563,  634,  564,  635,  563,  636,  564,  563,
	  637,  564,  563,  638,  564,  563,  564,  639,  563,  564,  640,  563,
	  564,  641,  563,  564,  642,  563,  564,  643,  563,  564,  644,  563,
	  564,  645,  563,  564,  646,  563,  647,  564,  563,  648,  564,  563,
	  564,  649,  563,  564,  619,  563,  564,  650,  563,  564,  651,  563,
	  564,  652,  563,  564,  653,  563,  564,  654,  563,  564,  655,  563,
	  564,  656,  563,  564,  657,  563,  564,  658,  563,  564,  648,  563,
	  564,  589,  659,  660,  563,  564,  661,  563,  662,  564,  663,  563,
	  663,  564,  563,  564,  628,  563,  564,  664,  563,  564,  665,  563,
	  564,  666,  563,  564,  667,  563,  564,  668,  563,  564,  669,  563,
	  564,  670,  563,  564,  671,  563,  564,  672,  563,  564,  673,  563,
	  564,  674,  563,  564,  675,  563,  647,  564,  648,  563,  564,  676,
	  563,  564,  677,  563,  564,  678,  619,  563,  564,  679,  563,  564,
	  680,  563,  564,  681,  563,  564,  682,  563,  564,  683,  563,  564,
	  684,  563,  564,  685,  563,  564,  686,  563,  564,  687,  563,  564,
	  605,  563,  564,  688,  563,  564,  628,  563,  564,  689,  563,  564,
	  690,  563,  564,  691,  563,  564,  663,  563,  692,    0,  693,    0,
	  694,    0,  695,    0,  315,    0,  696,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   85,  189,
	  245,  366,  368,  372,    3,    6,    7,    8,    9,    8,    8,    9,
	    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,   13,   14,
	    4,   14,   15,    4,   16,   18,   19,   20,   21,   22,   23,   24,
	   25,   26,   27,   28,   29,   30,  607,   32,   33,    4,   16,   33,
	    4,   16,   35,   36,    4,   35,   34,   36,   38,  463,  602,   39,
	   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
	   52,   53,   54,   53,   54,   54,    4,   55,   69,  398,  430,  450,
	   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
	   68,    4,   70,  378,  393,   71,   72,   73,   74,   75,   76,   77,
	   78,   79,   80,   81,   82,   83,   84,    4,    4,    5,   15,   17,
	   31,   34,   37,   85,  189,  245,  366,  368,  372,   86,   89,   87,
	   88,   31,   90,   91,   92,   93,   94,   95,  179,   96,   97,   98,
	   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
	  111,  112,  113,  114,  113,  114,  114,    4,  115,  129,  130,  151,
	  155,  160,  173,  175,  116,  117,  118,  119,  120,  121,  122,  123,
	  124,  125,  126,  127,  128,    4,   84,  131,  145,  132,  133,  134,
	  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  146,  147,
	  148,  149,  150,  152,  153,  154,  129,  156,  157,  158,  159,  161,
	  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  174,
	  176,  177,  178,  180,  181,  182,  183,  184,  185,  186,  187,  188,
	  190,  194,  207,  191,  192,  193,  195,  196,  197,  198,  199,  200,
	  201,  202,  203,  204,  205,  206,  208,  209,  210,  211,  212,  213,
	  214,  215,  216,  215,  216,  216,    4,  217,  232,  218,  219,  220,
	  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,   84,
	  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
	  246,  247,  248,  258,  249,  250,  251,  252,  253,  254,  255,  256,
	  257,  259,  260,  261,  262,  261,  262,  262,    4,  263,  277,  278,
	  299,  331,  347,  360,  362,  264,  265,  266,  267,  268,  269,  270,
	  271,  272,  273,  274,  275,  276,    4,   84,  279,  293,  280,  281,
	  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  294,
	  295,  296,  297,  298,  300,  303,  301,  302,  277,  304,  305,  306,
	  307,  308,  309,  321,  310,  311,  312,  313,  314,  315,  316,  317,
	  318,  319,  320,  322,  323,  324,  325,  326,  327,  328,  329,  330,
	  332,  336,  333,  334,  335,  337,  338,  339,  340,  341,  342,  343,
	  344,  345,  346,  348,  349,  350,  351,  352,  353,  354,  355,  356,
	  357,  358,  359,  361,  363,  364,  365,  367,  369,  370,  371,  372,
	  373,  374,  376,  377,  375,  373,  374,  375,  373,  376,  377,    5,
	   15,   17,   31,   34,   37,   85,  189,  245,  366,  368,  372,  379,
	  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
	  392,  394,  395,  396,  397,  399,  400,  401,  402,  403,  404,  405,
	  420,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
	  417,  418,  419,  421,  422,  423,  424,  425,  426,  427,  428,  429,
	  431,  444,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,
	  442,  443,  445,  446,  447,  448,  449,  451,  452,  453,  454,  455,
	  456,  457,  458,  459,  460,  461,  462,  464,  465,  466,  467,  468,
	  469,  470,  477,  471,  472,  473,  474,  475,  476,  478,  479,  478,
	  479,  479,    4,  480,  494,  495,  530,  565,  583,  596,  598,  481,
	  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
	    4,   84,  496,  510,  525,  497,  498,  499,  500,  501,  502,  503,
	  504,  505,  506,  507,  508,  509,  511,  512,  513,  514,  515,  516,
	  517,  518,  519,  520,  521,  522,  523,  524,  526,  527,  528,  529,
	  531,  534,  532,  533,  494,  535,  536,  537,  538,  539,  540,  555,
	  541,  542,  543,  544,  545,  546,  547,  548,  549,  550,  551,  552,
	  553,  554,  556,  557,  558,  559,  560,  561,  562,  563,  564,  566,
	  570,  567,  568,  569,  571,  572,  573,  574,  575,  576,  577,  578,
	  579,  580,  581,  582,  584,  585,  586,  587,  588,  589,  590,  591,
	  592,  593,  594,  595,  597,  599,  600,  601,  603,  604,  605,  606,
	    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,    0,  102,
	    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,    0,   11,
	  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,  126,    0,
	  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   13,   31,  130,   60,   57,   31,
	   63,   57,   63,   63,   63,   63,   63,   63,   66,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,   84,
	   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   19,   19,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   81,   84,   84,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   72,   33,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   37,   37,   54,   37,   87,    0,    0,   39,    0,    0,   93,
	   90,   41,   96,   90,   96,   96,   96,   96,   96,   96,   99,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,    0,   75,   33,   84,   84,   84,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   17,   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 607;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 797 "java/src/main/java/gherkin/lexer/Pt.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
    
// line 804 "java/src/main/java/gherkin/lexer/Pt.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1065 "java/src/main/java/gherkin/lexer/Pt.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1097 "java/src/main/java/gherkin/lexer/Pt.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/pt.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

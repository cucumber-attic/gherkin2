
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Nl implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"


  private final Listener listener;

  public Nl(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Nl.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   19,   20,   21,   39,   40,   41,   43,   45,   50,   55,
	   60,   65,   69,   73,   75,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   93,   95,  100,
	  107,  112,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
	  125,  126,  127,  128,  129,  130,  131,  132,  133,  148,  150,  152,
	  154,  156,  158,  160,  162,  164,  166,  168,  170,  172,  174,  176,
	  178,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
	  207,  208,  209,  210,  211,  212,  213,  214,  215,  226,  228,  230,
	  232,  234,  236,  238,  240,  242,  244,  246,  248,  250,  252,  254,
	  257,  259,  261,  263,  265,  267,  269,  271,  273,  275,  277,  279,
	  281,  283,  285,  287,  289,  291,  293,  295,  297,  299,  301,  303,
	  305,  307,  309,  311,  313,  315,  317,  319,  321,  323,  325,  327,
	  329,  331,  333,  335,  337,  339,  341,  343,  345,  347,  349,  351,
	  353,  355,  356,  357,  358,  359,  360,  361,  362,  363,  365,  366,
	  367,  368,  369,  370,  371,  372,  373,  374,  389,  391,  393,  395,
	  397,  399,  401,  403,  405,  407,  409,  411,  413,  415,  417,  419,
	  423,  425,  427,  429,  431,  433,  435,  437,  439,  441,  443,  445,
	  447,  449,  451,  453,  455,  457,  459,  461,  463,  465,  467,  469,
	  471,  473,  475,  477,  479,  481,  483,  485,  487,  489,  491,  493,
	  495,  497,  499,  501,  503,  505,  507,  509,  511,  513,  515,  517,
	  519,  521,  523,  526,  528,  530,  531,  532,  533,  534,  535,  536,
	  537,  538,  539,  540,  541,  542,  543,  544,  545,  552,  554,  556,
	  558,  560,  562,  564,  566,  568,  570,  572,  574,  576,  578,  580,
	  582,  586,  592,  595,  597,  603,  621,  623,  625,  627,  629,  631,
	  633,  635,  637,  639,  641,  643,  645,  647,  649,  651,  653,  655,
	  657,  659,  661,  663,  665,  667,  669,  671,  673,  675,  678,  680,
	  682,  684,  686,  688,  690,  692,  694,  695,  696,  697,  698,  699,
	  700,  701,  702,  703,  704,  705,  706,  721,  723,  725,  727,  729,
	  731,  733,  735,  737,  739,  741,  743,  745,  747,  749,  751,  754,
	  756,  758,  760,  762,  764,  766,  768,  770,  772,  774,  776,  778,
	  780,  782,  784,  786,  788,  790,  792,  794,  796,  798,  800,  802,
	  804,  806,  808,  810,  812,  814,  816,  818,  820,  822,  824,  826,
	  828,  830,  832,  834,  836,  839,  841,  843,  844
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   68,   69,   70,
	   71,   77,   83,   86,  124,    9,   13,  -69,  -65,   10,   32,   34,
	   35,   37,   42,   64,   65,   68,   69,   70,   71,   77,   83,   86,
	  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,
	   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,
	   95,   69,   78,   68,   95,   37,   32,   10,   13,   10,   13,   13,
	   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,
	   32,   64,    9,   13,   98,   99,  108,  115,  116,  114,   97,   99,
	  116,   32,   83,   99,  101,  110,   97,  114,  105,  111,   58,   10,
	   10,   10,   32,   35,   37,   42,   64,   65,   68,   69,   70,   71,
	   77,   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,   32,
	   34,   35,   37,   42,   64,   65,   68,   69,   70,   71,   77,   83,
	   86,  124,    9,   13,   97,  110,  117,  110,   99,  116,  105,  111,
	  110,   97,  108,  105,  116,  101,  105,  116,   58,   10,   10,   10,
	   32,   35,   37,   64,   65,   70,   83,   86,    9,   13,   10,   95,
	   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,
	   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,
	   10,   37,   10,   98,   99,   10,  115,   10,  116,   10,  114,   10,
	   97,   10,   99,   10,  116,   10,   32,   10,   83,   10,   99,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,
	   58,   10,  104,   10,  116,   10,  101,   10,  114,   10,  103,   10,
	  114,   10,  111,   10,  110,   10,  100,   10,  117,   10,  110,   10,
	   99,   10,  116,   10,  105,   10,  111,   10,  110,   10,   97,   10,
	  108,   10,  105,   10,  116,   10,  101,   10,  105,   10,  116,   10,
	  111,   10,  111,   10,  114,   10,   98,   10,  101,   10,  101,   10,
	  108,   10,  100,   10,  101,   10,  110,  101,  103,  101,  118,  101,
	   97,   97,  114,   99,  116,  101,  110,   97,  114,  105,  111,   58,
	   10,   10,   10,   32,   35,   37,   42,   64,   65,   68,   69,   70,
	   71,   77,   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,
	   98,   99,  108,   10,  115,   10,  116,   10,  114,   10,   97,   10,
	   99,   10,  116,   10,   32,   10,   83,   10,   99,   10,  101,   10,
	  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   58,   10,
	  104,   10,  116,   10,  101,   10,  114,   10,  103,   10,  114,   10,
	  111,   10,  110,   10,  100,   10,  115,   10,   97,   10,  110,   10,
	  117,   10,  110,   10,   99,   10,  116,   10,  105,   10,  111,   10,
	  110,   10,   97,   10,  108,   10,  105,   10,  116,   10,  101,   10,
	  105,   10,  116,   10,  101,   10,  103,   10,  101,   10,  118,   10,
	  101,   10,   97,   10,   97,   10,  114,   10,   99,  116,   10,  101,
	   10,  108,  101,  108,  111,  111,  114,   98,  101,  101,  108,  100,
	  101,  110,   58,   10,   10,   10,   32,   35,   70,  124,    9,   13,
	   10,  117,   10,  110,   10,   99,   10,  116,   10,  105,   10,  111,
	   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,   10,  101,
	   10,  105,   10,  116,   10,   58,   32,  124,    9,   13,   10,   32,
	   92,  124,    9,   13,   10,   92,  124,   10,   92,   10,   32,   92,
	  124,    9,   13,   10,   32,   34,   35,   37,   42,   64,   65,   68,
	   69,   70,   71,   77,   83,   86,  124,    9,   13,   10,  108,   10,
	  115,   10,   97,   10,  110,   10,  117,   10,  110,   10,   99,   10,
	  116,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,   10,
	  105,   10,  116,   10,  101,   10,  105,   10,  116,   10,   58,   10,
	  101,   10,  103,   10,  101,   10,  118,   10,  101,   10,   97,   10,
	   97,   10,  114,   10,   99,  116,   10,  101,   10,  110,   10,   97,
	   10,  114,   10,  105,   10,  111,   10,  101,   10,  108,  104,  116,
	  101,  114,  103,  114,  111,  110,  100,   58,   10,   10,   10,   32,
	   35,   37,   42,   64,   65,   68,   69,   70,   71,   77,   83,    9,
	   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,   10,   32,   10,   98,  108,   10,  115,
	   10,  116,   10,  114,   10,   97,   10,   99,   10,  116,   10,   32,
	   10,   83,   10,   99,   10,  101,   10,  110,   10,   97,   10,  114,
	   10,  105,   10,  111,   10,   58,   10,  115,   10,   97,   10,  110,
	   10,  117,   10,  110,   10,   99,   10,  116,   10,  105,   10,  111,
	   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,   10,  101,
	   10,  105,   10,  116,   10,  101,   10,  103,   10,  101,   10,  118,
	   10,  101,   10,   97,   10,   97,   10,  114,   10,   99,  116,   10,
	  101,   10,  108,  115,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   17,    1,    1,   16,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	   16,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    9,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,   13,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    5,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    4,    3,    2,    4,   16,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,   13,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   19,   21,   23,   41,   43,   45,   48,   51,   56,   61,
	   66,   71,   75,   79,   82,   84,   86,   88,   90,   92,   94,   96,
	   98,  100,  102,  104,  106,  108,  110,  112,  114,  117,  120,  125,
	  132,  137,  141,  143,  145,  147,  149,  151,  153,  155,  157,  159,
	  161,  163,  165,  167,  169,  171,  173,  175,  177,  192,  195,  198,
	  201,  204,  207,  210,  213,  216,  219,  222,  225,  228,  231,  234,
	  237,  255,  257,  259,  261,  263,  265,  267,  269,  271,  273,  275,
	  277,  279,  281,  283,  285,  287,  289,  291,  293,  304,  307,  310,
	  313,  316,  319,  322,  325,  328,  331,  334,  337,  340,  343,  346,
	  350,  353,  356,  359,  362,  365,  368,  371,  374,  377,  380,  383,
	  386,  389,  392,  395,  398,  401,  404,  407,  410,  413,  416,  419,
	  422,  425,  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,
	  458,  461,  464,  467,  470,  473,  476,  479,  482,  485,  488,  491,
	  494,  497,  499,  501,  503,  505,  507,  509,  511,  513,  516,  518,
	  520,  522,  524,  526,  528,  530,  532,  534,  549,  552,  555,  558,
	  561,  564,  567,  570,  573,  576,  579,  582,  585,  588,  591,  594,
	  599,  602,  605,  608,  611,  614,  617,  620,  623,  626,  629,  632,
	  635,  638,  641,  644,  647,  650,  653,  656,  659,  662,  665,  668,
	  671,  674,  677,  680,  683,  686,  689,  692,  695,  698,  701,  704,
	  707,  710,  713,  716,  719,  722,  725,  728,  731,  734,  737,  740,
	  743,  746,  749,  753,  756,  759,  761,  763,  765,  767,  769,  771,
	  773,  775,  777,  779,  781,  783,  785,  787,  789,  796,  799,  802,
	  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,  835,  838,
	  841,  845,  851,  855,  858,  864,  882,  885,  888,  891,  894,  897,
	  900,  903,  906,  909,  912,  915,  918,  921,  924,  927,  930,  933,
	  936,  939,  942,  945,  948,  951,  954,  957,  960,  963,  967,  970,
	  973,  976,  979,  982,  985,  988,  991,  993,  995,  997,  999, 1001,
	 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1030, 1033, 1036, 1039, 1042,
	 1045, 1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1079,
	 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115,
	 1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 1142, 1145, 1148, 1151,
	 1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187,
	 1190, 1193, 1196, 1199, 1202, 1206, 1209, 1212, 1214
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,    2,    0,   18,    0,    2,    0,    3,
	    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
	   15,   16,   17,    2,    0,   19,    0,   20,    0,   22,   23,   21,
	   25,   26,   24,   29,   28,   30,   28,   27,   33,   32,   34,   32,
	   31,   33,   32,   35,   32,   31,   33,   32,   36,   32,   31,   38,
	   37,   37,    0,    3,   39,   39,    0,   41,   42,   40,    3,    0,
	   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   56,    0,   57,    0,   59,   60,   58,   62,   63,   61,
	    0,    0,    0,    0,   64,   65,   66,   65,   65,   68,   67,   64,
	    3,   69,    8,   69,    0,   70,   71,   72,    0,   73,    0,   74,
	    0,   75,    0,   76,    0,   77,    0,   78,    0,   79,    0,   80,
	    0,   81,    0,   82,    0,   83,    0,   84,    0,   85,    0,   86,
	    0,   87,    0,   88,    0,   90,   89,   92,   91,   92,   93,   94,
	   95,   96,   94,   97,   98,   99,  100,  101,  102,  103,   93,   91,
	   92,  104,   91,   92,  105,   91,   92,  106,   91,   92,  107,   91,
	   92,  108,   91,   92,  109,   91,   92,  110,   91,   92,  111,   91,
	   92,  112,   91,   92,  113,   91,   92,  114,   91,   92,  115,   91,
	   92,  116,   91,   92,  117,   91,   92,  118,   91,  120,  119,  121,
	  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
	  134,  119,    0,  135,    0,  136,    0,  137,    0,  138,    0,  139,
	    0,  140,    0,  141,    0,  142,    0,  143,    0,  144,    0,  145,
	    0,  146,    0,  147,    0,  148,    0,  149,    0,  150,    0,  151,
	    0,  153,  152,  155,  154,  155,  156,  157,  158,  157,  159,  160,
	  161,  162,  156,  154,  155,  163,  154,  155,  164,  154,  155,  165,
	  154,  155,  166,  154,  155,  167,  154,  155,  168,  154,  155,  169,
	  154,  155,  170,  154,  155,  171,  154,  155,  172,  154,  155,  173,
	  154,  155,  174,  154,  155,  175,  154,  155,  176,  154,  155,  177,
	  178,  154,  155,  179,  154,  155,  180,  154,  155,  181,  154,  155,
	  182,  154,  155,  183,  154,  155,  184,  154,  155,  185,  154,  155,
	  186,  154,  155,  187,  154,  155,  188,  154,  155,  189,  154,  155,
	  190,  154,  155,  191,  154,  155,  192,  154,  155,  193,  154,  155,
	  194,  154,  155,  195,  154,  155,  196,  154,  155,  197,  154,  155,
	  198,  154,  155,  199,  154,  155,  200,  154,  155,  201,  154,  155,
	  202,  154,  155,  193,  154,  155,  203,  154,  155,  204,  154,  155,
	  205,  154,  155,  206,  154,  155,  207,  154,  155,  208,  154,  155,
	  209,  154,  155,  210,  154,  155,  211,  154,  155,  212,  154,  155,
	  213,  154,  155,  214,  154,  155,  215,  154,  155,  193,  154,  155,
	  216,  154,  155,  217,  154,  155,  218,  154,  155,  219,  154,  155,
	  220,  154,  155,  221,  154,  155,  222,  154,  155,  223,  154,  155,
	  224,  154,  155,  193,  154,  225,    0,  226,    0,  227,    0,  228,
	    0,  135,    0,  229,    0,  230,    0,  136,    0,  231,  232,    0,
	  233,    0,  234,    0,  235,    0,  236,    0,  237,    0,  238,    0,
	  239,    0,  241,  240,  243,  242,  243,  244,  245,  246,  247,  245,
	  248,  249,  250,  251,  252,  253,  254,  244,  242,  243,  255,  242,
	  243,  256,  242,  243,  257,  242,  243,  258,  242,  243,  259,  242,
	  243,  260,  242,  243,  261,  242,  243,  262,  242,  243,  263,  242,
	  243,  264,  242,  243,  265,  242,  243,  266,  242,  243,  267,  242,
	  243,  268,  242,  243,  269,  242,  243,  270,  271,  272,  242,  243,
	  273,  242,  243,  274,  242,  243,  275,  242,  243,  276,  242,  243,
	  277,  242,  243,  278,  242,  243,  279,  242,  243,  280,  242,  243,
	  281,  242,  243,  282,  242,  243,  283,  242,  243,  284,  242,  243,
	  285,  242,  243,  286,  242,  243,  287,  242,  243,  269,  242,  243,
	  288,  242,  243,  289,  242,  243,  290,  242,  243,  291,  242,  243,
	  292,  242,  243,  293,  242,  243,  294,  242,  243,  295,  242,  243,
	  287,  242,  243,  296,  242,  243,  297,  242,  243,  296,  242,  243,
	  298,  242,  243,  299,  242,  243,  300,  242,  243,  301,  242,  243,
	  302,  242,  243,  303,  242,  243,  304,  242,  243,  305,  242,  243,
	  306,  242,  243,  307,  242,  243,  308,  242,  243,  309,  242,  243,
	  310,  242,  243,  287,  242,  243,  311,  242,  243,  312,  242,  243,
	  313,  242,  243,  314,  242,  243,  297,  242,  243,  315,  242,  243,
	  316,  242,  243,  296,  242,  243,  281,  317,  242,  243,  318,  242,
	  243,  296,  242,  319,    0,  136,    0,  320,    0,  321,    0,  322,
	    0,  323,    0,  324,    0,  325,    0,  326,    0,  327,    0,  328,
	    0,  329,    0,  330,    0,  332,  331,  334,  333,  334,  335,  336,
	  337,  336,  335,  333,  334,  338,  333,  334,  339,  333,  334,  340,
	  333,  334,  341,  333,  334,  342,  333,  334,  343,  333,  334,  344,
	  333,  334,  345,  333,  334,  346,  333,  334,  347,  333,  334,  348,
	  333,  334,  349,  333,  334,  350,  333,  334,  351,  333,  334,  352,
	  333,  353,  354,  353,    0,  357,  356,  358,  359,  356,  355,    0,
	  361,  362,  360,    0,  361,  360,  357,  363,  361,  362,  363,  360,
	  357,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
	  375,  376,  377,  378,  364,    0,   92,  379,   91,   92,  380,   91,
	   92,  381,   91,   92,  380,   91,   92,  382,   91,   92,  383,   91,
	   92,  384,   91,   92,  385,   91,   92,  386,   91,   92,  387,   91,
	   92,  388,   91,   92,  389,   91,   92,  390,   91,   92,  391,   91,
	   92,  392,   91,   92,  393,   91,   92,  394,   91,   92,  395,   91,
	   92,  118,   91,   92,  396,   91,   92,  397,   91,   92,  398,   91,
	   92,  399,   91,   92,  381,   91,   92,  400,   91,   92,  401,   91,
	   92,  380,   91,   92,  402,  403,   91,   92,  404,   91,   92,  405,
	   91,   92,  406,   91,   92,  407,   91,   92,  408,   91,   92,  395,
	   91,   92,  409,   91,   92,  380,   91,  410,    0,  411,    0,  412,
	    0,  413,    0,  414,    0,  415,    0,  416,    0,  417,    0,  418,
	    0,  419,    0,  421,  420,  423,  422,  423,  424,  425,  426,  427,
	  425,  428,  429,  430,  431,  432,  433,  434,  424,  422,  423,  435,
	  422,  423,  436,  422,  423,  437,  422,  423,  438,  422,  423,  439,
	  422,  423,  440,  422,  423,  441,  422,  423,  442,  422,  423,  443,
	  422,  423,  444,  422,  423,  445,  422,  423,  446,  422,  423,  447,
	  422,  423,  448,  422,  423,  449,  422,  423,  450,  451,  422,  423,
	  452,  422,  423,  453,  422,  423,  454,  422,  423,  455,  422,  423,
	  456,  422,  423,  457,  422,  423,  458,  422,  423,  459,  422,  423,
	  460,  422,  423,  461,  422,  423,  462,  422,  423,  463,  422,  423,
	  464,  422,  423,  465,  422,  423,  466,  422,  423,  449,  422,  423,
	  467,  422,  423,  468,  422,  423,  467,  422,  423,  469,  422,  423,
	  470,  422,  423,  471,  422,  423,  472,  422,  423,  473,  422,  423,
	  474,  422,  423,  475,  422,  423,  476,  422,  423,  477,  422,  423,
	  478,  422,  423,  479,  422,  423,  480,  422,  423,  481,  422,  423,
	  466,  422,  423,  482,  422,  423,  483,  422,  423,  484,  422,  423,
	  485,  422,  423,  468,  422,  423,  486,  422,  423,  487,  422,  423,
	  467,  422,  423,  460,  488,  422,  423,  489,  422,  423,  467,  422,
	  136,    0,  490,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   73,   74,
	   75,  157,  162,  165,  247,  276,    3,    6,    7,    8,    9,    8,
	    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,
	   13,   14,    4,   14,   15,    4,   16,   18,   19,   20,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   30,  392,   32,   33,    4,
	   16,   33,    4,   16,   35,   36,    4,   35,   34,   36,   38,  318,
	  391,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
	   50,   51,   52,   53,   54,   55,   56,   55,   56,   56,    4,   57,
	   71,  282,  284,  285,  286,  301,  306,  309,   58,   59,   60,   61,
	   62,   63,   64,   65,   66,   67,   68,   69,   70,    4,   72,    4,
	    4,    5,   15,   17,   31,   34,   37,   73,   74,   75,  157,  162,
	  165,  247,  276,   74,   31,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   91,   92,
	   92,    4,   93,  107,  133,  116,  147,   94,   95,   96,   97,   98,
	   99,  100,  101,  102,  103,  104,  105,  106,    4,  108,  124,  109,
	  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
	  122,  123,   72,  125,  126,  127,  128,  129,  130,  131,  132,  134,
	  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
	  148,  149,  150,  151,  152,  153,  154,  155,  156,  158,  159,  160,
	  161,  163,  164,  166,  245,  167,  168,  169,  170,  171,  172,  173,
	  174,  175,  174,  175,  175,    4,  176,  190,  191,  218,  219,  220,
	  234,  239,  242,  177,  178,  179,  180,  181,  182,  183,  184,  185,
	  186,  187,  188,  189,    4,   72,  192,  208,  217,  193,  194,  195,
	  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
	  209,  210,  211,  212,  213,  214,  215,  216,  190,  219,  221,  222,
	  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  235,
	  236,  237,  238,  240,  241,  243,  244,  246,  248,  249,  250,  251,
	  252,  253,  254,  255,  256,  257,  258,  259,  260,  259,  260,  260,
	    4,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
	  272,  273,  274,  275,   72,  276,  277,  278,  280,  281,  279,  277,
	  278,  279,  277,  280,  281,    5,   15,   17,   31,   34,   37,   73,
	   74,   75,  157,  162,  165,  247,  276,  283,   71,  285,  287,  288,
	  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
	  302,  303,  304,  305,  307,  308,  310,  316,  311,  312,  313,  314,
	  315,  317,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
	  329,  330,  329,  330,  330,    4,  331,  345,  346,  364,  365,  366,
	  380,  385,  388,  332,  333,  334,  335,  336,  337,  338,  339,  340,
	  341,  342,  343,  344,    4,   72,  347,  363,  348,  349,  350,  351,
	  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  345,
	  365,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
	  378,  379,  381,  382,  383,  384,  386,  387,  389,  390,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,
	    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,
	    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,
	  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   78,   33,
	   84,   84,   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   19,   19,   31,
	  130,   60,   57,   31,   63,   57,   63,   63,   63,   63,   63,   63,
	   63,   63,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   69,   33,   84,   84,   84,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   75,   33,   84,   84,   84,   84,   84,
	   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,
	   81,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   21,    0,    0,   37,   37,   54,   37,   87,
	    0,    0,   39,    0,    0,   93,   90,   41,   96,   90,   96,   96,
	   96,   96,   96,   96,   96,   96,   99,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   72,   33,   84,   84,   84,   84,   84,
	   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   15,   15,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 392;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 583 "java/src/main/java/gherkin/lexer/Nl.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
    
// line 590 "java/src/main/java/gherkin/lexer/Nl.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 851 "java/src/main/java/gherkin/lexer/Nl.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 883 "java/src/main/java/gherkin/lexer/Nl.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/nl.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}


// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class En_scouse implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"


  private final Listener listener;

  public En_scouse(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/En_scouse.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   20,   21,   22,   41,   42,   43,   45,   47,   52,   57,
	   62,   67,   72,   76,   80,   82,   83,   84,   85,   86,   87,   88,
	   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,  100,  102,
	  107,  114,  119,  120,  121,  122,  125,  126,  127,  128,  129,  130,
	  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
	  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
	  155,  156,  157,  158,  159,  160,  176,  178,  180,  182,  184,  186,
	  188,  190,  192,  194,  196,  198,  200,  202,  204,  206,  225,  226,
	  227,  228,  229,  230,  231,  232,  233,  234,  235,  242,  244,  246,
	  248,  250,  252,  254,  256,  257,  258,  259,  260,  261,  262,  263,
	  264,  265,  277,  279,  281,  283,  285,  287,  289,  291,  293,  295,
	  297,  299,  301,  303,  305,  307,  309,  311,  313,  315,  317,  319,
	  321,  323,  325,  327,  329,  331,  333,  335,  337,  339,  341,  343,
	  345,  347,  349,  351,  353,  355,  357,  359,  361,  363,  365,  367,
	  369,  371,  373,  375,  377,  379,  381,  383,  385,  387,  389,  391,
	  393,  395,  397,  399,  401,  403,  405,  407,  409,  411,  413,  415,
	  417,  419,  421,  423,  424,  425,  426,  427,  428,  429,  430,  431,
	  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
	  444,  445,  446,  462,  464,  466,  468,  470,  472,  474,  476,  478,
	  480,  482,  484,  486,  488,  490,  492,  494,  496,  498,  502,  504,
	  506,  508,  510,  512,  514,  516,  518,  520,  522,  524,  526,  528,
	  530,  532,  534,  536,  538,  540,  542,  544,  546,  548,  550,  552,
	  554,  556,  558,  560,  562,  564,  566,  568,  570,  572,  574,  576,
	  578,  580,  582,  584,  586,  588,  590,  592,  594,  596,  598,  600,
	  602,  604,  606,  608,  610,  612,  614,  616,  618,  620,  623,  625,
	  627,  629,  631,  633,  635,  637,  639,  641,  643,  645,  647,  649,
	  651,  653,  655,  657,  659,  662,  664,  666,  668,  670,  672,  674,
	  676,  678,  680,  682,  684,  686,  688,  690,  692,  694,  696,  698,
	  700,  702,  704,  705,  706,  707,  708,  709,  710,  711,  712,  713,
	  714,  715,  716,  717,  718,  734,  736,  738,  740,  742,  744,  746,
	  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,  768,  770,
	  773,  775,  777,  779,  781,  783,  785,  787,  789,  791,  793,  795,
	  797,  799,  801,  803,  805,  807,  809,  811,  813,  815,  817,  819,
	  821,  823,  825,  827,  829,  831,  833,  835,  837,  839,  841,  843,
	  845,  847,  849,  851,  853,  855,  857,  859,  861,  863,  865,  867,
	  869,  871,  873,  876,  878,  880,  882,  884,  886,  888,  890,  892,
	  894,  896,  898,  900,  902,  904,  906,  908,  910,  912,  914,  916,
	  917,  918,  919,  920,  921,  922,  923,  924,  925,  926,  928,  929,
	  930,  931,  932,  933,  934,  935,  936,  937,  938,  939,  940,  941,
	  942,  943,  944,  945,  946,  947,  948,  952,  958,  961,  963,  969,
	  988,  990,  992,  994,  997,  999, 1001, 1003, 1005, 1007, 1009, 1011,
	 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035,
	 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059,
	 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1080, 1082, 1084,
	 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108,
	 1110, 1112, 1114, 1116, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133,
	 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157,
	 1159
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   68,   69,
	   70,   71,   84,   87,   89,  124,    9,   13,  -69,  -65,   10,   32,
	   34,   35,   37,   42,   64,   65,   66,   68,   69,   70,   71,   84,
	   87,   89,  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,
	   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,
	   70,   69,   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,
	   37,   32,   10,   13,   10,   13,   13,   32,   64,    9,   10,    9,
	   10,   13,   32,   64,   11,   12,   10,   32,   64,    9,   13,  110,
	  117,  104,  101,  105,  117,  110,   32,  121,  111,  117,  115,  101,
	   32,  103,  111,  116,  116,   97,  115,   32,  105,  115,   32,  119,
	  104,   97,  116,   32,  119,  101,  110,  116,   32,  100,  111,  119,
	  110,   58,   10,   10,   10,   32,   35,   37,   42,   64,   65,   66,
	   68,   70,   71,   84,   87,   89,    9,   13,   10,   95,   10,   70,
	   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,
	   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,
	   10,   32,   10,   32,   34,   35,   37,   42,   64,   65,   66,   68,
	   69,   70,   71,   84,   87,   89,  124,    9,   13,  120,   97,  109,
	  112,  108,  101,  115,   58,   10,   10,   10,   32,   35,   70,  124,
	    9,   13,   10,  101,   10,   97,   10,  116,   10,  117,   10,  114,
	   10,  101,   10,   58,  101,   97,  116,  117,  114,  101,   58,   10,
	   10,   10,   32,   35,   37,   64,   68,   69,   70,   84,   87,    9,
	   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,   10,  105,   10,  115,   10,   32,   10,
	  105,   10,  115,   10,   32,   10,  119,   10,  104,   10,   97,   10,
	  116,   10,   32,   10,  119,   10,  101,   10,  110,   10,  116,   10,
	   32,   10,  100,   10,  111,   10,  119,   10,  110,   10,   58,   10,
	  120,   10,   97,   10,  109,   10,  112,   10,  108,   10,  101,   10,
	  115,   10,  101,   10,   97,   10,  116,   10,  117,   10,  114,   10,
	  101,   10,  104,   10,  101,   10,   32,   10,  116,   10,  104,   10,
	  105,   10,  110,   10,  103,   10,   32,   10,  111,   10,  102,   10,
	   32,   10,  105,   10,  116,   10,   32,   10,  105,   10,  104,   10,
	   97,   10,  114,   10,  114,   10,  105,   10,  109,   10,  101,   10,
	   97,   10,  110,  105,  118,  117,  104,  101,   32,  116,  104,  105,
	  110,  103,   32,  111,  102,   32,  105,  116,   32,  105,  115,   58,
	   10,   10,   10,   32,   35,   37,   42,   64,   65,   66,   68,   70,
	   71,   84,   87,   89,    9,   13,   10,   95,   10,   70,   10,   69,
	   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,
	   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,
	   10,  110,   10,  117,   10,  104,   10,  101,  105,  117,   10,  110,
	   10,   32,   10,  121,   10,  111,   10,  117,   10,  115,   10,  101,
	   10,   32,   10,  103,   10,  111,   10,  116,   10,  116,   10,   97,
	   10,  115,   10,   32,   10,  105,   10,  115,   10,   32,   10,  119,
	   10,  104,   10,   97,   10,  116,   10,   32,   10,  119,   10,  101,
	   10,  110,   10,  116,   10,   32,   10,  100,   10,  111,   10,  119,
	   10,  110,   10,   58,   10,  101,   10,   97,   10,  116,   10,  117,
	   10,  114,   10,  101,   10,  105,   10,  118,   10,  117,   10,  104,
	   10,  101,   10,   32,   10,  116,   10,  104,   10,  105,   10,  110,
	   10,  103,   10,   32,   10,  111,   10,  102,   10,   32,   10,  105,
	   10,  116,   10,   32,   10,  105,   10,  115,   10,  104,  117,   10,
	   97,   10,  114,   10,  114,   10,  105,   10,  109,   10,  101,   10,
	   97,   10,  110,   10,  111,   10,  117,   10,  115,   10,  101,   10,
	   32,   10,  107,   10,  110,   10,  111,   10,  119,   10,   32,   10,
	  108,  119,   10,  105,   10,  107,   10,  101,   10,   32,   10,  119,
	   10,  104,   10,  101,   10,  104,   10,  101,   10,  110,   10,   32,
	   10,  121,   10,  111,   10,  117,   10,  115,   10,  101,   10,   32,
	   10,  103,   10,  111,   10,  116,  104,  117,   97,  114,  114,  105,
	  109,  101,   97,  110,   32,  105,  115,   58,   10,   10,   10,   32,
	   35,   37,   42,   64,   65,   66,   68,   70,   71,   84,   87,   89,
	    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,
	   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,
	   10,   68,   10,   95,   10,   37,   10,   32,   10,  110,   10,  117,
	   10,  104,   10,  101,  117,   10,  110,   10,   32,   10,  121,   10,
	  111,   10,  117,   10,  115,   10,  101,   10,   32,   10,  103,   10,
	  111,   10,  116,   10,  116,   10,   97,   10,  101,   10,   97,   10,
	  116,   10,  117,   10,  114,   10,  101,   10,   58,   10,  105,   10,
	  118,   10,  117,   10,  104,   10,  101,   10,   32,   10,  116,   10,
	  104,   10,  105,   10,  110,   10,  103,   10,   32,   10,  111,   10,
	  102,   10,   32,   10,  105,   10,  116,   10,   32,   10,  105,   10,
	  115,   10,  111,   10,  117,   10,  115,   10,  101,   10,   32,   10,
	  107,   10,  110,   10,  111,   10,  119,   10,   32,   10,  108,  119,
	   10,  105,   10,  107,   10,  101,   10,   32,   10,  119,   10,  104,
	   10,  101,   10,  104,   10,  101,   10,  110,   10,   32,   10,  121,
	   10,  111,   10,  117,   10,  115,   10,  101,   10,   32,   10,  103,
	   10,  111,   10,  116,  111,  117,  115,  101,   32,  107,  110,  111,
	  119,   32,  108,  119,  105,  107,  101,   32,  119,  104,  101,  104,
	  101,  110,   32,  121,  111,  117,  115,  101,   32,  103,  111,  116,
	   32,  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,
	  124,   10,   92,   10,   32,   92,  124,    9,   13,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   68,   69,   70,   71,   84,   87,
	   89,  124,    9,   13,   10,  110,   10,  117,   10,  104,   10,  101,
	  117,   10,  110,   10,   32,   10,  121,   10,  111,   10,  117,   10,
	  115,   10,  101,   10,   32,   10,  103,   10,  111,   10,  116,   10,
	  116,   10,   97,   10,  101,   10,   97,   10,  116,   10,  117,   10,
	  114,   10,  101,   10,   58,   10,  105,   10,  118,   10,  117,   10,
	  104,   10,  101,   10,   32,   10,  116,   10,  104,   10,  105,   10,
	  110,   10,  103,   10,   32,   10,  111,   10,  102,   10,   32,   10,
	  105,   10,  116,   10,   32,   10,  105,   10,  115,   10,  104,  117,
	   10,   97,   10,  114,   10,  114,   10,  105,   10,  109,   10,  101,
	   10,   97,   10,  110,   10,  111,   10,  117,   10,  115,   10,  101,
	   10,   32,   10,  107,   10,  110,   10,  111,   10,  119,   10,   32,
	   10,  108,  119,   10,  105,   10,  107,   10,  101,   10,   32,   10,
	  119,   10,  104,   10,  101,   10,  104,   10,  101,   10,  110,   10,
	   32,   10,  121,   10,  111,   10,  117,   10,  115,   10,  101,   10,
	   32,   10,  103,   10,  111,   10,  116,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   18,    1,    1,   17,    1,    1,    2,    2,    3,    3,    3,
	    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
	    5,    3,    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,   14,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,   17,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    5,    2,    2,    2,
	    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,   10,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,   14,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,   14,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    2,    4,    3,    2,    4,   17,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    1,    0,    0,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   20,   22,   24,   43,   45,   47,   50,   53,   58,   63,
	   68,   73,   78,   82,   86,   89,   91,   93,   95,   97,   99,  101,
	  103,  105,  107,  109,  111,  113,  115,  117,  119,  121,  124,  127,
	  132,  139,  144,  146,  148,  150,  154,  156,  158,  160,  162,  164,
	  166,  168,  170,  172,  174,  176,  178,  180,  182,  184,  186,  188,
	  190,  192,  194,  196,  198,  200,  202,  204,  206,  208,  210,  212,
	  214,  216,  218,  220,  222,  224,  240,  243,  246,  249,  252,  255,
	  258,  261,  264,  267,  270,  273,  276,  279,  282,  285,  304,  306,
	  308,  310,  312,  314,  316,  318,  320,  322,  324,  331,  334,  337,
	  340,  343,  346,  349,  352,  354,  356,  358,  360,  362,  364,  366,
	  368,  370,  382,  385,  388,  391,  394,  397,  400,  403,  406,  409,
	  412,  415,  418,  421,  424,  427,  430,  433,  436,  439,  442,  445,
	  448,  451,  454,  457,  460,  463,  466,  469,  472,  475,  478,  481,
	  484,  487,  490,  493,  496,  499,  502,  505,  508,  511,  514,  517,
	  520,  523,  526,  529,  532,  535,  538,  541,  544,  547,  550,  553,
	  556,  559,  562,  565,  568,  571,  574,  577,  580,  583,  586,  589,
	  592,  595,  598,  601,  603,  605,  607,  609,  611,  613,  615,  617,
	  619,  621,  623,  625,  627,  629,  631,  633,  635,  637,  639,  641,
	  643,  645,  647,  663,  666,  669,  672,  675,  678,  681,  684,  687,
	  690,  693,  696,  699,  702,  705,  708,  711,  714,  717,  722,  725,
	  728,  731,  734,  737,  740,  743,  746,  749,  752,  755,  758,  761,
	  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,  794,  797,
	  800,  803,  806,  809,  812,  815,  818,  821,  824,  827,  830,  833,
	  836,  839,  842,  845,  848,  851,  854,  857,  860,  863,  866,  869,
	  872,  875,  878,  881,  884,  887,  890,  893,  896,  899,  903,  906,
	  909,  912,  915,  918,  921,  924,  927,  930,  933,  936,  939,  942,
	  945,  948,  951,  954,  957,  961,  964,  967,  970,  973,  976,  979,
	  982,  985,  988,  991,  994,  997, 1000, 1003, 1006, 1009, 1012, 1015,
	 1018, 1021, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042,
	 1044, 1046, 1048, 1050, 1052, 1068, 1071, 1074, 1077, 1080, 1083, 1086,
	 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122,
	 1126, 1129, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159,
	 1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 1186, 1189, 1192, 1195,
	 1198, 1201, 1204, 1207, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231,
	 1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 1267,
	 1270, 1273, 1276, 1280, 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304,
	 1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 1331, 1334, 1337, 1340,
	 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1363, 1365,
	 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389,
	 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1407, 1413, 1417, 1420, 1426,
	 1445, 1448, 1451, 1454, 1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479,
	 1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 1509, 1512, 1515,
	 1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551,
	 1554, 1557, 1560, 1563, 1566, 1569, 1572, 1575, 1578, 1582, 1585, 1588,
	 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621, 1624,
	 1627, 1630, 1633, 1636, 1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661,
	 1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691, 1694, 1697,
	 1700
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   18,    2,    0,   19,    0,    2,    0,
	    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
	   14,   15,   16,   17,   18,    2,    0,   20,    0,   21,    0,   23,
	   24,   22,   26,   27,   25,   30,   29,   31,   29,   28,   34,   33,
	   35,   33,   32,   34,   33,   36,   33,   32,   34,   33,   37,   33,
	   32,   39,   38,   40,   38,    0,    3,   41,   41,    0,   39,   38,
	   38,    0,   43,   44,   42,    3,    0,   45,    0,   46,    0,   47,
	    0,   48,    0,   49,    0,   50,    0,   51,    0,   52,    0,   53,
	    0,   54,    0,   55,    0,   56,    0,   57,    0,   58,    0,   59,
	    0,   61,   62,   60,   64,   65,   63,    0,    0,    0,    0,   66,
	   67,   68,   67,   67,   70,   69,   66,    3,   71,    8,   71,    0,
	   72,    0,   73,    0,   72,    0,   74,   75,   76,    0,   77,    0,
	   78,    0,   79,    0,   80,    0,   81,    0,   82,    0,   83,    0,
	   84,    0,   85,    0,   86,    0,   87,    0,   88,    0,   72,    0,
	   89,    0,   90,    0,   91,    0,   92,    0,   93,    0,   94,    0,
	   95,    0,   96,    0,   97,    0,   98,    0,   99,    0,  100,    0,
	  101,    0,  102,    0,  103,    0,  104,    0,  105,    0,  106,    0,
	  107,    0,  108,    0,  110,  109,  112,  111,  112,  113,  114,  115,
	  116,  114,  117,  118,  119,  120,  121,  122,  123,  124,  113,  111,
	  112,  125,  111,  112,  126,  111,  112,  127,  111,  112,  128,  111,
	  112,  129,  111,  112,  130,  111,  112,  131,  111,  112,  132,  111,
	  112,  133,  111,  112,  134,  111,  112,  135,  111,  112,  136,  111,
	  112,  137,  111,  112,  138,  111,  112,  139,  111,  141,  140,  142,
	  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
	  155,  156,  140,    0,  157,    0,  158,    0,  159,    0,  160,    0,
	  161,    0,  162,    0,  163,    0,  164,    0,  166,  165,  168,  167,
	  168,  169,  170,  171,  170,  169,  167,  168,  172,  167,  168,  173,
	  167,  168,  174,  167,  168,  175,  167,  168,  176,  167,  168,  177,
	  167,  168,  178,  167,  179,    0,  180,    0,  181,    0,  182,    0,
	  183,    0,  184,    0,  185,    0,  187,  186,  189,  188,  189,  190,
	  191,  192,  191,  193,  194,  195,  196,  197,  190,  188,  189,  198,
	  188,  189,  199,  188,  189,  200,  188,  189,  201,  188,  189,  202,
	  188,  189,  203,  188,  189,  204,  188,  189,  205,  188,  189,  206,
	  188,  189,  207,  188,  189,  208,  188,  189,  209,  188,  189,  210,
	  188,  189,  211,  188,  189,  212,  188,  189,  213,  188,  189,  214,
	  188,  189,  215,  188,  189,  216,  188,  189,  217,  188,  189,  218,
	  188,  189,  219,  188,  189,  220,  188,  189,  221,  188,  189,  222,
	  188,  189,  223,  188,  189,  224,  188,  189,  225,  188,  189,  226,
	  188,  189,  227,  188,  189,  228,  188,  189,  229,  188,  189,  230,
	  188,  189,  231,  188,  189,  232,  188,  189,  233,  188,  189,  234,
	  188,  189,  235,  188,  189,  236,  188,  189,  237,  188,  189,  238,
	  188,  189,  231,  188,  189,  239,  188,  189,  240,  188,  189,  241,
	  188,  189,  242,  188,  189,  243,  188,  189,  231,  188,  189,  244,
	  188,  189,  245,  188,  189,  246,  188,  189,  247,  188,  189,  248,
	  188,  189,  249,  188,  189,  250,  188,  189,  251,  188,  189,  252,
	  188,  189,  253,  188,  189,  254,  188,  189,  255,  188,  189,  256,
	  188,  189,  257,  188,  189,  258,  188,  189,  238,  188,  189,  259,
	  188,  189,  260,  188,  189,  261,  188,  189,  262,  188,  189,  263,
	  188,  189,  264,  188,  189,  265,  188,  189,  266,  188,  189,  257,
	  188,  267,    0,  268,    0,   76,    0,  269,    0,  270,    0,  271,
	    0,  272,    0,  273,    0,  274,    0,  275,    0,  276,    0,  277,
	    0,  278,    0,  279,    0,  280,    0,  281,    0,  282,    0,  283,
	    0,  284,    0,  285,    0,  286,    0,  288,  287,  290,  289,  290,
	  291,  292,  293,  294,  292,  295,  296,  297,  298,  299,  300,  301,
	  302,  291,  289,  290,  303,  289,  290,  304,  289,  290,  305,  289,
	  290,  306,  289,  290,  307,  289,  290,  308,  289,  290,  309,  289,
	  290,  310,  289,  290,  311,  289,  290,  312,  289,  290,  313,  289,
	  290,  314,  289,  290,  315,  289,  290,  316,  289,  290,  317,  289,
	  290,  318,  289,  290,  319,  289,  290,  318,  289,  290,  320,  321,
	  322,  289,  290,  323,  289,  290,  324,  289,  290,  325,  289,  290,
	  326,  289,  290,  327,  289,  290,  328,  289,  290,  329,  289,  290,
	  330,  289,  290,  331,  289,  290,  332,  289,  290,  333,  289,  290,
	  334,  289,  290,  318,  289,  290,  335,  289,  290,  336,  289,  290,
	  337,  289,  290,  338,  289,  290,  339,  289,  290,  340,  289,  290,
	  341,  289,  290,  342,  289,  290,  343,  289,  290,  344,  289,  290,
	  345,  289,  290,  346,  289,  290,  347,  289,  290,  348,  289,  290,
	  349,  289,  290,  350,  289,  290,  351,  289,  290,  352,  289,  290,
	  353,  289,  290,  317,  289,  290,  354,  289,  290,  355,  289,  290,
	  356,  289,  290,  357,  289,  290,  358,  289,  290,  353,  289,  290,
	  359,  289,  290,  360,  289,  290,  322,  289,  290,  361,  289,  290,
	  362,  289,  290,  363,  289,  290,  364,  289,  290,  365,  289,  290,
	  366,  289,  290,  367,  289,  290,  368,  289,  290,  369,  289,  290,
	  370,  289,  290,  371,  289,  290,  372,  289,  290,  373,  289,  290,
	  374,  289,  290,  375,  289,  290,  376,  289,  290,  353,  289,  290,
	  377,  322,  289,  290,  378,  289,  290,  379,  289,  290,  380,  289,
	  290,  381,  289,  290,  382,  289,  290,  383,  289,  290,  384,  289,
	  290,  374,  289,  290,  385,  289,  290,  386,  289,  290,  387,  289,
	  290,  388,  289,  290,  389,  289,  290,  390,  289,  290,  391,  289,
	  290,  392,  289,  290,  393,  289,  290,  394,  289,  290,  395,  396,
	  289,  290,  397,  289,  290,  398,  289,  290,  399,  289,  290,  400,
	  289,  290,  401,  289,  290,  402,  289,  290,  322,  289,  290,  403,
	  289,  290,  404,  289,  290,  405,  289,  290,  406,  289,  290,  407,
	  289,  290,  408,  289,  290,  409,  289,  290,  410,  289,  290,  411,
	  289,  290,  412,  289,  290,  413,  289,  290,  414,  289,  290,  318,
	  289,  415,   76,    0,  416,    0,  417,    0,  418,    0,  419,    0,
	  420,    0,  421,    0,  422,    0,  423,    0,  424,    0,  425,    0,
	  426,    0,  427,    0,  429,  428,  431,  430,  431,  432,  433,  434,
	  435,  433,  436,  437,  438,  439,  440,  441,  442,  443,  432,  430,
	  431,  444,  430,  431,  445,  430,  431,  446,  430,  431,  447,  430,
	  431,  448,  430,  431,  449,  430,  431,  450,  430,  431,  451,  430,
	  431,  452,  430,  431,  453,  430,  431,  454,  430,  431,  455,  430,
	  431,  456,  430,  431,  457,  430,  431,  458,  430,  431,  459,  430,
	  431,  460,  430,  431,  459,  430,  431,  461,  462,  430,  431,  463,
	  430,  431,  464,  430,  431,  465,  430,  431,  466,  430,  431,  467,
	  430,  431,  468,  430,  431,  469,  430,  431,  470,  430,  431,  471,
	  430,  431,  472,  430,  431,  473,  430,  431,  474,  430,  431,  459,
	  430,  431,  475,  430,  431,  476,  430,  431,  477,  430,  431,  478,
	  430,  431,  479,  430,  431,  480,  430,  431,  458,  430,  431,  481,
	  430,  431,  482,  430,  431,  462,  430,  431,  483,  430,  431,  484,
	  430,  431,  485,  430,  431,  486,  430,  431,  487,  430,  431,  488,
	  430,  431,  489,  430,  431,  490,  430,  431,  491,  430,  431,  492,
	  430,  431,  493,  430,  431,  494,  430,  431,  495,  430,  431,  496,
	  430,  431,  497,  430,  431,  498,  430,  431,  480,  430,  431,  499,
	  430,  431,  500,  430,  431,  501,  430,  431,  502,  430,  431,  503,
	  430,  431,  504,  430,  431,  505,  430,  431,  506,  430,  431,  507,
	  430,  431,  508,  430,  431,  509,  510,  430,  431,  511,  430,  431,
	  512,  430,  431,  513,  430,  431,  514,  430,  431,  515,  430,  431,
	  516,  430,  431,  462,  430,  431,  517,  430,  431,  518,  430,  431,
	  519,  430,  431,  520,  430,  431,  521,  430,  431,  522,  430,  431,
	  523,  430,  431,  524,  430,  431,  525,  430,  431,  526,  430,  431,
	  527,  430,  431,  528,  430,  431,  459,  430,  529,    0,  530,    0,
	  531,    0,  532,    0,  533,    0,  534,    0,  535,    0,  536,    0,
	  537,    0,  538,    0,  539,  540,    0,  541,    0,  542,    0,  543,
	    0,  544,    0,  545,    0,  546,    0,   76,    0,  547,    0,  548,
	    0,  549,    0,  550,    0,  551,    0,  552,    0,  553,    0,  554,
	    0,  555,    0,  556,    0,  557,    0,  558,    0,   72,    0,  559,
	  560,  559,    0,  563,  562,  564,  565,  562,  561,    0,  567,  568,
	  566,    0,  567,  566,  563,  569,  567,  568,  569,  566,  563,  570,
	  571,  572,  573,  574,  575,  576,  577,  578,  579,  580,  581,  582,
	  583,  584,  585,  570,    0,  112,  586,  111,  112,  587,  111,  112,
	  586,  111,  112,  588,  589,  111,  112,  590,  111,  112,  591,  111,
	  112,  592,  111,  112,  593,  111,  112,  594,  111,  112,  595,  111,
	  112,  596,  111,  112,  597,  111,  112,  598,  111,  112,  599,  111,
	  112,  600,  111,  112,  601,  111,  112,  586,  111,  112,  602,  111,
	  112,  603,  111,  112,  604,  111,  112,  605,  111,  112,  606,  111,
	  112,  607,  111,  112,  139,  111,  112,  608,  111,  112,  609,  111,
	  112,  589,  111,  112,  610,  111,  112,  611,  111,  112,  612,  111,
	  112,  613,  111,  112,  614,  111,  112,  615,  111,  112,  616,  111,
	  112,  617,  111,  112,  618,  111,  112,  619,  111,  112,  620,  111,
	  112,  621,  111,  112,  622,  111,  112,  623,  111,  112,  624,  111,
	  112,  625,  111,  112,  607,  111,  112,  626,  589,  111,  112,  627,
	  111,  112,  628,  111,  112,  629,  111,  112,  630,  111,  112,  631,
	  111,  112,  632,  111,  112,  633,  111,  112,  623,  111,  112,  634,
	  111,  112,  635,  111,  112,  636,  111,  112,  637,  111,  112,  638,
	  111,  112,  639,  111,  112,  640,  111,  112,  641,  111,  112,  642,
	  111,  112,  643,  111,  112,  644,  645,  111,  112,  646,  111,  112,
	  647,  111,  112,  648,  111,  112,  649,  111,  112,  650,  111,  112,
	  651,  111,  112,  589,  111,  112,  652,  111,  112,  653,  111,  112,
	  654,  111,  112,  655,  111,  112,  656,  111,  112,  657,  111,  112,
	  658,  111,  112,  659,  111,  112,  660,  111,  112,  661,  111,  112,
	  662,  111,  112,  663,  111,  112,  586,  111,  664,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   16,   18,   32,   35,   38,   39,   41,
	   94,  112,  195,  198,  337,  443,  474,    3,    6,    7,    8,    9,
	    8,    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,
	   12,   13,   14,    4,   15,   14,   16,    4,   17,   19,   20,   21,
	   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,  564,   33,
	   34,    4,   17,   34,    4,   17,   36,   37,    4,   36,   35,   37,
	   32,   40,   42,   55,   38,   43,   44,   45,   46,   47,   48,   49,
	   50,   51,   52,   53,   54,   56,   57,   58,   59,   60,   61,   62,
	   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
	   75,   76,   77,   76,   77,   77,    4,   78,   92,  480,  481,  483,
	  497,  504,  507,  524,  533,   79,   80,   81,   82,   83,   84,   85,
	   86,   87,   88,   89,   90,   91,    4,   93,    4,    4,    5,   16,
	   18,   32,   35,   38,   39,   41,   94,  112,  195,  198,  337,  443,
	  474,   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,  103,
	  104,  104,    4,  105,  106,  107,  108,  109,  110,  111,   93,  113,
	  114,  115,  116,  117,  118,  119,  120,  121,  120,  121,  121,    4,
	  122,  136,  157,  164,  170,  186,  123,  124,  125,  126,  127,  128,
	  129,  130,  131,  132,  133,  134,  135,    4,  137,  138,  139,  140,
	  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
	  153,  154,  155,  156,   93,  158,  159,  160,  161,  162,  163,  165,
	  166,  167,  168,  169,  171,  172,  173,  174,  175,  176,  177,  178,
	  179,  180,  181,  182,  183,  184,  185,  187,  188,  189,  190,  191,
	  192,  193,  194,  196,  197,  199,  200,  201,  202,  203,  204,  205,
	  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
	  218,  217,  218,  218,    4,  219,  233,  234,  235,  237,  271,  277,
	  280,  297,  306,  220,  221,  222,  223,  224,  225,  226,  227,  228,
	  229,  230,  231,  232,    4,   93,  233,  236,  238,  251,  234,  239,
	  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  252,
	  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
	  265,  266,  267,  268,  269,  270,  272,  273,  274,  275,  276,  278,
	  279,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
	  292,  293,  294,  295,  296,  298,  299,  300,  301,  302,  303,  304,
	  305,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
	  324,  318,  319,  320,  321,  322,  323,  325,  326,  327,  328,  329,
	  330,  331,  332,  333,  334,  335,  336,  338,  339,  340,  341,  342,
	  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  351,  352,
	  352,    4,  353,  367,  368,  369,  371,  385,  392,  395,  394,  412,
	  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
	  366,    4,   93,  367,  370,  372,  368,  373,  374,  375,  376,  377,
	  378,  379,  380,  381,  382,  383,  384,  386,  387,  388,  389,  390,
	  391,  393,  394,  396,  397,  398,  399,  400,  401,  402,  403,  404,
	  405,  406,  407,  408,  409,  410,  411,  413,  414,  415,  416,  417,
	  418,  419,  420,  421,  422,  423,  430,  424,  425,  426,  427,  428,
	  429,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,
	  442,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
	  461,  455,  456,  457,  458,  459,  460,  462,  463,  464,  465,  466,
	  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,  478,  479,
	  477,  475,  476,  477,  475,  478,  479,    5,   16,   18,   32,   35,
	   38,   39,   41,   94,  112,  195,  198,  337,  443,  474,   92,  482,
	  484,  480,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
	  495,  496,  498,  499,  500,  501,  502,  503,  505,  506,  508,  509,
	  510,  511,  512,  513,  514,  515,  516,  517,  518,  519,  520,  521,
	  522,  523,  525,  526,  527,  528,  529,  530,  531,  532,  534,  535,
	  536,  537,  538,  539,  540,  541,  542,  543,  544,  551,  545,  546,
	  547,  548,  549,  550,  552,  553,  554,  555,  556,  557,  558,  559,
	  560,  561,  562,  563,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,
	   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,
	   33,    0,   11,  106,    0,    0,    0,  114,   25,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  149,  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   72,   33,   84,   84,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,   15,   31,  130,   60,   57,
	   31,   63,   57,   63,   63,   63,   63,   63,   63,   63,   63,   63,
	   66,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,    0,   81,   84,    0,    0,    0,    0,    0,    0,   21,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   69,
	   33,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,    0,   75,   33,   84,   84,   84,   84,   84,   84,
	   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   78,   33,   84,   84,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   19,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,   37,   54,
	   37,   87,    0,    0,   39,    0,    0,   93,   90,   41,   96,   90,
	   96,   96,   96,   96,   96,   96,   96,   96,   96,   99,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 564;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 754 "java/src/main/java/gherkin/lexer/En_scouse.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
    
// line 761 "java/src/main/java/gherkin/lexer/En_scouse.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1022 "java/src/main/java/gherkin/lexer/En_scouse.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1054 "java/src/main/java/gherkin/lexer/En_scouse.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en_scouse.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}


// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Ko implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"


  private final Listener listener;

  public Ko(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Ko.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   15,   17,   18,   19,   21,   22,   23,   24,   25,   27,
	   29,   43,   47,   48,   49,   50,   52,   53,   54,   55,   56,   57,
	   58,   59,   60,   61,   62,   63,   64,   65,   77,   80,   82,   84,
	   87,   89,   91,   93,   95,  109,  112,  113,  114,  115,  116,  117,
	  118,  119,  120,  121,  122,  124,  125,  126,  127,  128,  129,  130,
	  131,  132,  133,  145,  148,  150,  152,  155,  157,  159,  161,  163,
	  165,  167,  169,  171,  173,  175,  177,  179,  181,  185,  187,  189,
	  191,  194,  196,  198,  200,  202,  204,  206,  209,  211,  213,  215,
	  217,  219,  221,  223,  225,  227,  229,  231,  233,  235,  237,  239,
	  241,  243,  245,  247,  249,  251,  253,  255,  257,  259,  261,  263,
	  265,  267,  269,  271,  273,  275,  277,  279,  281,  282,  283,  295,
	  298,  300,  302,  305,  307,  309,  311,  313,  315,  317,  319,  321,
	  323,  325,  327,  329,  331,  336,  338,  340,  342,  345,  347,  349,
	  351,  353,  355,  357,  359,  361,  363,  365,  368,  370,  372,  374,
	  376,  378,  380,  382,  384,  386,  388,  391,  393,  395,  397,  399,
	  401,  403,  405,  407,  409,  411,  413,  415,  417,  419,  421,  423,
	  425,  427,  429,  431,  433,  435,  437,  439,  441,  443,  445,  447,
	  449,  451,  453,  455,  456,  457,  458,  459,  466,  468,  470,  472,
	  474,  476,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
	  488,  489,  490,  491,  493,  495,  500,  505,  510,  515,  519,  523,
	  525,  526,  527,  528,  529,  530,  531,  532,  533,  534,  535,  536,
	  537,  538,  539,  540,  541,  546,  553,  558,  562,  568,  571,  573,
	  579,  593,  595,  597,  599,  601,  603,  605,  607,  609,  611,  615,
	  617,  619,  621,  624,  626,  628,  630,  632,  634,  636,  639,  641,
	  643,  645,  647,  649,  651,  653,  655,  657,  659,  662,  664,  666,
	  668,  670,  672,  674,  676,  678,  680,  682,  684,  686,  688,  690,
	  692,  694,  696,  698,  700,  702,  704,  706,  708,  710,  712,  714,
	  716,  718,  720,  722,  724,  726,  727,  728,  729,  730,  731,  732,
	  733,  734,  735,  736,  737,  747,  749,  751,  753,  755,  757,  759,
	  761,  763,  765,  767,  769,  772,  774,  776,  778,  780,  782,  784,
	  786,  788,  790,  792,  795,  797,  799,  801,  803,  805,  807,  809,
	  811,  813,  815,  817,  819,  821,  823,  825,  827,  829,  831,  833,
	  835,  837,  838,  839
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -22,  -21,  -20,  -19,  -17,   10,   32,   34,   35,   37,   42,   64,
	  124,    9,   13,  -73,  -72,  -72,  -21,  -97,  -90,  -84,  -21,  -87,
	  -76,   10,   13,   10,   13,  -22,  -21,  -20,  -19,   10,   32,   34,
	   35,   37,   42,   64,  124,    9,   13, -117,  -89,  -88,  -80,  -88,
	 -116,  -20, -107,  -99,  -67,  -68,  -68,  -20,  -96, -128,  -80,  -22,
	  -78,  -67,   58,   10,   10,  -22,  -21,  -20,  -19,   10,   32,   35,
	   37,   42,   64,    9,   13,  -73,  -72,   10,  -72,   10,  -21,   10,
	  -97,  -90,   10,  -84,   10,  -21,   10,  -87,   10,  -76,   10,  -22,
	  -21,  -20,  -19,   10,   32,   34,   35,   37,   42,   64,  124,    9,
	   13, -117, -104,  -95, -100,  -21, -126, -104,  -21,  -90,  -84,  -20,
	 -104,  -92,   32,   58,  -22,  -80, -100,  -20, -102, -108,   58,   10,
	   10,  -22,  -21,  -20,  -19,   10,   32,   35,   37,   42,   64,    9,
	   13,  -73,  -72,   10,  -72,   10,  -21,   10,  -97,  -90,   10,  -84,
	   10,  -21,   10,  -87,   10,  -76,   10,  -84,   10,  -22,   10,  -77,
	   10,  -96,   10,  -80,   10,  -21,   10, -118,   10,  -91,   10,   10,
	   58, -117,  -89,  -88,   10,  -88,   10, -116,   10,  -20,   10, -107,
	  -99,   10,  -67,   10,  -68,   10,  -68,   10,  -20,   10,  -96,   10,
	 -128,   10, -117,  -95,   10, -100,   10,  -21,   10, -126,   10, -104,
	   10,  -21,   10,  -90,   10,  -84,   10,  -20,   10, -104,   10,  -92,
	   10,  -80,   10,  -22,   10,  -79,   10, -107,   10, -104,   10,  -20,
	   10,  -89,   10, -128,   10,  -21,   10,  -89,   10, -116,   10,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,   10,   32,   10,   10,  -22,  -21,  -20,  -19,   10,
	   32,   35,   37,   42,   64,    9,   13,  -73,  -72,   10,  -72,   10,
	  -21,   10,  -97,  -90,   10,  -84,   10,  -21,   10,  -87,   10,  -76,
	   10,  -84,   10,  -22,   10,  -77,   10,  -96,   10,  -80,   10,  -21,
	   10, -118,   10,  -91,   10,   10,   58, -117,  -89,  -88,  -80,   10,
	  -88,   10, -116,   10,  -20,   10, -107,  -99,   10,  -67,   10,  -68,
	   10,  -68,   10,  -20,   10,  -96,   10, -128,   10,  -80,   10,  -22,
	   10,  -78,   10,  -67,   10, -117,  -95,   10, -100,   10,  -21,   10,
	 -126,   10, -104,   10,  -21,   10,  -90,   10,  -84,   10,  -20,   10,
	 -104,   10,  -92,   10,   10,   32,   58,  -22,   10,  -80,   10, -100,
	   10,  -20,   10, -102,   10, -108,   10,  -80,   10,  -22,   10,  -79,
	   10, -107,   10, -104,   10,  -20,   10,  -89,   10, -128,   10,  -21,
	   10,  -89,   10, -116,   10,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32, -120,
	   58,   10,   10,  -22,   10,   32,   35,  124,    9,   13,  -72,   10,
	  -80,   10,  -21,   10, -118,   10,  -91,   10,   10,   58,  -80,  -22,
	  -79, -107, -104,  -20,  -89, -128,  -21,  -89, -116,   34,   34,   10,
	   13,   10,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,
	   69,   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,
	   32,   13,   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,
	   12,   10,   32,   64,    9,   13,   32,  124,    9,   13,   10,   32,
	   92,  124,    9,   13,   10,   92,  124,   10,   92,   10,   32,   92,
	  124,    9,   13,  -22,  -21,  -20,  -19,   10,   32,   34,   35,   37,
	   42,   64,  124,    9,   13,  -84,   10,  -22,   10,  -77,   10,  -96,
	   10,  -80,   10,  -21,   10, -118,   10,  -91,   10,   10,   58, -117,
	  -89,  -88,   10,  -88,   10, -116,   10,  -20,   10, -107,  -99,   10,
	  -67,   10,  -68,   10,  -68,   10,  -20,   10,  -96,   10, -128,   10,
	 -117,  -95,   10, -100,   10,  -21,   10, -126,   10, -104,   10,  -21,
	   10,  -90,   10,  -84,   10,  -20,   10, -104,   10,  -92,   10,   10,
	   32,   58,  -22,   10,  -80,   10, -100,   10,  -20,   10, -102,   10,
	 -108,   10,  -80,   10,  -22,   10,  -79,   10, -107,   10, -104,   10,
	  -20,   10,  -89,   10, -128,   10,  -21,   10,  -89,   10, -116,   10,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,   10,   32,  -84,  -22,  -77,  -96,  -80,  -21,
	 -118,  -91,   58,   10,   10,  -22,  -21,  -20,   10,   32,   35,   37,
	   64,    9,   13,  -72,   10,  -80,   10,  -21,   10, -118,   10,  -91,
	   10,   10,   58,  -80,   10,  -80,   10,  -22,   10,  -78,   10,  -67,
	   10, -117, -104,   10, -100,   10,  -21,   10, -126,   10, -104,   10,
	  -21,   10,  -90,   10,  -84,   10,  -20,   10, -104,   10,  -92,   10,
	   10,   32,   58,  -22,   10,  -80,   10, -100,   10,  -20,   10, -102,
	   10, -108,   10, -120,   10,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   13,    2,    1,    1,    2,    1,    1,    1,    1,    2,    2,
	   12,    4,    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,   10,    3,    2,    2,    3,
	    2,    2,    2,    2,   12,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,   10,    3,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,   10,    3,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    5,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    1,    1,    5,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    2,    2,    3,    3,    3,    3,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    3,    5,    3,    2,    4,    3,    2,    4,
	   12,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    8,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    1,    1,    0,    0,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   15,   18,   20,   22,   25,   27,   29,   31,   33,   36,
	   39,   53,   58,   60,   62,   64,   67,   69,   71,   73,   75,   77,
	   79,   81,   83,   85,   87,   89,   91,   93,  105,  109,  112,  115,
	  119,  122,  125,  128,  131,  145,  149,  151,  153,  155,  157,  159,
	  161,  163,  165,  167,  169,  172,  174,  176,  178,  180,  182,  184,
	  186,  188,  190,  202,  206,  209,  212,  216,  219,  222,  225,  228,
	  231,  234,  237,  240,  243,  246,  249,  252,  255,  260,  263,  266,
	  269,  273,  276,  279,  282,  285,  288,  291,  295,  298,  301,  304,
	  307,  310,  313,  316,  319,  322,  325,  328,  331,  334,  337,  340,
	  343,  346,  349,  352,  355,  358,  361,  364,  367,  370,  373,  376,
	  379,  382,  385,  388,  391,  394,  397,  400,  403,  405,  407,  419,
	  423,  426,  429,  433,  436,  439,  442,  445,  448,  451,  454,  457,
	  460,  463,  466,  469,  472,  478,  481,  484,  487,  491,  494,  497,
	  500,  503,  506,  509,  512,  515,  518,  521,  525,  528,  531,  534,
	  537,  540,  543,  546,  549,  552,  555,  559,  562,  565,  568,  571,
	  574,  577,  580,  583,  586,  589,  592,  595,  598,  601,  604,  607,
	  610,  613,  616,  619,  622,  625,  628,  631,  634,  637,  640,  643,
	  646,  649,  652,  655,  657,  659,  661,  663,  670,  673,  676,  679,
	  682,  685,  688,  690,  692,  694,  696,  698,  700,  702,  704,  706,
	  708,  710,  712,  714,  717,  720,  725,  730,  735,  740,  744,  748,
	  751,  753,  755,  757,  759,  761,  763,  765,  767,  769,  771,  773,
	  775,  777,  779,  781,  783,  788,  795,  800,  804,  810,  814,  817,
	  823,  837,  840,  843,  846,  849,  852,  855,  858,  861,  864,  869,
	  872,  875,  878,  882,  885,  888,  891,  894,  897,  900,  904,  907,
	  910,  913,  916,  919,  922,  925,  928,  931,  934,  938,  941,  944,
	  947,  950,  953,  956,  959,  962,  965,  968,  971,  974,  977,  980,
	  983,  986,  989,  992,  995,  998, 1001, 1004, 1007, 1010, 1013, 1016,
	 1019, 1022, 1025, 1028, 1031, 1034, 1036, 1038, 1040, 1042, 1044, 1046,
	 1048, 1050, 1052, 1054, 1056, 1066, 1069, 1072, 1075, 1078, 1081, 1084,
	 1087, 1090, 1093, 1096, 1099, 1103, 1106, 1109, 1112, 1115, 1118, 1121,
	 1124, 1127, 1130, 1133, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158,
	 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194,
	 1197, 1200, 1202, 1204
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    3,    4,    5,    7,    6,    8,    9,   10,   11,   12,
	   13,    6,    0,   14,   15,    0,   16,    0,   17,    0,   18,   19,
	    0,   20,    0,   21,    0,   22,    0,   23,    0,   25,   26,   24,
	   28,   29,   27,    1,    2,    3,    4,    7,    6,    8,    9,   10,
	   11,   12,   13,    6,    0,   30,   31,   32,   33,    0,   23,    0,
	   34,    0,   35,    0,   36,   37,    0,   23,    0,   23,    0,   38,
	    0,   39,    0,   40,    0,   23,    0,   41,    0,   42,    0,   43,
	    0,   44,    0,   45,    0,   47,   46,   49,   48,   50,   51,   52,
	   53,   49,   54,   55,   56,   57,   55,   54,   48,   58,   59,   49,
	   48,   60,   49,   48,   61,   49,   48,   62,   63,   49,   48,   64,
	   49,   48,   65,   49,   48,   66,   49,   48,   67,   49,   48,   68,
	   69,   70,   71,   73,   72,   74,   75,   76,   77,   78,   79,   72,
	    0,   80,   81,   82,    0,   83,    0,   84,    0,   85,    0,   86,
	    0,   87,    0,   88,    0,   89,    0,   90,    0,   91,    0,   92,
	    0,   93,   94,    0,   95,    0,   96,    0,   97,    0,   98,    0,
	   99,    0,  100,    0,  101,    0,  103,  102,  105,  104,  106,  107,
	  108,  109,  105,  110,  111,  112,  113,  111,  110,  104,  114,  115,
	  105,  104,  116,  105,  104,  117,  105,  104,  118,  119,  105,  104,
	  120,  105,  104,  121,  105,  104,  122,  105,  104,  123,  105,  104,
	  124,  105,  104,  125,  105,  104,  126,  105,  104,  123,  105,  104,
	  127,  105,  104,  128,  105,  104,  129,  105,  104,  130,  105,  104,
	  105,  123,  104,  131,  132,  133,  105,  104,  123,  105,  104,  134,
	  105,  104,  135,  105,  104,  136,  137,  105,  104,  123,  105,  104,
	  123,  105,  104,  138,  105,  104,  139,  105,  104,  140,  105,  104,
	  123,  105,  104,  141,  142,  105,  104,  143,  105,  104,  144,  105,
	  104,  145,  105,  104,  146,  105,  104,  147,  105,  104,  148,  105,
	  104,  149,  105,  104,  150,  105,  104,  151,  105,  104,  130,  105,
	  104,  152,  105,  104,  153,  105,  104,  122,  105,  104,  154,  105,
	  104,  155,  105,  104,  156,  105,  104,  157,  105,  104,  158,  105,
	  104,  159,  105,  104,  160,  105,  104,  123,  105,  104,  105,  161,
	  104,  105,  162,  104,  105,  163,  104,  105,  164,  104,  105,  165,
	  104,  105,  166,  104,  105,  167,  104,  105,  168,  104,  105,  169,
	  104,  105,  170,  104,  105,  171,  104,  105,  172,  104,  105,  173,
	  104,  105,  174,  104,  105,  123,  104,  176,  175,  178,  177,  179,
	  180,  181,  182,  178,  183,  184,  185,  186,  184,  183,  177,  187,
	  188,  178,  177,  189,  178,  177,  190,  178,  177,  191,  192,  178,
	  177,  193,  178,  177,  194,  178,  177,  195,  178,  177,  196,  178,
	  177,  197,  178,  177,  198,  178,  177,  199,  178,  177,  196,  178,
	  177,  200,  178,  177,  201,  178,  177,  202,  178,  177,  203,  178,
	  177,  178,  196,  177,  204,  205,  206,  207,  178,  177,  196,  178,
	  177,  208,  178,  177,  209,  178,  177,  210,  211,  178,  177,  196,
	  178,  177,  196,  178,  177,  212,  178,  177,  213,  178,  177,  214,
	  178,  177,  196,  178,  177,  215,  178,  177,  216,  178,  177,  217,
	  178,  177,  203,  178,  177,  218,  219,  178,  177,  220,  178,  177,
	  221,  178,  177,  222,  178,  177,  223,  178,  177,  224,  178,  177,
	  225,  178,  177,  226,  178,  177,  227,  178,  177,  228,  178,  177,
	  229,  178,  177,  178,  230,  196,  177,  231,  178,  177,  232,  178,
	  177,  233,  178,  177,  234,  178,  177,  235,  178,  177,  203,  178,
	  177,  236,  178,  177,  237,  178,  177,  195,  178,  177,  238,  178,
	  177,  239,  178,  177,  240,  178,  177,  241,  178,  177,  242,  178,
	  177,  243,  178,  177,  244,  178,  177,  196,  178,  177,  178,  245,
	  177,  178,  246,  177,  178,  247,  177,  178,  248,  177,  178,  249,
	  177,  178,  250,  177,  178,  251,  177,  178,  252,  177,  178,  253,
	  177,  178,  254,  177,  178,  255,  177,  178,  256,  177,  178,  257,
	  177,  178,  258,  177,  178,  196,  177,  259,    0,  260,    0,  262,
	  261,  264,  263,  265,  264,  266,  267,  267,  266,  263,  268,  264,
	  263,  269,  264,  263,  270,  264,  263,  271,  264,  263,  272,  264,
	  263,  264,  273,  263,  274,    0,  275,    0,   22,    0,  276,    0,
	  277,    0,  278,    0,  279,    0,  280,    0,  281,    0,  282,    0,
	   23,    0,  283,    0,  284,    0,  286,  287,  285,  289,  290,  288,
	  293,  292,  294,  292,  291,  297,  296,  298,  296,  295,  297,  296,
	  299,  296,  295,  297,  296,  300,  296,  295,  302,  301,  301,    0,
	    7,  303,  303,    0,  305,  306,  304,    7,    0,  307,    0,  308,
	    0,  309,    0,  310,    0,  311,    0,  312,    0,  313,    0,  314,
	    0,  315,    0,  316,    0,  317,    0,  318,    0,  319,    0,  320,
	    0,   23,    0,    0,    0,    0,    0,  321,  322,  323,  322,  322,
	  325,  324,  321,    7,  326,   12,  326,    0,  327,  328,  327,    0,
	  331,  330,  332,  333,  330,  329,    0,  335,  336,  334,    0,  335,
	  334,  331,  337,  335,  336,  337,  334,  338,  339,  340,  341,  331,
	  342,  343,  344,  345,  346,  347,  348,  342,    0,  349,   49,   48,
	  350,   49,   48,  351,   49,   48,   67,   49,   48,  352,   49,   48,
	  353,   49,   48,  354,   49,   48,  355,   49,   48,   49,   67,   48,
	  356,  357,  358,   49,   48,   67,   49,   48,  359,   49,   48,  360,
	   49,   48,  361,  362,   49,   48,   67,   49,   48,   67,   49,   48,
	  363,   49,   48,  364,   49,   48,  365,   49,   48,   67,   49,   48,
	  366,  367,   49,   48,  368,   49,   48,  369,   49,   48,  370,   49,
	   48,  371,   49,   48,  372,   49,   48,  373,   49,   48,  374,   49,
	   48,  375,   49,   48,  376,   49,   48,  377,   49,   48,   49,  378,
	   67,   48,  379,   49,   48,  380,   49,   48,  381,   49,   48,  382,
	   49,   48,  383,   49,   48,  355,   49,   48,  384,   49,   48,  385,
	   49,   48,   66,   49,   48,  386,   49,   48,  387,   49,   48,  388,
	   49,   48,  389,   49,   48,  390,   49,   48,  391,   49,   48,  392,
	   49,   48,   67,   49,   48,   49,  393,   48,   49,  394,   48,   49,
	  395,   48,   49,  396,   48,   49,  397,   48,   49,  398,   48,   49,
	  399,   48,   49,  400,   48,   49,  401,   48,   49,  402,   48,   49,
	  403,   48,   49,  404,   48,   49,  405,   48,   49,  406,   48,   49,
	   67,   48,  407,    0,  408,    0,  409,    0,   23,    0,  410,    0,
	  411,    0,  412,    0,  413,    0,  414,    0,  416,  415,  418,  417,
	  419,  420,  421,  418,  422,  423,  424,  423,  422,  417,  425,  418,
	  417,  426,  418,  417,  427,  418,  417,  428,  418,  417,  429,  418,
	  417,  418,  430,  417,  431,  418,  417,  432,  418,  417,  433,  418,
	  417,  434,  418,  417,  429,  418,  417,  435,  436,  418,  417,  437,
	  418,  417,  438,  418,  417,  439,  418,  417,  440,  418,  417,  441,
	  418,  417,  442,  418,  417,  443,  418,  417,  444,  418,  417,  445,
	  418,  417,  446,  418,  417,  418,  447,  430,  417,  448,  418,  417,
	  449,  418,  417,  450,  418,  417,  451,  418,  417,  452,  418,  417,
	  429,  418,  417,  429,  418,  417,  418,  453,  417,  418,  454,  417,
	  418,  455,  417,  418,  456,  417,  418,  457,  417,  418,  458,  417,
	  418,  459,  417,  418,  460,  417,  418,  461,  417,  418,  462,  417,
	  418,  463,  417,  418,  464,  417,  418,  465,  417,  418,  466,  417,
	  467,    0,    6,    0,  468,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,   13,   41,  221,  385,   12,   12,  229,  239,  241,  255,
	  256,  259,    3,  333,    4,    5,    6,  329,    7,    8,    9,   10,
	   11,   12,  240,   11,   12,  240,   14,   15,   20,   24,   16,   17,
	   18,   19,   21,   22,   23,   25,   26,   27,   28,   29,   30,   31,
	   30,   31,   32,  274,  285,  306,   31,   12,  314,  328,   33,  269,
	   34,   35,   36,  265,   37,   38,   39,   40,    2,   13,   41,  221,
	   12,   12,  229,  239,  241,  255,  256,  259,   42,  207,  218,   43,
	   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,  128,   54,
	   55,   56,   57,   58,   59,   60,   61,   62,   61,   62,   63,   80,
	   91,  105,   62,   12,  113,  127,   64,   75,   65,   66,   67,   71,
	   68,   69,   70,   40,   72,   73,   74,   76,   77,   78,   79,   81,
	   82,   87,   83,   84,   85,   86,   88,   89,   90,   92,  102,   93,
	   94,   95,   96,   97,   98,   99,  100,  101,  103,  104,  106,  107,
	  108,  109,  110,  111,  112,  114,  115,  116,  117,  118,  119,  120,
	  121,  122,  123,  124,  125,  126,   12,  129,  130,  129,  130,  131,
	  148,  163,  184,  130,   12,  192,  206,  132,  143,  133,  134,  135,
	  139,  136,  137,  138,   40,  140,  141,  142,  144,  145,  146,  147,
	  149,  150,  155,  159,  151,  152,  153,  154,  156,  157,  158,  160,
	  161,  162,  164,  181,  165,  166,  167,  168,  169,  170,  171,  172,
	  173,  174,  175,  176,  177,  178,  179,  180,  182,  183,  185,  186,
	  187,  188,  189,  190,  191,  193,  194,  195,  196,  197,  198,  199,
	  200,  201,  202,  203,  204,  205,   12,  208,  209,  210,  211,  210,
	  211,  212,  211,   12,  213,  214,  215,  216,  217,   40,  219,  220,
	  222,  223,  224,  225,  226,  227,  228,  230,  231,  232,  233,  232,
	  232,  233,  232,  234,  234,  234,  235,  234,  234,  234,  235,  236,
	  237,  238,   12,  238,  239,   12,  240,  242,  243,  244,  245,  246,
	  247,  248,  249,  250,  251,  252,  253,  254,  387,  257,  258,   12,
	  257,  256,  258,  259,  260,  261,  263,  264,  262,  260,  261,  262,
	  260,  263,    2,   13,   41,  221,  264,  229,  239,  241,  255,  256,
	  259,  266,  267,  268,  270,  271,  272,  273,  275,  276,  281,  277,
	  278,  279,  280,  282,  283,  284,  286,  303,  287,  288,  289,  290,
	  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
	  304,  305,  307,  308,  309,  310,  311,  312,  313,  315,  316,  317,
	  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,   12,  330,
	  331,  332,  334,  335,  336,  337,  338,  339,  340,  339,  340,  341,
	  347,  352,  340,   12,  371,  342,  343,  344,  345,  346,   40,  348,
	  349,  350,  351,  353,  370,  354,  355,  356,  357,  358,  359,  360,
	  361,  362,  363,  364,  365,  366,  367,  368,  369,  372,  373,  374,
	  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,   12,  386,
	    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,   29,   29,   29,    0,    0,   54,    3,    1,    0,   29,
	    1,   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  149,  126,    0,  110,   23,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,   84,   84,   84,   84,    0,   72,   33,   84,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   15,   63,   63,   63,   63,
	   31,  130,   60,   57,   31,   63,   57,   66,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,   84,
	   84,   84,    0,   78,   33,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   19,   57,  144,    0,   54,   84,
	   84,   84,   84,    0,   75,   33,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   17,    0,    0,   57,  144,    0,
	   54,   84,    0,   81,    0,    0,    0,    0,    0,   21,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,  139,   48,
	    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,
	    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,  118,
	   27,   51,    0,    0,    0,   37,   37,   54,   37,   87,    0,    0,
	   39,    0,   96,   96,   96,   96,    0,   93,   90,   41,   96,   90,
	   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,    0,
	    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,
	   84,   84,    0,   69,   33,    0,    0,    0,    0,    0,   13,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
	    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 387;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 579 "java/src/main/java/gherkin/lexer/Ko.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
    
// line 586 "java/src/main/java/gherkin/lexer/Ko.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 847 "java/src/main/java/gherkin/lexer/Ko.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 879 "java/src/main/java/gherkin/lexer/Ko.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ko.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

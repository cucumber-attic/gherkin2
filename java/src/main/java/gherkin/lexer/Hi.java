
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Hi implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"


  private final Listener listener;

  public Hi(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Hi.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   12,   13,   22,   23,   24,   25,   26,   27,   28,   29,
	   31,   33,   44,   45,   46,   48,   50,   55,   60,   65,   70,   74,
	   78,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
	   91,   92,   93,   94,   95,  100,  107,  112,  116,  122,  125,  127,
	  133,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
	  155,  156,  157,  158,  159,  160,  161,  162,  169,  171,  173,  175,
	  177,  179,  181,  183,  185,  187,  189,  191,  193,  195,  197,  199,
	  201,  203,  205,  207,  218,  219,  220,  221,  222,  223,  224,  225,
	  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  237,  238,
	  239,  240,  241,  243,  244,  246,  247,  248,  249,  250,  251,  252,
	  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  265,
	  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
	  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
	  298,  300,  309,  311,  313,  315,  317,  319,  321,  323,  325,  327,
	  329,  331,  333,  335,  337,  339,  341,  343,  345,  347,  349,  351,
	  353,  355,  357,  360,  362,  364,  366,  368,  370,  372,  375,  377,
	  379,  381,  383,  385,  387,  389,  391,  393,  395,  397,  399,  401,
	  403,  405,  407,  409,  411,  413,  415,  417,  419,  421,  423,  425,
	  427,  429,  431,  433,  435,  437,  439,  441,  443,  445,  447,  449,
	  451,  453,  455,  457,  459,  461,  463,  465,  467,  469,  471,  473,
	  475,  477,  478,  479,  488,  490,  499,  501,  503,  505,  507,  509,
	  511,  513,  515,  517,  519,  521,  523,  525,  527,  529,  531,  533,
	  535,  537,  539,  541,  543,  545,  547,  550,  552,  554,  556,  558,
	  561,  563,  566,  568,  570,  572,  574,  576,  578,  580,  582,  584,
	  586,  588,  590,  592,  594,  596,  598,  600,  603,  605,  607,  609,
	  611,  613,  615,  617,  619,  621,  623,  625,  627,  629,  631,  633,
	  635,  637,  639,  641,  643,  645,  647,  649,  651,  653,  655,  657,
	  659,  661,  663,  665,  667,  669,  671,  673,  675,  677,  679,  681,
	  683,  685,  687,  689,  691,  693,  695,  697,  699,  701,  703,  705,
	  707,  709,  711,  713,  715,  717,  719,  721,  723,  725,  727,  729,
	  731,  733,  735,  737,  739,  741,  743,  745,  747,  749,  751,  753,
	  755,  757,  758,  759,  760,  761,  762,  763,  764,  765,  766,  767,
	  768,  769,  770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
	  780,  781,  782,  791,  793,  802,  804,  806,  808,  810,  812,  814,
	  816,  818,  820,  822,  824,  826,  828,  830,  832,  834,  836,  838,
	  840,  842,  844,  846,  848,  850,  853,  855,  857,  859,  861,  863,
	  865,  868,  870,  872,  874,  876,  878,  880,  882,  884,  886,  888,
	  890,  892,  894,  896,  898,  900,  902,  905,  907,  909,  911,  913,
	  915,  917,  919,  921,  923,  925,  927,  929,  931,  933,  935,  937,
	  939,  941,  943,  945,  947,  949,  951,  953,  955,  957,  959,  961,
	  963,  965,  967,  969,  971,  973,  975,  977,  979,  981,  983,  985,
	  987,  989,  991,  993,  995,  997,  999, 1001, 1003, 1005, 1007, 1009,
	 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	 1037, 1045, 1047, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067,
	 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1088, 1090, 1092,
	 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116,
	 1118, 1120, 1122, 1124, 1126, 1129, 1131, 1133, 1135, 1137, 1139, 1141,
	 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165,
	 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189,
	 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213,
	 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237,
	 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261,
	 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1276, 1277
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -32,  -17,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	  -92, -123, -119, -108, -102, -100,  -92,  -86,  -81,  -80,  -32,  -92,
	 -105,  -32,  -92,  -80,   32,   10,   13,   10,   13,  -32,   10,   32,
	   34,   35,   37,   42,   64,  124,    9,   13,   34,   34,   10,   13,
	   10,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,
	    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,
	   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   13,
	   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,
	   32,   64,    9,   13,   32,  124,    9,   13,   10,   32,   92,  124,
	    9,   13,   10,   92,  124,   10,   92,   10,   32,   92,  124,    9,
	   13,  -32,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	  -32,  -92,  -90,  -32,  -92,  -66,  -32,  -92,  -71,  -32,  -92,  -80,
	  -32,  -92,  -93,   58,   10,   10,  -32,   10,   32,   35,  124,    9,
	   13,  -92,   10,  -80,   10,  -32,   10,  -91,   10, -126,   10,  -32,
	   10,  -92,   10,  -86,   10,   10,   32,  -32,   10,  -92,   10,  -78,
	   10,  -32,   10,  -91,   10, -121,   10,  -32,   10,  -92,   10, -106,
	   10,   10,   58,  -32,   10,   32,   34,   35,   37,   42,   64,  124,
	    9,   13,  -32,  -91, -126,  -32,  -92, -126,  -32,  -92, -107,  -32,
	  -92,  -65,  -32,  -92,  -84,  -32,  -92,  -91,  -84,  -32,  -92,  -66,
	  -32,  -92,  -91,  -80,  -32,   32,  -92,  -65,  -32,  -92,  -90,  -32,
	  -91, -125,  -32,  -92,  -74,  -32,  -91, -115,  -32,  -92,  -81,   32,
	   58,  -32,  -92,  -80,  -32,  -91, -126,  -32,  -92,  -86,  -32,  -92,
	  -80,  -32,  -91, -121,  -32,  -92, -106,  -32,  -92,  -66,   58,   10,
	   10,  -32,   10,   32,   35,   37,   42,   64,    9,   13,  -92,   10,
	 -123, -108, -102, -100,  -92,  -86,  -81,  -80,   10,  -32,   10,  -92,
	   10, -105,   10,  -32,   10,  -92,   10,  -80,   10,   10,   32,  -32,
	   10,  -91,   10, -126,   10,  -32,   10,  -92,   10, -126,   10,  -32,
	   10,  -92,   10, -107,   10,  -32,   10,  -92,   10,  -65,   10,  -32,
	   10,  -92,   10,  -84,   10,  -32,   10,  -92,   10,  -91,  -84,   10,
	  -32,   10,  -92,   10,  -66,   10,  -32,   10,  -92,   10,  -80,   10,
	  -32,   10,   32,  -92,   10,  -65,   10,  -32,   10,  -92,   10,  -90,
	   10,  -32,   10,  -91,   10, -125,   10,  -32,   10,  -92,   10,  -74,
	   10,  -32,   10,  -91,   10, -115,   10,  -32,   10,  -92,   10,  -81,
	   10,   10,   58,  -32,   10,  -92,   10,  -90,   10,  -32,   10,  -91,
	   10, -126,   10,  -32,   10,  -92,   10,  -86,   10,   10,   32,  -32,
	   10,  -92,   10,  -78,   10,  -32,   10,  -91,   10, -121,   10,  -32,
	   10,  -92,   10, -106,   10,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   10,  -32,
	   10,   32,   35,   37,   42,   64,    9,   13,  -92,   10, -123, -108,
	 -102, -100,  -92,  -86,  -81,  -80,   10,  -32,   10,  -92,   10, -105,
	   10,  -32,   10,  -92,   10,  -80,   10,   10,   32,  -32,   10,  -91,
	   10, -126,   10,  -32,   10,  -92,   10, -126,   10,  -32,   10,  -92,
	   10, -107,   10,  -32,   10,  -92,   10,  -65,   10,  -32,   10,  -92,
	   10,  -84,   10,  -32,   10,  -92,   10,  -91,  -84,   10,  -32,   10,
	  -92,   10,  -66,   10,  -32,   10,  -92,  -91,   10,  -80,   10,  -32,
	   10,   32,  -92,   10,  -65,   10,  -32,   10,  -92,   10,  -90,   10,
	  -32,   10,  -91,   10, -125,   10,  -32,   10,  -92,   10,  -74,   10,
	  -32,   10,  -91,   10, -115,   10,  -32,   10,  -92,   10,  -81,   10,
	   10,   32,   58,  -32,   10,  -92,   10,  -80,   10,  -32,   10,  -91,
	   10, -126,   10,  -32,   10,  -92,   10,  -86,   10,  -32,   10,  -92,
	   10,  -80,   10,  -32,   10,  -91,   10, -121,   10,  -32,   10,  -92,
	   10, -106,   10,  -32,   10,  -92,   10,  -66,   10,   10,   58, -125,
	   10,  -32,   10,  -92,   10,  -73,   10,  -32,   10,  -91,   10, -115,
	   10,  -32,   10,  -92,   10,  -96,   10,  -32,   10,  -92,   10,  -83,
	   10,  -32,   10,  -91,   10, -126,   10,  -32,   10,  -92,   10,  -82,
	   10,  -32,   10,  -92,   10,  -65,   10,  -32,   10,  -92,   10,  -90,
	   10,  -32,   10,  -91,   10, -126,   10,  -32,   10,  -92,   10,  -86,
	   10,   10,   32,  -32,   10,  -92,   10,  -78,   10,  -32,   10,  -91,
	   10, -121,   10,  -32,   10,  -92,   10, -106,   10,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37, -125,  -32,  -92,  -73,  -32,  -91, -115,  -32,  -92,  -96,  -32,
	  -92,  -83,  -32,  -91, -126,  -32,  -92,  -82,  -32,  -92,  -65,   58,
	   10,   10,  -32,   10,   32,   35,   37,   42,   64,    9,   13,  -92,
	   10, -123, -108, -102, -100,  -92,  -86,  -81,  -80,   10,  -32,   10,
	  -92,   10, -105,   10,  -32,   10,  -92,   10,  -80,   10,   10,   32,
	  -32,   10,  -91,   10, -126,   10,  -32,   10,  -92,   10, -126,   10,
	  -32,   10,  -92,   10, -107,   10,  -32,   10,  -92,   10,  -65,   10,
	  -32,   10,  -92,   10,  -84,   10,  -32,   10,  -92,   10,  -91,  -84,
	   10,  -32,   10,  -92,   10,  -66,   10,  -32,   10,  -92,   10,  -80,
	   10,  -32,   10,   32,  -92,   10,  -65,   10,  -32,   10,  -92,   10,
	  -90,   10,  -32,   10,  -91,   10, -125,   10,  -32,   10,  -92,   10,
	  -74,   10,  -32,   10,  -91,   10, -115,   10,  -32,   10,  -92,   10,
	  -81,   10,   10,   32,   58,  -32,   10,  -92,   10,  -80,   10,  -32,
	   10,  -91,   10, -126,   10,  -32,   10,  -92,   10,  -86,   10,  -32,
	   10,  -92,   10,  -80,   10,  -32,   10,  -91,   10, -121,   10,  -32,
	   10,  -92,   10, -106,   10,  -32,   10,  -92,   10,  -66,   10,   10,
	   58,  -32,   10,  -92,   10,  -90,   10,  -32,   10,  -91,   10, -126,
	   10,  -32,   10,  -92,   10,  -86,   10,   10,   32,  -32,   10,  -92,
	   10,  -78,   10,  -32,   10,  -91,   10, -121,   10,  -32,   10,  -92,
	   10, -106,   10,   10,   95,   10,   70,   10,   69,   10,   65,   10,
	   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,
	   78,   10,   68,   10,   95,   10,   37,  -32,  -92,  -90,  -32,  -91,
	 -126,  -32,  -92,  -86,   32,  -32,  -92,  -78,  -32,  -91, -121,  -32,
	  -92, -106,   58,   10,   10,  -32,   10,   32,   35,   37,   64,    9,
	   13,  -92,   10, -119,  -86,  -80,   10,  -32,   10,  -92,   10,  -90,
	   10,  -32,   10,  -92,   10,  -66,   10,  -32,   10,  -92,   10,  -71,
	   10,  -32,   10,  -92,   10,  -80,   10,  -32,   10,  -92,   10,  -93,
	   10,   10,   58,  -32,   10,  -92,  -91,   10,  -80,   10,  -32,   10,
	  -92,   10,  -65,   10,  -32,   10,  -92,   10,  -90,   10,  -32,   10,
	  -91,   10, -125,   10,  -32,   10,  -92,   10,  -74,   10,  -32,   10,
	  -91,   10, -115,   10,  -32,   10,  -92,   10,  -81,   10,   10,   32,
	   58,  -32,   10,  -92,   10,  -80,   10,  -32,   10,  -91,   10, -126,
	   10,  -32,   10,  -92,   10,  -86,   10,  -32,   10,  -92,   10,  -80,
	   10,  -32,   10,  -91,   10, -121,   10,  -32,   10,  -92,   10, -106,
	   10,  -32,   10,  -92,   10,  -66,   10, -125,   10,  -32,   10,  -92,
	   10,  -73,   10,  -32,   10,  -91,   10, -115,   10,  -32,   10,  -92,
	   10,  -96,   10,  -32,   10,  -92,   10,  -83,   10,  -32,   10,  -91,
	   10, -126,   10,  -32,   10,  -92,   10,  -82,   10,  -32,   10,  -92,
	   10,  -65,   10,  -32,   10,  -91,   10, -126,   10,  -32,   10,  -92,
	   10,  -86,   10,   10,   32,  -32,   10,  -92,   10,  -78,   10,  -32,
	   10,  -91,   10, -121,   10,  -32,   10,  -92,   10, -106,   10,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   10,    1,    9,    1,    1,    1,    1,    1,    1,    1,    2,
	    2,    9,    1,    1,    2,    2,    3,    3,    3,    3,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    3,    5,    3,    2,    4,    3,    2,    4,
	    9,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    5,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    9,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
	    1,    1,    2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
	    2,    9,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    7,    2,    9,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    3,
	    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    7,    2,    9,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    6,    2,    4,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    1,    1,    0,    0,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   12,   14,   24,   26,   28,   30,   32,   34,   36,   38,
	   41,   44,   55,   57,   59,   62,   65,   70,   75,   80,   85,   89,
	   93,   96,   98,  100,  102,  104,  106,  108,  110,  112,  114,  116,
	  118,  120,  122,  124,  126,  131,  138,  143,  147,  153,  157,  160,
	  166,  177,  179,  181,  183,  185,  187,  189,  191,  193,  195,  197,
	  199,  201,  203,  205,  207,  209,  211,  213,  220,  223,  226,  229,
	  232,  235,  238,  241,  244,  247,  250,  253,  256,  259,  262,  265,
	  268,  271,  274,  277,  288,  290,  292,  294,  296,  298,  300,  302,
	  304,  306,  308,  310,  312,  314,  316,  318,  320,  322,  325,  327,
	  329,  331,  333,  336,  338,  341,  343,  345,  347,  349,  351,  353,
	  355,  357,  359,  361,  363,  365,  367,  369,  371,  373,  375,  378,
	  380,  382,  384,  386,  388,  390,  392,  394,  396,  398,  400,  402,
	  404,  406,  408,  410,  412,  414,  416,  418,  420,  422,  424,  426,
	  435,  438,  448,  451,  454,  457,  460,  463,  466,  469,  472,  475,
	  478,  481,  484,  487,  490,  493,  496,  499,  502,  505,  508,  511,
	  514,  517,  520,  524,  527,  530,  533,  536,  539,  542,  546,  549,
	  552,  555,  558,  561,  564,  567,  570,  573,  576,  579,  582,  585,
	  588,  591,  594,  597,  600,  603,  606,  609,  612,  615,  618,  621,
	  624,  627,  630,  633,  636,  639,  642,  645,  648,  651,  654,  657,
	  660,  663,  666,  669,  672,  675,  678,  681,  684,  687,  690,  693,
	  696,  699,  701,  703,  712,  715,  725,  728,  731,  734,  737,  740,
	  743,  746,  749,  752,  755,  758,  761,  764,  767,  770,  773,  776,
	  779,  782,  785,  788,  791,  794,  797,  801,  804,  807,  810,  813,
	  817,  820,  824,  827,  830,  833,  836,  839,  842,  845,  848,  851,
	  854,  857,  860,  863,  866,  869,  872,  875,  879,  882,  885,  888,
	  891,  894,  897,  900,  903,  906,  909,  912,  915,  918,  921,  924,
	  927,  930,  933,  936,  939,  942,  945,  948,  951,  954,  957,  960,
	  963,  966,  969,  972,  975,  978,  981,  984,  987,  990,  993,  996,
	  999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032,
	 1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068,
	 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104,
	 1107, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130,
	 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154,
	 1156, 1158, 1160, 1169, 1172, 1182, 1185, 1188, 1191, 1194, 1197, 1200,
	 1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236,
	 1239, 1242, 1245, 1248, 1251, 1254, 1258, 1261, 1264, 1267, 1270, 1273,
	 1276, 1280, 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310,
	 1313, 1316, 1319, 1322, 1325, 1328, 1331, 1335, 1338, 1341, 1344, 1347,
	 1350, 1353, 1356, 1359, 1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383,
	 1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419,
	 1422, 1425, 1428, 1431, 1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455,
	 1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491,
	 1494, 1497, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 1514, 1516, 1518,
	 1520, 1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 1542,
	 1544, 1552, 1555, 1560, 1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584,
	 1587, 1590, 1593, 1596, 1599, 1602, 1605, 1608, 1611, 1615, 1618, 1621,
	 1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 1654, 1657,
	 1660, 1663, 1666, 1669, 1672, 1676, 1679, 1682, 1685, 1688, 1691, 1694,
	 1697, 1700, 1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 1727, 1730,
	 1733, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 1766,
	 1769, 1772, 1775, 1778, 1781, 1784, 1787, 1790, 1793, 1796, 1799, 1802,
	 1805, 1808, 1811, 1814, 1817, 1820, 1823, 1826, 1829, 1832, 1835, 1838,
	 1841, 1844, 1847, 1850, 1853, 1856, 1859, 1862, 1865, 1868, 1871, 1874,
	 1877, 1880, 1883, 1886, 1889, 1892, 1895, 1897, 1899
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    4,    3,    5,    6,    7,    8,    9,   10,    3,    0,
	   11,    0,   12,   13,   14,   15,   16,   17,   18,   19,   20,    0,
	   21,    0,   22,    0,   14,    0,   23,    0,   24,    0,   25,    0,
	   26,    0,   28,   29,   27,   31,   32,   30,    1,    4,    3,    5,
	    6,    7,    8,    9,   10,    3,    0,   33,    0,   34,    0,   36,
	   37,   35,   39,   40,   38,   43,   42,   44,   42,   41,   47,   46,
	   48,   46,   45,   47,   46,   49,   46,   45,   47,   46,   50,   46,
	   45,   52,   51,   51,    0,    4,   53,   53,    0,   55,   56,   54,
	    4,    0,   57,    0,   58,    0,   59,    0,   60,    0,   61,    0,
	   62,    0,   63,    0,   64,    0,   65,    0,   66,    0,   67,    0,
	   68,    0,   69,    0,   70,    0,    0,    0,    0,    0,   71,   72,
	   73,   72,   72,   75,   74,   71,    4,   76,    9,   76,    0,   77,
	   78,   77,    0,   81,   80,   82,   83,   80,   79,    0,   85,   86,
	   84,    0,   85,   84,   81,   87,   85,   86,   87,   84,   88,   81,
	   89,   90,   91,   92,   93,   94,   95,   89,    0,   96,    0,   97,
	    0,   98,    0,   99,    0,  100,    0,  101,    0,  102,    0,  103,
	    0,  104,    0,  105,    0,  106,    0,  107,    0,  108,    0,  109,
	    0,  110,    0,  111,    0,  113,  112,  115,  114,  116,  115,  117,
	  118,  118,  117,  114,  119,  115,  114,  120,  115,  114,  121,  115,
	  114,  122,  115,  114,  123,  115,  114,  124,  115,  114,  125,  115,
	  114,  126,  115,  114,  115,  127,  114,  128,  115,  114,  129,  115,
	  114,  130,  115,  114,  131,  115,  114,  132,  115,  114,  133,  115,
	  114,  134,  115,  114,  135,  115,  114,  136,  115,  114,  115,  137,
	  114,  138,  140,  139,  141,  142,  143,  144,  145,  146,  139,    0,
	  147,    0,  148,    0,  149,    0,  150,    0,  151,    0,  152,    0,
	  153,    0,  154,    0,  155,    0,  156,    0,  157,    0,   25,    0,
	  158,    0,  159,    0,   25,    0,  160,    0,  161,    0,  162,   25,
	    0,  163,    0,  164,    0,   25,    0,  165,    0,  166,  167,    0,
	  168,    0,  169,   26,    0,  170,    0,  171,    0,  172,    0,  173,
	    0,  174,    0,  175,    0,  176,    0,  177,    0,  178,    0,  179,
	    0,  180,    0,  181,    0,  182,    0,  183,    0,  184,    0,  185,
	    0,  186,    0,  187,  188,    0,  189,    0,  190,    0,  191,    0,
	  192,    0,  193,    0,  194,    0,  195,    0,  196,    0,  197,    0,
	  198,    0,  199,    0,  200,    0,  201,    0,  202,    0,  203,    0,
	  204,    0,  205,    0,  206,    0,  207,    0,  208,    0,  209,    0,
	  210,    0,  212,  211,  214,  213,  215,  214,  216,  217,  218,  219,
	  217,  216,  213,  220,  214,  213,  221,  222,  223,  224,  225,  226,
	  227,  228,  214,  213,  229,  214,  213,  230,  214,  213,  222,  214,
	  213,  231,  214,  213,  232,  214,  213,  233,  214,  213,  214,  234,
	  213,  235,  214,  213,  236,  214,  213,  237,  214,  213,  238,  214,
	  213,  239,  214,  213,  240,  214,  213,  241,  214,  213,  242,  214,
	  213,  243,  214,  213,  244,  214,  213,  245,  214,  213,  233,  214,
	  213,  246,  214,  213,  247,  214,  213,  233,  214,  213,  248,  214,
	  213,  249,  214,  213,  250,  233,  214,  213,  251,  214,  213,  252,
	  214,  213,  233,  214,  213,  253,  214,  213,  254,  214,  213,  255,
	  214,  213,  256,  214,  234,  213,  257,  214,  213,  258,  214,  213,
	  259,  214,  213,  260,  214,  213,  261,  214,  213,  262,  214,  213,
	  263,  214,  213,  264,  214,  213,  265,  214,  213,  266,  214,  213,
	  267,  214,  213,  268,  214,  213,  269,  214,  213,  270,  214,  213,
	  271,  214,  213,  272,  214,  213,  273,  214,  213,  214,  234,  213,
	  274,  214,  213,  275,  214,  213,  243,  214,  213,  276,  214,  213,
	  277,  214,  213,  278,  214,  213,  279,  214,  213,  280,  214,  213,
	  281,  214,  213,  214,  282,  213,  283,  214,  213,  284,  214,  213,
	  285,  214,  213,  286,  214,  213,  287,  214,  213,  288,  214,  213,
	  289,  214,  213,  290,  214,  213,  273,  214,  213,  214,  291,  213,
	  214,  292,  213,  214,  293,  213,  214,  294,  213,  214,  295,  213,
	  214,  296,  213,  214,  297,  213,  214,  298,  213,  214,  299,  213,
	  214,  300,  213,  214,  301,  213,  214,  302,  213,  214,  303,  213,
	  214,  304,  213,  306,  305,  308,  307,  309,  308,  310,  311,  312,
	  313,  311,  310,  307,  314,  308,  307,  315,  316,  317,  318,  319,
	  320,  321,  322,  308,  307,  323,  308,  307,  324,  308,  307,  316,
	  308,  307,  325,  308,  307,  326,  308,  307,  327,  308,  307,  308,
	  328,  307,  329,  308,  307,  330,  308,  307,  331,  308,  307,  332,
	  308,  307,  333,  308,  307,  334,  308,  307,  335,  308,  307,  336,
	  308,  307,  337,  308,  307,  338,  308,  307,  339,  308,  307,  327,
	  308,  307,  340,  308,  307,  341,  308,  307,  327,  308,  307,  342,
	  308,  307,  343,  308,  307,  344,  327,  308,  307,  345,  308,  307,
	  346,  308,  307,  327,  308,  307,  347,  308,  307,  348,  349,  308,
	  307,  350,  308,  307,  351,  308,  328,  307,  352,  308,  307,  353,
	  308,  307,  354,  308,  307,  355,  308,  307,  356,  308,  307,  357,
	  308,  307,  358,  308,  307,  359,  308,  307,  360,  308,  307,  361,
	  308,  307,  362,  308,  307,  363,  308,  307,  364,  308,  307,  365,
	  308,  307,  366,  308,  307,  367,  308,  307,  368,  308,  307,  308,
	  369,  328,  307,  370,  308,  307,  371,  308,  307,  372,  308,  307,
	  373,  308,  307,  374,  308,  307,  375,  308,  307,  376,  308,  307,
	  377,  308,  307,  378,  308,  307,  379,  308,  307,  380,  308,  307,
	  381,  308,  307,  382,  308,  307,  383,  308,  307,  384,  308,  307,
	  385,  308,  307,  386,  308,  307,  387,  308,  307,  388,  308,  307,
	  389,  308,  307,  390,  308,  307,  308,  328,  307,  391,  308,  307,
	  392,  308,  307,  393,  308,  307,  394,  308,  307,  395,  308,  307,
	  396,  308,  307,  397,  308,  307,  398,  308,  307,  399,  308,  307,
	  400,  308,  307,  401,  308,  307,  402,  308,  307,  403,  308,  307,
	  404,  308,  307,  405,  308,  307,  406,  308,  307,  407,  308,  307,
	  408,  308,  307,  409,  308,  307,  410,  308,  307,  411,  308,  307,
	  390,  308,  307,  412,  308,  307,  413,  308,  307,  337,  308,  307,
	  414,  308,  307,  415,  308,  307,  416,  308,  307,  417,  308,  307,
	  418,  308,  307,  419,  308,  307,  308,  420,  307,  421,  308,  307,
	  422,  308,  307,  423,  308,  307,  424,  308,  307,  425,  308,  307,
	  426,  308,  307,  427,  308,  307,  428,  308,  307,  390,  308,  307,
	  308,  429,  307,  308,  430,  307,  308,  431,  307,  308,  432,  307,
	  308,  433,  307,  308,  434,  307,  308,  435,  307,  308,  436,  307,
	  308,  437,  307,  308,  438,  307,  308,  439,  307,  308,  440,  307,
	  308,  441,  307,  308,  442,  307,  443,    0,  444,    0,  445,    0,
	  446,    0,  447,    0,  448,    0,  449,    0,  450,    0,  451,    0,
	  452,    0,  453,    0,  454,    0,  455,    0,  456,    0,  457,    0,
	  458,    0,  459,    0,  460,    0,  461,    0,  462,    0,  463,    0,
	  464,    0,  465,    0,  467,  466,  469,  468,  470,  469,  471,  472,
	  473,  474,  472,  471,  468,  475,  469,  468,  476,  477,  478,  479,
	  480,  481,  482,  483,  469,  468,  484,  469,  468,  485,  469,  468,
	  477,  469,  468,  486,  469,  468,  487,  469,  468,  488,  469,  468,
	  469,  489,  468,  490,  469,  468,  491,  469,  468,  492,  469,  468,
	  493,  469,  468,  494,  469,  468,  495,  469,  468,  496,  469,  468,
	  497,  469,  468,  498,  469,  468,  499,  469,  468,  500,  469,  468,
	  488,  469,  468,  501,  469,  468,  502,  469,  468,  488,  469,  468,
	  503,  469,  468,  504,  469,  468,  505,  488,  469,  468,  506,  469,
	  468,  507,  469,  468,  488,  469,  468,  508,  469,  468,  509,  469,
	  468,  510,  469,  468,  511,  469,  489,  468,  512,  469,  468,  513,
	  469,  468,  514,  469,  468,  515,  469,  468,  516,  469,  468,  517,
	  469,  468,  518,  469,  468,  519,  469,  468,  520,  469,  468,  521,
	  469,  468,  522,  469,  468,  523,  469,  468,  524,  469,  468,  525,
	  469,  468,  526,  469,  468,  527,  469,  468,  528,  469,  468,  469,
	  529,  489,  468,  530,  469,  468,  531,  469,  468,  532,  469,  468,
	  533,  469,  468,  534,  469,  468,  535,  469,  468,  536,  469,  468,
	  537,  469,  468,  538,  469,  468,  539,  469,  468,  540,  469,  468,
	  541,  469,  468,  542,  469,  468,  543,  469,  468,  544,  469,  468,
	  545,  469,  468,  546,  469,  468,  547,  469,  468,  548,  469,  468,
	  549,  469,  468,  550,  469,  468,  469,  489,  468,  551,  469,  468,
	  552,  469,  468,  498,  469,  468,  553,  469,  468,  554,  469,  468,
	  555,  469,  468,  556,  469,  468,  557,  469,  468,  558,  469,  468,
	  469,  559,  468,  560,  469,  468,  561,  469,  468,  562,  469,  468,
	  563,  469,  468,  564,  469,  468,  565,  469,  468,  566,  469,  468,
	  567,  469,  468,  550,  469,  468,  469,  568,  468,  469,  569,  468,
	  469,  570,  468,  469,  571,  468,  469,  572,  468,  469,  573,  468,
	  469,  574,  468,  469,  575,  468,  469,  576,  468,  469,  577,  468,
	  469,  578,  468,  469,  579,  468,  469,  580,  468,  469,  581,  468,
	  582,    0,  583,    0,  155,    0,  584,    0,  585,    0,  586,    0,
	  587,    0,  588,    0,  589,    0,  590,    0,  591,    0,  592,    0,
	  593,    0,  594,    0,  595,    0,  596,    0,  597,    0,  598,    0,
	  599,    0,  600,    0,  602,  601,  604,  603,  605,  604,  606,  607,
	  608,  607,  606,  603,  609,  604,  603,  610,  611,  612,  604,  603,
	  613,  604,  603,  614,  604,  603,  615,  604,  603,  616,  604,  603,
	  617,  604,  603,  618,  604,  603,  619,  604,  603,  620,  604,  603,
	  621,  604,  603,  622,  604,  603,  623,  604,  603,  624,  604,  603,
	  625,  604,  603,  626,  604,  603,  627,  604,  603,  604,  628,  603,
	  629,  604,  603,  630,  631,  604,  603,  632,  604,  603,  633,  604,
	  603,  634,  604,  603,  635,  604,  603,  636,  604,  603,  637,  604,
	  603,  638,  604,  603,  639,  604,  603,  640,  604,  603,  641,  604,
	  603,  642,  604,  603,  643,  604,  603,  644,  604,  603,  645,  604,
	  603,  646,  604,  603,  647,  604,  603,  648,  604,  603,  649,  604,
	  603,  650,  604,  603,  604,  651,  628,  603,  652,  604,  603,  653,
	  604,  603,  654,  604,  603,  655,  604,  603,  656,  604,  603,  657,
	  604,  603,  658,  604,  603,  659,  604,  603,  660,  604,  603,  661,
	  604,  603,  662,  604,  603,  663,  604,  603,  664,  604,  603,  665,
	  604,  603,  666,  604,  603,  667,  604,  603,  668,  604,  603,  669,
	  604,  603,  670,  604,  603,  671,  604,  603,  627,  604,  603,  672,
	  604,  603,  673,  604,  603,  674,  604,  603,  675,  604,  603,  676,
	  604,  603,  677,  604,  603,  678,  604,  603,  679,  604,  603,  680,
	  604,  603,  681,  604,  603,  682,  604,  603,  683,  604,  603,  684,
	  604,  603,  685,  604,  603,  686,  604,  603,  687,  604,  603,  688,
	  604,  603,  689,  604,  603,  690,  604,  603,  691,  604,  603,  692,
	  604,  603,  627,  604,  603,  693,  604,  603,  694,  604,  603,  695,
	  604,  603,  696,  604,  603,  697,  604,  603,  698,  604,  603,  604,
	  699,  603,  700,  604,  603,  701,  604,  603,  702,  604,  603,  703,
	  604,  603,  704,  604,  603,  705,  604,  603,  706,  604,  603,  707,
	  604,  603,  627,  604,  603,  604,  708,  603,  604,  709,  603,  604,
	  710,  603,  604,  711,  603,  604,  712,  603,  604,  713,  603,  604,
	  714,  603,  604,  715,  603,  604,  716,  603,  604,  717,  603,  604,
	  718,  603,  604,  719,  603,  604,  720,  603,  604,  721,  603,  722,
	    0,    3,    0,  723,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,  642,   13,   13,   14,   24,   26,   10,   40,   43,    3,
	    4,   49,    7,   88,  100,  103,  109,  506,  509,    5,    6,    8,
	    9,   10,   11,   12,   13,   25,   12,   13,   25,   15,   16,   17,
	   18,   17,   17,   18,   17,   19,   19,   19,   20,   19,   19,   19,
	   20,   21,   22,   23,   13,   23,   24,   13,   25,   27,   28,   29,
	   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,  644,   41,
	   42,   13,   41,   40,   42,   43,   44,   45,   47,   48,   46,   44,
	   45,   46,   44,   47,    2,   48,   14,   24,   26,   10,   40,   43,
	   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
	   62,   63,   64,   65,   66,   67,   66,   67,   68,   67,   13,   69,
	   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
	   82,   83,   84,   85,   86,   87,    2,   13,   13,   14,   24,   26,
	   10,   40,   43,   89,   90,   91,   92,   93,   94,   95,   96,   97,
	   98,   99,  101,  102,  104,  105,  106,  107,  108,  110,  111,  373,
	  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
	  124,  125,  126,  127,  128,  129,  130,  131,  241,  132,  133,  134,
	  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
	  147,  148,  149,  150,  151,  152,  153,  154,  155,  154,  155,  156,
	  155,   13,  227,  164,  157,  158,  161,  165,  177,  180,  186,  208,
	  211,  159,  160,  162,  163,  164,   87,  166,  167,  168,  169,  170,
	  171,  172,  173,  174,  175,  176,  178,  179,  181,  182,  183,  184,
	  185,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
	  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  209,  210,
	  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
	  224,  225,  226,  228,  229,  230,  231,  232,  233,  234,  235,  236,
	  237,  238,  239,  240,   13,  242,  243,  242,  243,  244,  243,   13,
	  359,  252,  245,  246,  249,  253,  265,  268,  274,  340,  343,  247,
	  248,  250,  251,  252,   87,  254,  255,  256,  257,  258,  259,  260,
	  261,  262,  263,  264,  266,  267,  269,  270,  271,  272,  273,  275,
	  276,  318,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
	  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
	  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
	  311,  312,  313,  314,  315,  316,  317,  319,  320,  321,  322,  323,
	  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
	  336,  337,  338,  339,  341,  342,  344,  345,  346,  347,  348,  349,
	  350,  351,  352,  353,  354,  355,  356,  357,  358,  360,  361,  362,
	  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,   13,  374,
	  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
	  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
	  397,  398,  399,  398,   13,  492,  407,  400,  401,  404,  408,  420,
	  423,  429,  473,  476,  402,  403,  405,  406,  407,   87,  409,  410,
	  411,  412,  413,  414,  415,  416,  417,  418,  419,  421,  422,  424,
	  425,  426,  427,  428,  430,  431,  432,  433,  434,  435,  436,  437,
	  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
	  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
	  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  474,
	  475,  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
	  488,  489,  490,  491,  493,  494,  495,  496,  497,  498,  499,  500,
	  501,  502,  503,  504,  505,   13,  507,  508,  510,  511,  512,  513,
	  514,  515,  516,  517,  518,  519,  520,  521,  522,  523,  524,  525,
	  526,  527,  528,  527,  528,  529,  528,   13,  628,  530,  531,  547,
	  612,  532,  533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
	  543,  544,  545,  546,   87,  548,  549,  590,  550,  551,  552,  553,
	  554,  555,  556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
	  566,  567,  568,  569,  570,  571,  572,  573,  574,  575,  576,  577,
	  578,  579,  580,  581,  582,  583,  584,  585,  586,  587,  588,  589,
	  591,  592,  593,  594,  595,  596,  597,  598,  599,  600,  601,  602,
	  603,  604,  605,  606,  607,  608,  609,  610,  611,  613,  614,  615,
	  616,  617,  618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
	  629,  630,  631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
	  641,   13,  643,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,    0,    0,   54,    3,    1,    0,   29,    1,   35,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  149,  126,    0,  110,   23,    0,    0,    7,
	  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,
	   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   27,  118,   27,   51,    0,    0,    0,   37,   37,   54,   37,   87,
	    0,    0,   39,    0,   96,    0,   93,   90,   41,   96,   90,   99,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,   81,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   21,   63,   31,  130,   60,   57,   31,
	   63,   57,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,
	    0,   78,   33,   84,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   19,   57,  144,    0,   54,   84,    0,   75,
	   33,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   17,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,   84,    0,   72,   33,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,   84,    0,   69,   33,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   13,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 644;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 821 "java/src/main/java/gherkin/lexer/Hi.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
    
// line 828 "java/src/main/java/gherkin/lexer/Hi.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1089 "java/src/main/java/gherkin/lexer/Hi.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1121 "java/src/main/java/gherkin/lexer/Hi.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/hi.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

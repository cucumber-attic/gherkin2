
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Lu implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"


  private final Listener listener;

  public Lu(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Lu.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   21,   22,   23,   43,   44,   45,   47,   49,   54,   59,
	   64,   69,   74,   78,   82,   84,   85,   86,   87,   88,   89,   90,
	   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,  102,  104,
	  109,  116,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
	  131,  132,  133,  140,  142,  144,  146,  148,  150,  152,  154,  156,
	  158,  160,  162,  164,  166,  168,  170,  172,  192,  193,  194,  195,
	  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
	  208,  209,  210,  222,  224,  226,  228,  230,  232,  234,  236,  238,
	  240,  242,  244,  246,  248,  250,  252,  254,  256,  258,  260,  262,
	  264,  266,  268,  270,  272,  274,  276,  278,  280,  282,  284,  286,
	  288,  290,  292,  294,  296,  298,  300,  302,  304,  306,  308,  310,
	  312,  314,  316,  318,  320,  322,  324,  326,  328,  330,  332,  334,
	  336,  338,  340,  342,  344,  346,  348,  350,  352,  354,  355,  356,
	  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  383,
	  385,  387,  389,  391,  393,  395,  397,  399,  401,  403,  405,  407,
	  409,  411,  413,  415,  417,  419,  421,  423,  425,  427,  429,  431,
	  433,  435,  437,  439,  441,  443,  445,  447,  449,  451,  453,  455,
	  457,  459,  461,  463,  465,  467,  469,  471,  473,  475,  477,  479,
	  483,  485,  487,  489,  491,  493,  495,  497,  499,  501,  503,  505,
	  507,  509,  510,  511,  512,  513,  514,  515,  516,  517,  518,  519,
	  520,  521,  522,  523,  524,  525,  526,  527,  528,  529,  544,  546,
	  548,  550,  552,  554,  556,  558,  560,  562,  564,  566,  568,  570,
	  572,  574,  576,  578,  580,  582,  584,  586,  588,  590,  592,  594,
	  596,  598,  600,  602,  604,  606,  608,  610,  612,  614,  616,  618,
	  620,  624,  626,  628,  630,  632,  634,  636,  638,  640,  642,  644,
	  646,  648,  650,  651,  652,  653,  654,  655,  656,  657,  658,  659,
	  660,  677,  679,  681,  683,  685,  687,  689,  691,  693,  695,  697,
	  699,  701,  703,  705,  707,  709,  711,  713,  715,  717,  719,  721,
	  723,  725,  727,  729,  731,  733,  735,  737,  739,  741,  743,  745,
	  747,  749,  751,  753,  755,  757,  759,  761,  763,  765,  767,  769,
	  771,  773,  775,  777,  779,  781,  783,  785,  787,  789,  791,  793,
	  797,  799,  801,  803,  805,  807,  809,  811,  813,  815,  817,  819,
	  821,  823,  826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
	  836,  837,  838,  839,  843,  849,  852,  854,  860,  880
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   66,   70,   72,   80,
	   83,   97,  100,  109,  117,  119,  124,    9,   13,  -69,  -65,   10,
	   32,   34,   35,   37,   42,   64,   66,   70,   72,   80,   83,   97,
	  100,  109,  117,  119,  124,    9,   13,   34,   34,   10,   13,   10,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,
	    9,   13,   10,   32,    9,   13,   10,   32,    9,   13,   10,   13,
	   10,   95,   70,   69,   65,   84,   85,   82,   69,   95,   69,   78,
	   68,   95,   37,   32,   10,   13,   10,   13,   13,   32,   64,    9,
	   10,    9,   10,   13,   32,   64,   11,   12,   10,   32,   64,    9,
	   13,  101,  105,  115,  112,  105,  108,  108,  101,  114,   58,   10,
	   10,   10,   32,   35,   70,  124,    9,   13,   10,  117,   10,  110,
	   10,  107,   10,  116,   10,  105,   10,  111,   10,  110,   10,   97,
	   10,  108,   10,  105,   10,  116,  -61,   10,  -87,   10,   10,  105,
	   10,  116,   10,   58,   10,   32,   34,   35,   37,   42,   64,   66,
	   70,   72,   80,   83,   97,  100,  109,  117,  119,  124,    9,   13,
	  117,  110,  107,  116,  105,  111,  110,   97,  108,  105,  116,  -61,
	  -87,  105,  116,   58,   10,   10,   10,   32,   35,   37,   64,   66,
	   70,   72,   80,   83,    9,   13,   10,   95,   10,   70,   10,   69,
	   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,
	   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,  101,
	   10,  105,   10,  115,   10,  112,   10,  105,   10,  108,   10,  108,
	   10,  101,   10,  114,   10,   58,   10,  117,   10,  110,   10,  107,
	   10,  116,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,
	   10,  105,   10,  116,  -61,   10,  -87,   10,   10,  105,   10,  116,
	   10,   97,   10,  110,   10,  110,   10,  101,   10,  114,   10,  103,
	   10,  114,   10,  111,   10,  110,   10,  100,   10,  108,   10,   97,
	   10,  110,   10,  103,   10,   32,   10,  118,   10,  117,   10,  109,
	   10,   32,   10,   83,   10,  122,   10,  101,   10,  110,   10,   97,
	   10,  114,   10,  105,   10,  111,   97,  110,  110,  101,  114,  103,
	  114,  111,  110,  100,   58,   10,   10,   10,   32,   35,   37,   42,
	   64,   70,   80,   83,   97,  100,  109,  117,  119,    9,   13,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,   10,   32,   10,  117,   10,  110,   10,  107,   10,
	  116,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,   10,
	  105,   10,  116,  -61,   10,  -87,   10,   10,  105,   10,  116,   10,
	   58,   10,  108,   10,   97,   10,  110,   10,  103,   10,   32,   10,
	  118,   10,  117,   10,  109,   10,   32,   10,   83,   10,  122,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,
	   32,  110,  119,   10,  101,   10,  114,   10,   97,   10,  110,   10,
	  110,  -61,   10,  -92,   10,   10,  103,   10,  101,   10,  104,   10,
	  111,   10,  108,   10,  108,  108,   97,  110,  103,   32,  118,  117,
	  109,   32,   83,  122,  101,  110,   97,  114,  105,  111,   58,   10,
	   10,   10,   32,   35,   37,   42,   64,   70,   83,   97,  100,  109,
	  117,  119,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,  117,
	   10,  110,   10,  107,   10,  116,   10,  105,   10,  111,   10,  110,
	   10,   97,   10,  108,   10,  105,   10,  116,  -61,   10,  -87,   10,
	   10,  105,   10,  116,   10,   58,   10,  122,   10,  101,   10,  110,
	   10,   97,   10,  114,   10,  105,   10,  111,   10,   32,  110,  119,
	   10,  101,   10,  114,   10,   97,   10,  110,   10,  110,  -61,   10,
	  -92,   10,   10,  103,   10,  101,   10,  104,   10,  111,   10,  108,
	   10,  108,  122,  101,  110,   97,  114,  105,  111,   58,   10,   10,
	   10,   32,   35,   37,   42,   64,   70,   72,   80,   83,   97,  100,
	  109,  117,  119,    9,   13,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,
	  117,   10,  110,   10,  107,   10,  116,   10,  105,   10,  111,   10,
	  110,   10,   97,   10,  108,   10,  105,   10,  116,  -61,   10,  -87,
	   10,   10,  105,   10,  116,   10,   58,   10,   97,   10,  110,   10,
	  110,   10,  101,   10,  114,   10,  103,   10,  114,   10,  111,   10,
	  110,   10,  100,   10,  108,   10,   97,   10,  110,   10,  103,   10,
	   32,   10,  118,   10,  117,   10,  109,   10,   32,   10,   83,   10,
	  122,   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,
	  111,   10,   32,  110,  119,   10,  101,   10,  114,   10,   97,   10,
	  110,   10,  110,  -61,   10,  -92,   10,   10,  103,   10,  101,   10,
	  104,   10,  111,   10,  108,   10,  108,   32,  110,  119,  101,  114,
	   97,  110,  110,  -61,  -92,  103,  101,  104,  111,  108,  108,   32,
	  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,
	   10,   92,   10,   32,   92,  124,    9,   13,   10,   32,   34,   35,
	   37,   42,   64,   66,   70,   72,   80,   83,   97,  100,  109,  117,
	  119,  124,    9,   13,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   19,    1,    1,   18,    1,    1,    2,    2,    3,    3,    3,
	    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
	    5,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    5,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,   18,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,   10,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   14,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    4,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	   15,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    2,    4,    3,    2,    4,   18,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    1,    0,    0,    1,    1,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   21,   23,   25,   45,   47,   49,   52,   55,   60,   65,
	   70,   75,   80,   84,   88,   91,   93,   95,   97,   99,  101,  103,
	  105,  107,  109,  111,  113,  115,  117,  119,  121,  123,  126,  129,
	  134,  141,  146,  148,  150,  152,  154,  156,  158,  160,  162,  164,
	  166,  168,  170,  177,  180,  183,  186,  189,  192,  195,  198,  201,
	  204,  207,  210,  213,  216,  219,  222,  225,  245,  247,  249,  251,
	  253,  255,  257,  259,  261,  263,  265,  267,  269,  271,  273,  275,
	  277,  279,  281,  293,  296,  299,  302,  305,  308,  311,  314,  317,
	  320,  323,  326,  329,  332,  335,  338,  341,  344,  347,  350,  353,
	  356,  359,  362,  365,  368,  371,  374,  377,  380,  383,  386,  389,
	  392,  395,  398,  401,  404,  407,  410,  413,  416,  419,  422,  425,
	  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,  458,  461,
	  464,  467,  470,  473,  476,  479,  482,  485,  488,  491,  493,  495,
	  497,  499,  501,  503,  505,  507,  509,  511,  513,  515,  517,  533,
	  536,  539,  542,  545,  548,  551,  554,  557,  560,  563,  566,  569,
	  572,  575,  578,  581,  584,  587,  590,  593,  596,  599,  602,  605,
	  608,  611,  614,  617,  620,  623,  626,  629,  632,  635,  638,  641,
	  644,  647,  650,  653,  656,  659,  662,  665,  668,  671,  674,  677,
	  682,  685,  688,  691,  694,  697,  700,  703,  706,  709,  712,  715,
	  718,  721,  723,  725,  727,  729,  731,  733,  735,  737,  739,  741,
	  743,  745,  747,  749,  751,  753,  755,  757,  759,  761,  776,  779,
	  782,  785,  788,  791,  794,  797,  800,  803,  806,  809,  812,  815,
	  818,  821,  824,  827,  830,  833,  836,  839,  842,  845,  848,  851,
	  854,  857,  860,  863,  866,  869,  872,  875,  878,  881,  884,  887,
	  890,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922,  925,
	  928,  931,  934,  936,  938,  940,  942,  944,  946,  948,  950,  952,
	  954,  971,  974,  977,  980,  983,  986,  989,  992,  995,  998, 1001,
	 1004, 1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037,
	 1040, 1043, 1046, 1049, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073,
	 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109,
	 1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 1142, 1145,
	 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183,
	 1186, 1189, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211,
	 1213, 1215, 1217, 1219, 1223, 1229, 1233, 1236, 1242, 1262
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   15,   18,    2,    0,   19,    0,    2,
	    0,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   15,   18,    2,    0,   20,    0,   21,
	    0,   23,   24,   22,   26,   27,   25,   30,   29,   31,   29,   28,
	   34,   33,   35,   33,   32,   34,   33,   36,   33,   32,   34,   33,
	   37,   33,   32,   39,   38,   40,   38,    0,    3,   41,   41,    0,
	   39,   38,   38,    0,   43,   44,   42,    3,    0,   45,    0,   46,
	    0,   47,    0,   48,    0,   49,    0,   50,    0,   51,    0,   52,
	    0,   53,    0,   54,    0,   55,    0,   56,    0,   57,    0,   58,
	    0,   59,    0,   61,   62,   60,   64,   65,   63,    0,    0,    0,
	    0,   66,   67,   68,   67,   67,   70,   69,   66,    3,   71,    8,
	   71,    0,   72,    0,   73,    0,   74,    0,   75,    0,   76,    0,
	   77,    0,   78,    0,   79,    0,   80,    0,   81,    0,   83,   82,
	   85,   84,   85,   86,   87,   88,   87,   86,   84,   85,   89,   84,
	   85,   90,   84,   85,   91,   84,   85,   92,   84,   85,   93,   84,
	   85,   94,   84,   85,   95,   84,   85,   96,   84,   85,   97,   84,
	   85,   98,   84,   85,   99,   84,  100,   85,   84,  101,   85,   84,
	   85,  102,   84,   85,  103,   84,   85,  104,   84,  106,  105,  107,
	  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
	  120,  118,  121,  105,    0,  122,    0,  123,    0,  124,    0,  125,
	    0,  126,    0,  127,    0,  128,    0,  129,    0,  130,    0,  131,
	    0,  132,    0,  133,    0,  134,    0,  135,    0,  136,    0,  137,
	    0,  139,  138,  141,  140,  141,  142,  143,  144,  143,  145,  146,
	  147,  148,  149,  142,  140,  141,  150,  140,  141,  151,  140,  141,
	  152,  140,  141,  153,  140,  141,  154,  140,  141,  155,  140,  141,
	  156,  140,  141,  157,  140,  141,  158,  140,  141,  159,  140,  141,
	  160,  140,  141,  161,  140,  141,  162,  140,  141,  163,  140,  141,
	  164,  140,  141,  165,  140,  141,  166,  140,  141,  167,  140,  141,
	  168,  140,  141,  169,  140,  141,  170,  140,  141,  171,  140,  141,
	  172,  140,  141,  173,  140,  141,  174,  140,  141,  175,  140,  141,
	  176,  140,  141,  177,  140,  141,  178,  140,  141,  179,  140,  141,
	  180,  140,  141,  181,  140,  141,  182,  140,  141,  183,  140,  141,
	  184,  140,  185,  141,  140,  186,  141,  140,  141,  187,  140,  141,
	  172,  140,  141,  188,  140,  141,  189,  140,  141,  190,  140,  141,
	  191,  140,  141,  192,  140,  141,  193,  140,  141,  194,  140,  141,
	  195,  140,  141,  196,  140,  141,  172,  140,  141,  197,  140,  141,
	  198,  140,  141,  199,  140,  141,  200,  140,  141,  201,  140,  141,
	  202,  140,  141,  203,  140,  141,  204,  140,  141,  205,  140,  141,
	  206,  140,  141,  207,  140,  141,  208,  140,  141,  209,  140,  141,
	  210,  140,  141,  211,  140,  141,  212,  140,  141,  172,  140,  213,
	    0,  214,    0,  215,    0,  216,    0,  217,    0,  218,    0,  219,
	    0,  220,    0,  221,    0,  222,    0,  223,    0,  225,  224,  227,
	  226,  227,  228,  229,  230,  231,  229,  232,  233,  234,  235,  236,
	  237,  238,  236,  228,  226,  227,  239,  226,  227,  240,  226,  227,
	  241,  226,  227,  242,  226,  227,  243,  226,  227,  244,  226,  227,
	  245,  226,  227,  246,  226,  227,  247,  226,  227,  248,  226,  227,
	  249,  226,  227,  250,  226,  227,  251,  226,  227,  252,  226,  227,
	  253,  226,  227,  254,  226,  227,  255,  226,  227,  256,  226,  227,
	  257,  226,  227,  258,  226,  227,  259,  226,  227,  260,  226,  227,
	  261,  226,  227,  262,  226,  227,  263,  226,  227,  264,  226,  265,
	  227,  226,  266,  227,  226,  227,  267,  226,  227,  268,  226,  227,
	  253,  226,  227,  269,  226,  227,  270,  226,  227,  271,  226,  227,
	  272,  226,  227,  273,  226,  227,  274,  226,  227,  275,  226,  227,
	  276,  226,  227,  277,  226,  227,  278,  226,  227,  279,  226,  227,
	  280,  226,  227,  281,  226,  227,  282,  226,  227,  283,  226,  227,
	  284,  226,  227,  268,  226,  227,  253,  285,  286,  226,  227,  287,
	  226,  227,  285,  226,  227,  288,  226,  227,  289,  226,  227,  285,
	  226,  290,  227,  226,  285,  227,  226,  227,  291,  226,  227,  292,
	  226,  227,  293,  226,  227,  294,  226,  227,  295,  226,  227,  285,
	  226,  296,    0,  297,    0,  298,    0,  299,    0,  300,    0,  301,
	    0,  302,    0,  303,    0,  304,    0,  305,    0,  306,    0,  307,
	    0,  308,    0,  309,    0,  310,    0,  311,    0,  312,    0,  313,
	    0,  315,  314,  317,  316,  317,  318,  319,  320,  321,  319,  322,
	  323,  324,  325,  326,  327,  325,  318,  316,  317,  328,  316,  317,
	  329,  316,  317,  330,  316,  317,  331,  316,  317,  332,  316,  317,
	  333,  316,  317,  334,  316,  317,  335,  316,  317,  336,  316,  317,
	  337,  316,  317,  338,  316,  317,  339,  316,  317,  340,  316,  317,
	  341,  316,  317,  342,  316,  317,  343,  316,  317,  344,  316,  317,
	  345,  316,  317,  346,  316,  317,  347,  316,  317,  348,  316,  317,
	  349,  316,  317,  350,  316,  317,  351,  316,  317,  352,  316,  317,
	  353,  316,  354,  317,  316,  355,  317,  316,  317,  356,  316,  317,
	  357,  316,  317,  342,  316,  317,  358,  316,  317,  359,  316,  317,
	  360,  316,  317,  361,  316,  317,  362,  316,  317,  363,  316,  317,
	  357,  316,  317,  342,  364,  365,  316,  317,  366,  316,  317,  364,
	  316,  317,  367,  316,  317,  368,  316,  317,  364,  316,  369,  317,
	  316,  364,  317,  316,  317,  370,  316,  317,  371,  316,  317,  372,
	  316,  317,  373,  316,  317,  374,  316,  317,  364,  316,  375,    0,
	  376,    0,  377,    0,  378,    0,  379,    0,  380,    0,  381,    0,
	  382,    0,  384,  383,  386,  385,  386,  387,  388,  389,  390,  388,
	  391,  392,  393,  394,  395,  396,  397,  398,  396,  387,  385,  386,
	  399,  385,  386,  400,  385,  386,  401,  385,  386,  402,  385,  386,
	  403,  385,  386,  404,  385,  386,  405,  385,  386,  406,  385,  386,
	  407,  385,  386,  408,  385,  386,  409,  385,  386,  410,  385,  386,
	  411,  385,  386,  412,  385,  386,  413,  385,  386,  414,  385,  386,
	  415,  385,  386,  416,  385,  386,  417,  385,  386,  418,  385,  386,
	  419,  385,  386,  420,  385,  386,  421,  385,  386,  422,  385,  386,
	  423,  385,  386,  424,  385,  425,  386,  385,  426,  386,  385,  386,
	  427,  385,  386,  428,  385,  386,  413,  385,  386,  429,  385,  386,
	  430,  385,  386,  431,  385,  386,  432,  385,  386,  433,  385,  386,
	  434,  385,  386,  435,  385,  386,  436,  385,  386,  437,  385,  386,
	  428,  385,  386,  438,  385,  386,  439,  385,  386,  440,  385,  386,
	  441,  385,  386,  442,  385,  386,  443,  385,  386,  444,  385,  386,
	  445,  385,  386,  446,  385,  386,  447,  385,  386,  448,  385,  386,
	  449,  385,  386,  450,  385,  386,  451,  385,  386,  452,  385,  386,
	  453,  385,  386,  428,  385,  386,  413,  454,  455,  385,  386,  456,
	  385,  386,  454,  385,  386,  457,  385,  386,  458,  385,  386,  454,
	  385,  459,  386,  385,  454,  386,  385,  386,  460,  385,  386,  461,
	  385,  386,  462,  385,  386,  463,  385,  386,  464,  385,  386,  454,
	  385,   59,  465,  466,    0,  467,    0,  465,    0,  468,    0,  469,
	    0,  465,    0,  470,    0,  465,    0,  471,    0,  472,    0,  473,
	    0,  474,    0,  475,    0,  465,    0,  476,  477,  476,    0,  480,
	  479,  481,  482,  479,  478,    0,  484,  485,  483,    0,  484,  483,
	  480,  486,  484,  485,  486,  483,  480,  487,  488,  489,  490,  491,
	  492,  493,  494,  495,  496,  497,  498,  499,  500,  501,  499,  502,
	  487,    0,  503,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   16,   18,   32,   35,   38,   68,  153,
	  229,  302,  385,  388,  391,  393,  399,    3,    6,    7,    8,    9,
	    8,    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,
	   12,   13,   14,    4,   15,   14,   16,    4,   17,   19,   20,   21,
	   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,  405,   33,
	   34,    4,   17,   34,    4,   17,   36,   37,    4,   36,   35,   37,
	   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
	   49,   50,   50,    4,   51,   52,   53,   54,   55,   56,   57,   58,
	   59,   60,   61,   62,   63,   64,   65,   66,   67,    4,    4,    5,
	   16,   18,   32,   35,   38,   68,  153,  229,  302,  385,  388,  391,
	  393,  399,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
	   79,   80,   81,   82,   83,   84,   85,   86,   85,   86,   86,    4,
	   87,  101,  111,  126,  136,  146,   88,   89,   90,   91,   92,   93,
	   94,   95,   96,   97,   98,   99,  100,    4,  102,  103,  104,  105,
	  106,  107,  108,  109,  110,   67,  112,  113,  114,  115,  116,  117,
	  118,  119,  120,  121,  122,  123,  124,  125,  127,  128,  129,  130,
	  131,  132,  133,  134,  135,  137,  138,  139,  140,  141,  142,  143,
	  144,  145,  146,  147,  148,  149,  150,  151,  152,  154,  155,  156,
	  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  165,  166,
	  166,    4,  167,  181,  182,  198,  208,  215,  218,  221,  223,  168,
	  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
	    4,   67,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
	  193,  194,  195,  196,  197,  199,  200,  201,  202,  203,  204,  205,
	  206,  207,  208,  209,  210,  211,  212,  213,  214,  181,  216,  217,
	  219,  220,  222,  224,  225,  226,  227,  228,  230,  231,  232,  233,
	  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
	  246,  247,  248,  249,  248,  249,  249,    4,  250,  264,  265,  281,
	  288,  291,  294,  296,  251,  252,  253,  254,  255,  256,  257,  258,
	  259,  260,  261,  262,  263,    4,   67,  266,  267,  268,  269,  270,
	  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  282,  283,
	  284,  285,  286,  287,  264,  289,  290,  292,  293,  295,  297,  298,
	  299,  300,  301,  303,  304,  305,  306,  307,  308,  309,  310,  311,
	  312,  311,  312,  312,    4,  313,  327,  328,  344,  354,  364,  371,
	  374,  377,  379,  314,  315,  316,  317,  318,  319,  320,  321,  322,
	  323,  324,  325,  326,    4,   67,  329,  330,  331,  332,  333,  334,
	  335,  336,  337,  338,  339,  340,  341,  342,  343,  345,  346,  347,
	  348,  349,  350,  351,  352,  353,  355,  356,  357,  358,  359,  360,
	  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  327,  372,
	  373,  375,  376,  378,  380,  381,  382,  383,  384,   32,  386,  387,
	  389,  390,  392,  394,  395,  396,  397,  398,  399,  400,  401,  403,
	  404,  402,  400,  401,  402,  400,  403,  404,    5,   16,   18,   32,
	   35,   38,   68,  153,  229,  302,  385,  388,  391,  393,  399,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,
	   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,
	   33,    0,   11,  106,    0,    0,    0,  114,   25,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  149,  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,    0,   81,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   21,   31,  130,   60,
	   57,   31,   63,   57,   63,   63,   63,   63,   63,   63,   63,   63,
	   63,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   69,
	   33,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   72,   33,   84,   84,   84,   84,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   15,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,   84,
	   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   19,   19,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,    0,   75,   33,   84,   84,   84,   84,   84,   84,
	   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,   37,
	   54,   37,   87,    0,    0,   39,    0,    0,   93,   90,   41,   96,
	   90,   96,   96,   96,   96,   96,   96,   96,   96,   96,   99,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 405;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 597 "java/src/main/java/gherkin/lexer/Lu.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
    
// line 604 "java/src/main/java/gherkin/lexer/Lu.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 865 "java/src/main/java/gherkin/lexer/Lu.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 897 "java/src/main/java/gherkin/lexer/Lu.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/lu.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

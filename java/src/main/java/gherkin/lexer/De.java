
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class De implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"


  private final Listener listener;

  public De(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/De.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   19,   20,   21,   39,   40,   41,   43,   45,   50,   55,
	   60,   65,   69,   73,   75,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   93,   95,  100,
	  107,  112,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
	  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
	  142,  144,  146,  148,  150,  152,  154,  156,  158,  160,  162,  164,
	  166,  168,  170,  172,  190,  191,  192,  193,  194,  195,  196,  197,
	  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
	  220,  222,  224,  226,  228,  230,  232,  234,  236,  238,  240,  242,
	  244,  246,  248,  250,  252,  254,  256,  258,  260,  262,  264,  266,
	  268,  270,  272,  274,  276,  278,  280,  282,  284,  286,  288,  290,
	  292,  294,  296,  298,  300,  302,  304,  306,  308,  310,  312,  314,
	  316,  318,  320,  322,  325,  327,  329,  331,  333,  335,  337,  339,
	  341,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
	  354,  355,  356,  357,  358,  359,  360,  361,  362,  377,  379,  381,
	  383,  385,  387,  389,  391,  393,  395,  397,  399,  401,  403,  405,
	  407,  410,  412,  414,  416,  418,  420,  422,  424,  426,  428,  430,
	  432,  434,  436,  438,  440,  442,  444,  446,  448,  450,  452,  454,
	  456,  458,  460,  462,  464,  466,  468,  470,  472,  474,  476,  478,
	  480,  482,  484,  486,  488,  490,  492,  494,  496,  498,  501,  503,
	  505,  507,  509,  511,  513,  515,  517,  519,  521,  523,  524,  525,
	  526,  527,  528,  529,  530,  532,  533,  534,  549,  551,  553,  555,
	  557,  559,  561,  563,  565,  567,  569,  571,  573,  575,  577,  579,
	  582,  584,  586,  588,  590,  592,  594,  596,  598,  600,  602,  604,
	  606,  608,  610,  612,  614,  616,  618,  620,  622,  624,  626,  628,
	  630,  632,  634,  636,  639,  641,  643,  645,  647,  649,  651,  653,
	  655,  657,  659,  661,  663,  665,  667,  669,  671,  673,  675,  677,
	  679,  681,  683,  685,  688,  690,  692,  694,  696,  698,  700,  702,
	  704,  706,  708,  710,  711,  712,  713,  714,  715,  716,  717,  718,
	  719,  720,  721,  736,  738,  740,  742,  744,  746,  748,  750,  752,
	  754,  756,  758,  760,  762,  764,  766,  769,  771,  773,  775,  777,
	  779,  781,  783,  785,  787,  789,  791,  793,  795,  797,  799,  801,
	  803,  805,  807,  809,  811,  813,  815,  817,  819,  821,  823,  825,
	  827,  829,  831,  833,  835,  837,  839,  841,  843,  845,  847,  849,
	  851,  853,  855,  857,  859,  861,  863,  864,  865,  866,  870,  876,
	  879,  881,  887,  905
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   68,   70,
	   71,   83,   85,   87,  124,    9,   13,  -69,  -65,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   68,   70,   71,   83,   85,   87,
	  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,
	   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,
	   95,   69,   78,   68,   95,   37,   32,   10,   13,   10,   13,   13,
	   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,
	   32,   64,    9,   13,   98,  110,  101,  114,  103,  101,  110,  111,
	  109,  109,  101,  110,  101,  105,  115,  112,  105,  101,  108,  101,
	   58,   10,   10,   10,   32,   35,   70,  124,    9,   13,   10,  117,
	   10,  110,   10,  107,   10,  116,   10,  105,   10,  111,   10,  110,
	   10,   97,   10,  108,   10,  105,   10,  116,  -61,   10,  -92,   10,
	   10,  116,   10,   58,   10,   32,   34,   35,   37,   42,   64,   65,
	   66,   68,   70,   71,   83,   85,   87,  124,    9,   13,   97,  110,
	  117,  110,  107,  116,  105,  111,  110,   97,  108,  105,  116,  -61,
	  -92,  116,   58,   10,   10,   10,   32,   35,   37,   64,   66,   70,
	   71,   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,  101,   10,  105,
	   10,  115,   10,  112,   10,  105,   10,  101,   10,  108,   10,  101,
	   10,   58,   10,  117,   10,  110,   10,  107,   10,  116,   10,  105,
	   10,  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,
	  -61,   10,  -92,   10,   10,  116,   10,  114,   10,  117,   10,  110,
	   10,  100,   10,  108,   10,   97,   10,  103,   10,  122,   10,  101,
	   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   58,
	  103,   10,  114,   10,  117,   10,  110,   10,  100,   10,  114,   10,
	  105,   10,  115,   10,  115,  101,  114,  103,  101,   98,  101,  110,
	   32,  115,  101,  105,  117,  110,  100,  108,   97,  103,  101,   58,
	   10,   10,   10,   32,   35,   37,   42,   64,   65,   68,   70,   71,
	   83,   85,   87,    9,   13,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,
	   98,  110,   10,  101,   10,  114,   10,  103,   10,  101,   10,  110,
	   10,  111,   10,  109,   10,  109,   10,  101,   10,  110,   10,   97,
	   10,  110,   10,  117,   10,  110,   10,  107,   10,  116,   10,  105,
	   10,  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,
	  -61,   10,  -92,   10,   10,  116,   10,   58,   10,  101,   10,  103,
	   10,  101,   10,   98,   10,  101,   10,  110,   10,   32,   10,  115,
	   10,  101,   10,  105,   10,  122,   10,  101,   10,  110,   10,   97,
	   10,  114,   10,  105,   10,  111,   10,   58,  103,   10,  114,   10,
	  117,   10,  110,   10,  100,   10,  114,   10,  105,   10,  115,   10,
	  115,   10,  110,   10,  100,   10,  101,  122,  101,  110,   97,  114,
	  105,  111,   58,  103,   10,   10,   10,   32,   35,   37,   42,   64,
	   65,   68,   70,   71,   83,   85,   87,    9,   13,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37,   10,   32,   10,   98,  110,   10,  101,   10,  114,   10,  103,
	   10,  101,   10,  110,   10,  111,   10,  109,   10,  109,   10,  101,
	   10,  110,   10,   97,   10,  110,   10,  117,   10,  110,   10,  107,
	   10,  116,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,
	   10,  105,   10,  116,  -61,   10,  -92,   10,   10,  116,   10,   58,
	   10,  101,  114,   10,  103,   10,  101,   10,   98,   10,  101,   10,
	  110,   10,   32,   10,  115,   10,  101,   10,  105,   10,  117,   10,
	  110,   10,  100,   10,  108,   10,   97,   10,  103,   10,  101,   10,
	  122,   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,
	  111,   10,   58,  103,   10,  114,   10,  117,   10,  110,   10,  100,
	   10,  114,   10,  105,   10,  115,   10,  115,   10,  110,   10,  100,
	   10,  101,  114,  117,  110,  100,  114,  105,  115,  115,   58,   10,
	   10,   10,   32,   35,   37,   42,   64,   65,   68,   70,   71,   83,
	   85,   87,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,   98,
	  110,   10,  101,   10,  114,   10,  103,   10,  101,   10,  110,   10,
	  111,   10,  109,   10,  109,   10,  101,   10,  110,   10,   97,   10,
	  110,   10,  117,   10,  110,   10,  107,   10,  116,   10,  105,   10,
	  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,  -61,
	   10,  -92,   10,   10,  116,   10,   58,   10,  101,   10,  103,   10,
	  101,   10,   98,   10,  101,   10,  110,   10,   32,   10,  115,   10,
	  101,   10,  105,   10,  122,   10,  101,   10,  110,   10,   97,   10,
	  114,   10,  105,   10,  111,   10,  110,   10,  100,   10,  101,  110,
	  100,  101,   32,  124,    9,   13,   10,   32,   92,  124,    9,   13,
	   10,   92,  124,   10,   92,   10,   32,   92,  124,    9,   13,   10,
	   32,   34,   35,   37,   42,   64,   65,   66,   68,   70,   71,   83,
	   85,   87,  124,    9,   13,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   17,    1,    1,   16,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,   16,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    2,    1,    1,   13,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,   13,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    2,    4,    3,
	    2,    4,   16,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
	    0,    1,    1,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   19,   21,   23,   41,   43,   45,   48,   51,   56,   61,
	   66,   71,   75,   79,   82,   84,   86,   88,   90,   92,   94,   96,
	   98,  100,  102,  104,  106,  108,  110,  112,  114,  117,  120,  125,
	  132,  137,  140,  142,  144,  146,  148,  150,  152,  154,  156,  158,
	  160,  162,  164,  166,  168,  170,  172,  174,  176,  178,  180,  182,
	  189,  192,  195,  198,  201,  204,  207,  210,  213,  216,  219,  222,
	  225,  228,  231,  234,  252,  254,  256,  258,  260,  262,  264,  266,
	  268,  270,  272,  274,  276,  278,  280,  282,  284,  286,  288,  290,
	  301,  304,  307,  310,  313,  316,  319,  322,  325,  328,  331,  334,
	  337,  340,  343,  346,  349,  352,  355,  358,  361,  364,  367,  370,
	  373,  376,  379,  382,  385,  388,  391,  394,  397,  400,  403,  406,
	  409,  412,  415,  418,  421,  424,  427,  430,  433,  436,  439,  442,
	  445,  448,  451,  454,  458,  461,  464,  467,  470,  473,  476,  479,
	  482,  485,  487,  489,  491,  493,  495,  497,  499,  501,  503,  505,
	  507,  509,  511,  513,  515,  517,  519,  521,  523,  538,  541,  544,
	  547,  550,  553,  556,  559,  562,  565,  568,  571,  574,  577,  580,
	  583,  587,  590,  593,  596,  599,  602,  605,  608,  611,  614,  617,
	  620,  623,  626,  629,  632,  635,  638,  641,  644,  647,  650,  653,
	  656,  659,  662,  665,  668,  671,  674,  677,  680,  683,  686,  689,
	  692,  695,  698,  701,  704,  707,  710,  713,  716,  719,  723,  726,
	  729,  732,  735,  738,  741,  744,  747,  750,  753,  756,  758,  760,
	  762,  764,  766,  768,  770,  773,  775,  777,  792,  795,  798,  801,
	  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,  837,
	  841,  844,  847,  850,  853,  856,  859,  862,  865,  868,  871,  874,
	  877,  880,  883,  886,  889,  892,  895,  898,  901,  904,  907,  910,
	  913,  916,  919,  922,  926,  929,  932,  935,  938,  941,  944,  947,
	  950,  953,  956,  959,  962,  965,  968,  971,  974,  977,  980,  983,
	  986,  989,  992,  995,  999, 1002, 1005, 1008, 1011, 1014, 1017, 1020,
	 1023, 1026, 1029, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048,
	 1050, 1052, 1054, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090, 1093,
	 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1118, 1121, 1124, 1127, 1130,
	 1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166,
	 1169, 1172, 1175, 1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202,
	 1205, 1208, 1211, 1214, 1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238,
	 1241, 1244, 1247, 1250, 1253, 1256, 1259, 1261, 1263, 1265, 1269, 1275,
	 1279, 1282, 1288, 1306
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,    2,    0,   18,    0,    2,    0,    3,
	    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
	   15,   16,   17,    2,    0,   19,    0,   20,    0,   22,   23,   21,
	   25,   26,   24,   29,   28,   30,   28,   27,   33,   32,   34,   32,
	   31,   33,   32,   35,   32,   31,   33,   32,   36,   32,   31,   38,
	   37,   37,    0,    3,   39,   39,    0,   41,   42,   40,    3,    0,
	   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   56,    0,   57,    0,   59,   60,   58,   62,   63,   61,
	    0,    0,    0,    0,   64,   65,   66,   65,   65,   68,   67,   64,
	    3,   69,    8,   69,    0,   70,   71,    0,   72,    0,   73,    0,
	   74,    0,   75,    0,   76,    0,   77,    0,   78,    0,   79,    0,
	   80,    0,   73,    0,   81,    0,   82,    0,   83,    0,   84,    0,
	   85,    0,   86,    0,   87,    0,   88,    0,   89,    0,   91,   90,
	   93,   92,   93,   94,   95,   96,   95,   94,   92,   93,   97,   92,
	   93,   98,   92,   93,   99,   92,   93,  100,   92,   93,  101,   92,
	   93,  102,   92,   93,  103,   92,   93,  104,   92,   93,  105,   92,
	   93,  106,   92,   93,  107,   92,  108,   93,   92,  109,   93,   92,
	   93,  110,   92,   93,  111,   92,  113,  112,  114,  115,  116,  117,
	  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  112,    0,
	  128,    0,   80,    0,  129,    0,  130,    0,  131,    0,  132,    0,
	  133,    0,  134,    0,  135,    0,  136,    0,  137,    0,  138,    0,
	  139,    0,  140,    0,  141,    0,  142,    0,  143,    0,  145,  144,
	  147,  146,  147,  148,  149,  150,  149,  151,  152,  153,  154,  148,
	  146,  147,  155,  146,  147,  156,  146,  147,  157,  146,  147,  158,
	  146,  147,  159,  146,  147,  160,  146,  147,  161,  146,  147,  162,
	  146,  147,  163,  146,  147,  164,  146,  147,  165,  146,  147,  166,
	  146,  147,  167,  146,  147,  168,  146,  147,  169,  146,  147,  170,
	  146,  147,  171,  146,  147,  172,  146,  147,  173,  146,  147,  174,
	  146,  147,  175,  146,  147,  176,  146,  147,  177,  146,  147,  178,
	  146,  147,  179,  146,  147,  180,  146,  147,  181,  146,  147,  182,
	  146,  147,  183,  146,  147,  184,  146,  147,  185,  146,  147,  186,
	  146,  147,  187,  146,  147,  188,  146,  189,  147,  146,  190,  147,
	  146,  147,  176,  146,  147,  191,  146,  147,  192,  146,  147,  193,
	  146,  147,  194,  146,  147,  195,  146,  147,  196,  146,  147,  175,
	  146,  147,  197,  146,  147,  198,  146,  147,  199,  146,  147,  200,
	  146,  147,  201,  146,  147,  202,  146,  147,  203,  146,  147,  177,
	  204,  146,  147,  205,  146,  147,  206,  146,  147,  207,  146,  147,
	  208,  146,  147,  209,  146,  147,  210,  146,  147,  211,  146,  147,
	  176,  146,  212,  213,    0,  214,    0,  215,    0,  216,    0,  217,
	    0,  218,    0,  219,    0,  220,    0,  221,    0,   73,    0,  222,
	    0,  223,    0,  224,    0,  225,    0,  226,    0,  227,    0,  228,
	    0,  229,    0,  231,  230,  233,  232,  233,  234,  235,  236,  237,
	  235,  238,  239,  240,  241,  242,  243,  244,  234,  232,  233,  245,
	  232,  233,  246,  232,  233,  247,  232,  233,  248,  232,  233,  249,
	  232,  233,  250,  232,  233,  251,  232,  233,  252,  232,  233,  253,
	  232,  233,  254,  232,  233,  255,  232,  233,  256,  232,  233,  257,
	  232,  233,  258,  232,  233,  259,  232,  233,  260,  261,  232,  233,
	  262,  232,  233,  263,  232,  233,  264,  232,  233,  265,  232,  233,
	  266,  232,  233,  267,  232,  233,  268,  232,  233,  269,  232,  233,
	  270,  232,  233,  263,  232,  233,  271,  232,  233,  270,  232,  233,
	  272,  232,  233,  273,  232,  233,  274,  232,  233,  275,  232,  233,
	  276,  232,  233,  277,  232,  233,  278,  232,  233,  279,  232,  233,
	  280,  232,  233,  281,  232,  233,  282,  232,  283,  233,  232,  284,
	  233,  232,  233,  285,  232,  233,  259,  232,  233,  286,  232,  233,
	  287,  232,  233,  288,  232,  233,  289,  232,  233,  290,  232,  233,
	  291,  232,  233,  292,  232,  233,  293,  232,  233,  294,  232,  233,
	  263,  232,  233,  295,  232,  233,  296,  232,  233,  297,  232,  233,
	  298,  232,  233,  299,  232,  233,  300,  232,  233,  301,  232,  233,
	  259,  302,  232,  233,  303,  232,  233,  304,  232,  233,  305,  232,
	  233,  306,  232,  233,  307,  232,  233,  308,  232,  233,  309,  232,
	  233,  285,  232,  233,  310,  232,  233,  263,  232,  233,  271,  232,
	  311,    0,  312,    0,  313,    0,  314,    0,  315,    0,  316,    0,
	  317,    0,  318,  319,    0,  321,  320,  323,  322,  323,  324,  325,
	  326,  327,  325,  328,  329,  330,  331,  332,  333,  334,  324,  322,
	  323,  335,  322,  323,  336,  322,  323,  337,  322,  323,  338,  322,
	  323,  339,  322,  323,  340,  322,  323,  341,  322,  323,  342,  322,
	  323,  343,  322,  323,  344,  322,  323,  345,  322,  323,  346,  322,
	  323,  347,  322,  323,  348,  322,  323,  349,  322,  323,  350,  351,
	  322,  323,  352,  322,  323,  353,  322,  323,  354,  322,  323,  355,
	  322,  323,  356,  322,  323,  357,  322,  323,  358,  322,  323,  359,
	  322,  323,  360,  322,  323,  353,  322,  323,  361,  322,  323,  360,
	  322,  323,  362,  322,  323,  363,  322,  323,  364,  322,  323,  365,
	  322,  323,  366,  322,  323,  367,  322,  323,  368,  322,  323,  369,
	  322,  323,  370,  322,  323,  371,  322,  323,  372,  322,  373,  323,
	  322,  374,  323,  322,  323,  375,  322,  323,  349,  322,  323,  376,
	  377,  322,  323,  378,  322,  323,  379,  322,  323,  380,  322,  323,
	  381,  322,  323,  382,  322,  323,  383,  322,  323,  384,  322,  323,
	  385,  322,  323,  353,  322,  323,  386,  322,  323,  387,  322,  323,
	  388,  322,  323,  389,  322,  323,  390,  322,  323,  391,  322,  323,
	  375,  322,  323,  392,  322,  323,  393,  322,  323,  394,  322,  323,
	  395,  322,  323,  396,  322,  323,  397,  322,  323,  398,  322,  323,
	  349,  399,  322,  323,  400,  322,  323,  401,  322,  323,  402,  322,
	  323,  403,  322,  323,  404,  322,  323,  405,  322,  323,  406,  322,
	  323,  375,  322,  323,  407,  322,  323,  353,  322,  323,  361,  322,
	  408,    0,  409,    0,  410,    0,  411,    0,  412,    0,  413,    0,
	  414,    0,  415,    0,  416,    0,  418,  417,  420,  419,  420,  421,
	  422,  423,  424,  422,  425,  426,  427,  428,  429,  430,  431,  421,
	  419,  420,  432,  419,  420,  433,  419,  420,  434,  419,  420,  435,
	  419,  420,  436,  419,  420,  437,  419,  420,  438,  419,  420,  439,
	  419,  420,  440,  419,  420,  441,  419,  420,  442,  419,  420,  443,
	  419,  420,  444,  419,  420,  445,  419,  420,  446,  419,  420,  447,
	  448,  419,  420,  449,  419,  420,  450,  419,  420,  451,  419,  420,
	  452,  419,  420,  453,  419,  420,  454,  419,  420,  455,  419,  420,
	  456,  419,  420,  457,  419,  420,  450,  419,  420,  458,  419,  420,
	  457,  419,  420,  459,  419,  420,  460,  419,  420,  461,  419,  420,
	  462,  419,  420,  463,  419,  420,  464,  419,  420,  465,  419,  420,
	  466,  419,  420,  467,  419,  420,  468,  419,  420,  469,  419,  470,
	  420,  419,  471,  420,  419,  420,  472,  419,  420,  446,  419,  420,
	  473,  419,  420,  474,  419,  420,  475,  419,  420,  476,  419,  420,
	  477,  419,  420,  478,  419,  420,  479,  419,  420,  480,  419,  420,
	  481,  419,  420,  450,  419,  420,  482,  419,  420,  483,  419,  420,
	  484,  419,  420,  485,  419,  420,  486,  419,  420,  487,  419,  420,
	  472,  419,  420,  488,  419,  420,  450,  419,  420,  458,  419,  489,
	    0,   73,    0,  128,    0,  490,  491,  490,    0,  494,  493,  495,
	  496,  493,  492,    0,  498,  499,  497,    0,  498,  497,  494,  500,
	  498,  499,  500,  497,  494,  501,  502,  503,  504,  505,  506,  507,
	  508,  509,  510,  511,  512,  513,  514,  515,  501,    0,  516,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   48,   76,
	   78,  156,  249,  414,  416,  417,    3,    6,    7,    8,    9,    8,
	    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,
	   13,   14,    4,   14,   15,    4,   16,   18,   19,   20,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   30,  423,   32,   33,    4,
	   16,   33,    4,   16,   35,   36,    4,   35,   34,   36,   38,   40,
	   39,   31,   41,   42,   43,   44,   45,   46,   47,   49,   50,   51,
	   52,   53,   54,   55,   56,   57,   58,   59,   58,   59,   59,    4,
	   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
	   72,   73,   74,   75,    4,    4,    5,   15,   17,   31,   34,   37,
	   48,   76,   78,  156,  249,  414,  416,  417,   77,   79,   80,   81,
	   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
	   94,   95,   94,   95,   95,    4,   96,  110,  119,  133,  140,   97,
	   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
	    4,  111,  112,  113,  114,  115,  116,  117,  118,   75,  120,  121,
	  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  134,
	  135,  136,  137,  138,  139,  141,  142,  143,  144,  145,  146,  147,
	  148,  149,  150,  151,  152,  153,  154,  155,  157,  166,  158,  159,
	  160,  161,  162,  163,  164,  165,  167,  168,  169,  170,  171,  172,
	  173,  174,  175,  176,  175,  176,  176,    4,  177,  191,  192,  203,
	  205,  220,  230,  246,  248,  178,  179,  180,  181,  182,  183,  184,
	  185,  186,  187,  188,  189,  190,    4,   75,  193,  195,  194,  191,
	  196,  197,  198,  199,  200,  201,  202,  204,  206,  207,  208,  209,
	  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  221,  222,
	  223,  224,  225,  226,  227,  228,  229,  231,  232,  233,  234,  235,
	  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  247,  250,
	  251,  252,  253,  254,  255,  256,  257,  339,  258,  259,  258,  259,
	  259,    4,  260,  274,  275,  286,  288,  303,  320,  336,  338,  261,
	  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
	    4,   75,  276,  278,  277,  274,  279,  280,  281,  282,  283,  284,
	  285,  287,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
	  299,  300,  301,  302,  304,  313,  305,  306,  307,  308,  309,  310,
	  311,  312,  314,  315,  316,  317,  318,  319,  321,  322,  323,  324,
	  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  337,
	  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  349,
	  350,  350,    4,  351,  365,  366,  377,  379,  394,  404,  411,  413,
	  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
	  364,    4,   75,  367,  369,  368,  365,  370,  371,  372,  373,  374,
	  375,  376,  378,  380,  381,  382,  383,  384,  385,  386,  387,  388,
	  389,  390,  391,  392,  393,  395,  396,  397,  398,  399,  400,  401,
	  402,  403,  405,  406,  407,  408,  409,  410,  412,  415,  417,  418,
	  419,  421,  422,  420,  418,  419,  420,  418,  421,  422,    5,   15,
	   17,   31,   34,   37,   48,   76,   78,  156,  249,  414,  416,  417,
	    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,
	    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,
	    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,
	  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   81,
	   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   21,   31,  130,   60,   57,   31,   63,   57,   63,
	   63,   63,   63,   63,   63,   63,   63,   66,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   72,   33,   84,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   75,   33,   84,   84,   84,   84,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   17,   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,    0,   78,   33,   84,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   19,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   37,   37,   54,   37,   87,    0,    0,   39,    0,    0,   93,   90,
	   41,   96,   90,   96,   96,   96,   96,   96,   96,   96,   96,   99,
	    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 423;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 616 "java/src/main/java/gherkin/lexer/De.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
    
// line 623 "java/src/main/java/gherkin/lexer/De.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 884 "java/src/main/java/gherkin/lexer/De.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 916 "java/src/main/java/gherkin/lexer/De.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/de.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

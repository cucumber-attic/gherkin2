
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class No implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"


  private final Listener listener;

  public No(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/No.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   19,   20,   21,   39,   40,   41,   43,   45,   50,   55,
	   60,   65,   69,   73,   75,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   93,   95,  100,
	  107,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
	  123,  124,  125,  126,  127,  128,  129,  130,  131,  145,  147,  149,
	  151,  153,  155,  157,  159,  161,  163,  165,  167,  169,  171,  173,
	  175,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
	  218,  220,  222,  224,  226,  228,  230,  232,  234,  236,  238,  240,
	  242,  244,  246,  248,  250,  252,  254,  256,  258,  260,  262,  264,
	  266,  268,  270,  272,  274,  276,  278,  280,  282,  284,  286,  288,
	  290,  292,  294,  296,  298,  300,  302,  304,  306,  308,  310,  312,
	  314,  317,  319,  321,  323,  325,  327,  329,  331,  334,  336,  338,
	  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  360,  362,
	  364,  366,  368,  370,  372,  374,  376,  378,  380,  382,  384,  386,
	  388,  390,  392,  394,  396,  398,  400,  402,  404,  406,  408,  410,
	  412,  414,  416,  418,  420,  422,  424,  426,  428,  430,  432,  434,
	  436,  439,  441,  443,  445,  447,  449,  451,  453,  455,  457,  459,
	  461,  463,  465,  467,  469,  471,  473,  475,  477,  479,  482,  484,
	  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,  503,
	  505,  507,  509,  511,  513,  515,  517,  519,  520,  521,  522,  523,
	  524,  525,  526,  527,  528,  530,  531,  532,  533,  534,  535,  536,
	  537,  539,  540,  541,  557,  559,  561,  563,  565,  567,  569,  571,
	  573,  575,  577,  579,  581,  583,  585,  587,  589,  591,  593,  595,
	  597,  599,  601,  603,  605,  607,  609,  611,  613,  615,  617,  619,
	  621,  623,  625,  627,  629,  631,  633,  635,  637,  639,  641,  643,
	  645,  647,  649,  651,  653,  655,  657,  659,  661,  663,  665,  667,
	  670,  672,  674,  676,  678,  680,  682,  684,  687,  689,  691,  692,
	  693,  697,  703,  706,  708,  714,  732,  734,  736,  738,  740,  742,
	  744,  746,  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,
	  769,  771,  773,  775,  777,  779,  781,  783
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,   71,
	   77,   78,   79,   83,  124,    9,   13,  -69,  -65,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   69,   71,   77,   78,   79,   83,
	  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,
	   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,
	   95,   69,   78,   68,   95,   37,   32,   10,   13,   10,   13,   13,
	   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,
	   32,   64,    9,   13,   98,  115,  116,  114,   97,  107,  116,   32,
	   83,   99,  101,  110,   97,  114,  105,  111,   58,   10,   10,   10,
	   32,   35,   37,   42,   64,   69,   71,   77,   78,   79,   83,    9,
	   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,   10,   32,   10,   32,   34,   35,   37,
	   42,   64,   65,   66,   69,   71,   77,   78,   79,   83,  124,    9,
	   13,   97,  107,  103,  114,  117,  110,  110,   58,   10,   10,   10,
	   32,   35,   37,   42,   64,   65,   69,   71,   77,   78,   79,   83,
	    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,
	   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,
	   10,   68,   10,   95,   10,   37,   10,   32,   10,   98,   10,  115,
	   10,  116,   10,  114,   10,   97,   10,  107,   10,  116,   10,   32,
	   10,   83,   10,   99,   10,  101,   10,  110,   10,   97,   10,  114,
	   10,  105,   10,  111,   10,   58,   10,  103,   10,  101,   10,  110,
	   10,  115,   10,  107,   10,   97,   10,  112,   10,  105,   10,  116,
	   10,  116,   10,  101,   10,  110,  -61,   10,  -91,   10,   10,  114,
	   10,  103,  -61,   10,   99,  -91,   10,   10,  101,   10,  110,   10,
	   97,   10,  114,   10,  105,   10,  111,   10,   58,  109,   10,   97,
	   10,  108,  103,  107,  101,  110,  115,  107,   97,  112,   58,   10,
	   10,   10,   32,   35,   37,   64,   65,   66,   69,   83,    9,   13,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,   10,   98,   10,  115,   10,  116,   10,  114,
	   10,   97,   10,  107,   10,  116,   10,   32,   10,   83,   10,   99,
	   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,
	   10,   58,   10,   97,   10,  107,   10,  103,   10,  114,   10,  117,
	   10,  110,   10,  110,   10,  103,  107,   10,  101,   10,  110,   10,
	  115,   10,  107,   10,   97,   10,  112,   10,  115,   10,  101,   10,
	  109,   10,  112,   10,  108,   10,  101,   10,  114,   10,   99,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,
	   58,  109,   10,   97,   10,  108,  115,  101,  109,  112,  108,  101,
	  114,   58,   10,   10,   10,   32,   35,   69,  124,    9,   13,   10,
	  103,   10,  101,   10,  110,   10,  115,   10,  107,   10,   97,   10,
	  112,   10,   58,  105,  116,  116,  101,  110,  -61,  -91,  114,  103,
	  -61,   99,  -91,  101,  110,   97,  114,  105,  111,   58,  109,   10,
	   10,   10,   32,   35,   37,   42,   64,   65,   66,   69,   71,   77,
	   78,   79,   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,
	   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,
	   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,
	   98,   10,  115,   10,  116,   10,  114,   10,   97,   10,  107,   10,
	  116,   10,   32,   10,   83,   10,   99,   10,  101,   10,  110,   10,
	   97,   10,  114,   10,  105,   10,  111,   10,   58,   10,   97,   10,
	  107,   10,  103,   10,  114,   10,  117,   10,  110,   10,  110,   10,
	  103,   10,  101,   10,  110,   10,  115,   10,  107,   10,   97,   10,
	  112,   10,  105,   10,  116,   10,  116,   10,  101,   10,  110,  -61,
	   10,  -91,   10,   10,  114,   10,  103,  -61,   10,   99,  -91,   10,
	   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,
	   10,   58,  109,   10,   97,   10,  108,   97,  108,   32,  124,    9,
	   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,   10,   92,
	   10,   32,   92,  124,    9,   13,   10,   32,   34,   35,   37,   42,
	   64,   65,   66,   69,   71,   77,   78,   79,   83,  124,    9,   13,
	   10,  103,   10,  101,   10,  110,   10,  115,   10,  107,   10,   97,
	   10,  112,   10,   58,   10,  105,   10,  116,   10,  116,   10,  101,
	   10,  110,  -61,   10,  -91,   10,   10,  114,   10,  103,  -61,   10,
	   99,  -91,   10,   10,  101,   10,  110,   10,   97,   10,  114,   10,
	  105,   10,  111,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   17,    1,    1,   16,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,   12,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	   16,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    9,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
	    2,    1,    1,   14,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    1,    1,
	    2,    4,    3,    2,    4,   16,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   19,   21,   23,   41,   43,   45,   48,   51,   56,   61,
	   66,   71,   75,   79,   82,   84,   86,   88,   90,   92,   94,   96,
	   98,  100,  102,  104,  106,  108,  110,  112,  114,  117,  120,  125,
	  132,  137,  139,  141,  143,  145,  147,  149,  151,  153,  155,  157,
	  159,  161,  163,  165,  167,  169,  171,  173,  175,  189,  192,  195,
	  198,  201,  204,  207,  210,  213,  216,  219,  222,  225,  228,  231,
	  234,  252,  254,  256,  258,  260,  262,  264,  266,  268,  270,  272,
	  287,  290,  293,  296,  299,  302,  305,  308,  311,  314,  317,  320,
	  323,  326,  329,  332,  335,  338,  341,  344,  347,  350,  353,  356,
	  359,  362,  365,  368,  371,  374,  377,  380,  383,  386,  389,  392,
	  395,  398,  401,  404,  407,  410,  413,  416,  419,  422,  425,  428,
	  431,  435,  438,  441,  444,  447,  450,  453,  456,  460,  463,  466,
	  469,  471,  473,  475,  477,  479,  481,  483,  485,  487,  498,  501,
	  504,  507,  510,  513,  516,  519,  522,  525,  528,  531,  534,  537,
	  540,  543,  546,  549,  552,  555,  558,  561,  564,  567,  570,  573,
	  576,  579,  582,  585,  588,  591,  594,  597,  600,  603,  606,  609,
	  612,  616,  619,  622,  625,  628,  631,  634,  637,  640,  643,  646,
	  649,  652,  655,  658,  661,  664,  667,  670,  673,  676,  680,  683,
	  686,  688,  690,  692,  694,  696,  698,  700,  702,  704,  706,  713,
	  716,  719,  722,  725,  728,  731,  734,  737,  739,  741,  743,  745,
	  747,  749,  751,  753,  755,  758,  760,  762,  764,  766,  768,  770,
	  772,  775,  777,  779,  795,  798,  801,  804,  807,  810,  813,  816,
	  819,  822,  825,  828,  831,  834,  837,  840,  843,  846,  849,  852,
	  855,  858,  861,  864,  867,  870,  873,  876,  879,  882,  885,  888,
	  891,  894,  897,  900,  903,  906,  909,  912,  915,  918,  921,  924,
	  927,  930,  933,  936,  939,  942,  945,  948,  951,  954,  957,  960,
	  964,  967,  970,  973,  976,  979,  982,  985,  989,  992,  995,  997,
	  999, 1003, 1009, 1013, 1016, 1022, 1040, 1043, 1046, 1049, 1052, 1055,
	 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091,
	 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,    2,    0,   18,    0,    2,    0,    3,
	    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
	   15,   16,   17,    2,    0,   19,    0,   20,    0,   22,   23,   21,
	   25,   26,   24,   29,   28,   30,   28,   27,   33,   32,   34,   32,
	   31,   33,   32,   35,   32,   31,   33,   32,   36,   32,   31,   38,
	   37,   37,    0,    3,   39,   39,    0,   41,   42,   40,    3,    0,
	   43,    0,   44,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   56,    0,   57,    0,   59,   60,   58,   62,   63,   61,
	    0,    0,    0,    0,   64,   65,   66,   65,   65,   68,   67,   64,
	    3,   69,    8,   69,    0,   70,    0,   71,    0,   72,    0,   73,
	    0,   74,    0,   75,    0,   76,    0,   77,    0,   78,    0,   79,
	    0,   80,    0,   81,    0,   82,    0,   83,    0,   84,    0,   85,
	    0,   86,    0,   88,   87,   90,   89,   90,   91,   92,   93,   94,
	   92,   95,   96,   97,   98,   99,  100,   91,   89,   90,  101,   89,
	   90,  102,   89,   90,  103,   89,   90,  104,   89,   90,  105,   89,
	   90,  106,   89,   90,  107,   89,   90,  108,   89,   90,  109,   89,
	   90,  110,   89,   90,  111,   89,   90,  112,   89,   90,  113,   89,
	   90,  114,   89,   90,  115,   89,  117,  116,  118,  119,  120,  121,
	  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  116,    0,
	  132,    0,  133,    0,  134,    0,  135,    0,  136,    0,  137,    0,
	  138,    0,  139,    0,  141,  140,  143,  142,  143,  144,  145,  146,
	  147,  145,  148,  149,  150,  151,  152,  153,  154,  144,  142,  143,
	  155,  142,  143,  156,  142,  143,  157,  142,  143,  158,  142,  143,
	  159,  142,  143,  160,  142,  143,  161,  142,  143,  162,  142,  143,
	  163,  142,  143,  164,  142,  143,  165,  142,  143,  166,  142,  143,
	  167,  142,  143,  168,  142,  143,  169,  142,  143,  170,  142,  143,
	  171,  142,  143,  172,  142,  143,  173,  142,  143,  174,  142,  143,
	  175,  142,  143,  176,  142,  143,  177,  142,  143,  178,  142,  143,
	  179,  142,  143,  180,  142,  143,  181,  142,  143,  182,  142,  143,
	  183,  142,  143,  184,  142,  143,  185,  142,  143,  169,  142,  143,
	  186,  142,  143,  187,  142,  143,  188,  142,  143,  189,  142,  143,
	  190,  142,  143,  191,  142,  143,  185,  142,  143,  192,  142,  143,
	  193,  142,  143,  194,  142,  143,  195,  142,  143,  194,  142,  196,
	  143,  142,  197,  143,  142,  143,  194,  142,  143,  194,  142,  198,
	  143,  199,  142,  194,  143,  142,  143,  200,  142,  143,  201,  142,
	  143,  202,  142,  143,  203,  142,  143,  204,  142,  143,  205,  142,
	  143,  169,  206,  142,  143,  207,  142,  143,  185,  142,  208,  209,
	    0,  210,    0,  211,    0,  212,    0,  213,    0,  214,    0,  215,
	    0,  216,    0,  218,  217,  220,  219,  220,  221,  222,  223,  222,
	  224,  225,  226,  227,  221,  219,  220,  228,  219,  220,  229,  219,
	  220,  230,  219,  220,  231,  219,  220,  232,  219,  220,  233,  219,
	  220,  234,  219,  220,  235,  219,  220,  236,  219,  220,  237,  219,
	  220,  238,  219,  220,  239,  219,  220,  240,  219,  220,  241,  219,
	  220,  242,  219,  220,  243,  219,  220,  244,  219,  220,  245,  219,
	  220,  246,  219,  220,  247,  219,  220,  248,  219,  220,  249,  219,
	  220,  250,  219,  220,  251,  219,  220,  252,  219,  220,  253,  219,
	  220,  254,  219,  220,  255,  219,  220,  256,  219,  220,  257,  219,
	  220,  258,  219,  220,  259,  219,  220,  260,  219,  220,  261,  219,
	  220,  262,  219,  220,  263,  219,  220,  264,  219,  220,  257,  219,
	  220,  265,  266,  219,  220,  267,  219,  220,  268,  219,  220,  269,
	  219,  220,  270,  219,  220,  271,  219,  220,  257,  219,  220,  272,
	  219,  220,  273,  219,  220,  274,  219,  220,  275,  219,  220,  276,
	  219,  220,  277,  219,  220,  257,  219,  220,  278,  219,  220,  279,
	  219,  220,  280,  219,  220,  281,  219,  220,  282,  219,  220,  283,
	  219,  220,  284,  219,  220,  258,  285,  219,  220,  286,  219,  220,
	  257,  219,  287,    0,  288,    0,  289,    0,  290,    0,  291,    0,
	  292,    0,  293,    0,  294,    0,  296,  295,  298,  297,  298,  299,
	  300,  301,  300,  299,  297,  298,  302,  297,  298,  303,  297,  298,
	  304,  297,  298,  305,  297,  298,  306,  297,  298,  307,  297,  298,
	  308,  297,  298,  309,  297,  310,    0,  311,    0,  312,    0,  313,
	    0,  312,    0,  314,    0,  315,    0,  312,    0,  312,    0,  316,
	  317,    0,  312,    0,  318,    0,  319,    0,  320,    0,  321,    0,
	  322,    0,  323,    0,  324,  325,    0,  327,  326,  329,  328,  329,
	  330,  331,  332,  333,  331,  334,  335,  336,  337,  338,  339,  340,
	  341,  330,  328,  329,  342,  328,  329,  343,  328,  329,  344,  328,
	  329,  345,  328,  329,  346,  328,  329,  347,  328,  329,  348,  328,
	  329,  349,  328,  329,  350,  328,  329,  351,  328,  329,  352,  328,
	  329,  353,  328,  329,  354,  328,  329,  355,  328,  329,  356,  328,
	  329,  357,  328,  329,  358,  328,  329,  359,  328,  329,  360,  328,
	  329,  361,  328,  329,  362,  328,  329,  363,  328,  329,  364,  328,
	  329,  365,  328,  329,  366,  328,  329,  367,  328,  329,  368,  328,
	  329,  369,  328,  329,  370,  328,  329,  371,  328,  329,  372,  328,
	  329,  356,  328,  329,  373,  328,  329,  374,  328,  329,  375,  328,
	  329,  376,  328,  329,  377,  328,  329,  378,  328,  329,  372,  328,
	  329,  379,  328,  329,  380,  328,  329,  381,  328,  329,  382,  328,
	  329,  383,  328,  329,  384,  328,  329,  372,  328,  329,  385,  328,
	  329,  386,  328,  329,  387,  328,  329,  388,  328,  329,  387,  328,
	  389,  329,  328,  390,  329,  328,  329,  387,  328,  329,  387,  328,
	  391,  329,  392,  328,  387,  329,  328,  329,  393,  328,  329,  394,
	  328,  329,  395,  328,  329,  396,  328,  329,  397,  328,  329,  398,
	  328,  329,  356,  399,  328,  329,  400,  328,  329,  372,  328,  401,
	    0,   85,    0,  402,  403,  402,    0,  406,  405,  407,  408,  405,
	  404,    0,  410,  411,  409,    0,  410,  409,  406,  412,  410,  411,
	  412,  409,  406,  413,  414,  415,  416,  417,  418,  419,  420,  421,
	  422,  423,  424,  425,  426,  427,  413,    0,   90,  428,   89,   90,
	  429,   89,   90,  430,   89,   90,  431,   89,   90,  432,   89,   90,
	  433,   89,   90,  434,   89,   90,  115,   89,   90,  435,   89,   90,
	  436,   89,   90,  437,   89,   90,  438,   89,   90,  437,   89,  439,
	   90,   89,  440,   90,   89,   90,  437,   89,   90,  437,   89,  441,
	   90,  442,   89,  437,   90,   89,   90,  443,   89,   90,  444,   89,
	   90,  445,   89,   90,  446,   89,   90,  447,   89,   90,  434,   89,
	  448,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   73,  143,
	  235,  238,  240,  243,  244,  324,    3,    6,    7,    8,    9,    8,
	    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,
	   13,   14,    4,   14,   15,    4,   16,   18,   19,   20,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   30,  355,   32,   33,    4,
	   16,   33,    4,   16,   35,   36,    4,   35,   34,   36,   38,   39,
	   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
	   52,   53,   54,   55,   56,   55,   56,   56,    4,   57,   71,  330,
	  338,  341,  343,  346,  347,   58,   59,   60,   61,   62,   63,   64,
	   65,   66,   67,   68,   69,   70,    4,   72,    4,    4,    5,   15,
	   17,   31,   34,   37,   73,  143,  235,  238,  240,  243,  244,  324,
	   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   82,   83,
	   83,    4,   84,   98,   99,  116,  123,  126,  128,  131,  132,   85,
	   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
	    4,   72,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
	  110,  111,  112,  113,  114,  115,  117,  118,  119,  120,  121,  122,
	  124,  125,   98,  127,  129,  130,  133,  134,  135,  136,  137,  138,
	  139,  140,  141,  142,  144,  216,  145,  146,  147,  148,  149,  150,
	  151,  152,  153,  152,  153,  153,    4,  154,  168,  185,  192,  206,
	  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,
	  167,    4,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
	  179,  180,  181,  182,  183,  184,   72,  186,  187,  188,  189,  190,
	  191,  193,  199,  194,  195,  196,  197,  198,  200,  201,  202,  203,
	  204,  205,  207,  208,  209,  210,  211,  212,  213,  214,  215,  217,
	  218,  219,  220,  221,  222,  223,  224,  225,  226,  225,  226,  226,
	    4,  227,  228,  229,  230,  231,  232,  233,  234,   72,  236,  237,
	   31,  239,  241,  242,  245,  246,  247,  248,  249,  250,  251,  252,
	  253,  322,  254,  255,  254,  255,  255,    4,  256,  270,  271,  288,
	  295,  302,  305,  307,  310,  311,  257,  258,  259,  260,  261,  262,
	  263,  264,  265,  266,  267,  268,  269,    4,   72,  272,  273,  274,
	  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
	  287,  289,  290,  291,  292,  293,  294,  296,  297,  298,  299,  300,
	  301,  303,  304,  270,  306,  308,  309,  312,  313,  314,  315,  316,
	  317,  318,  319,  320,  321,  323,  324,  325,  326,  328,  329,  327,
	  325,  326,  327,  325,  328,  329,    5,   15,   17,   31,   34,   37,
	   73,  143,  235,  238,  240,  243,  244,  324,  331,  332,  333,  334,
	  335,  336,  337,  339,  340,   71,  342,  344,  345,  348,  349,  350,
	  351,  352,  353,  354,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,
	    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,
	    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,
	  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   19,   19,   31,  130,   60,   57,
	   31,   63,   57,   63,   63,   63,   63,   63,   63,   63,   63,   66,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   72,   33,   84,   84,   84,   84,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   15,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,
	   81,   84,    0,    0,    0,    0,    0,    0,    0,   21,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   75,   33,   84,   84,   84,
	   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   17,   17,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   37,   37,   54,   37,
	   87,    0,    0,   39,    0,    0,   93,   90,   41,   96,   90,   96,
	   96,   96,   96,   96,   96,   96,   96,   99,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 355;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 549 "java/src/main/java/gherkin/lexer/No.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
    
// line 556 "java/src/main/java/gherkin/lexer/No.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 817 "java/src/main/java/gherkin/lexer/No.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 849 "java/src/main/java/gherkin/lexer/No.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/no.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

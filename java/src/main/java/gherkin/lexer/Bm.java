
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Bm implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"


  private final Listener listener;

  public Bm(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Bm.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   21,   22,   23,   43,   44,   45,   47,   49,   54,   59,
	   64,   69,   73,   77,   79,   80,   81,   82,   83,   84,   85,   86,
	   87,   88,   89,   90,   91,   92,   93,   94,   95,   97,   99,  104,
	  111,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
	  127,  128,  129,  130,  131,  132,  133,  134,  141,  143,  145,  147,
	  149,  151,  153,  173,  174,  175,  176,  177,  178,  179,  180,  181,
	  182,  183,  195,  197,  199,  201,  203,  205,  207,  209,  211,  213,
	  215,  217,  219,  221,  223,  225,  227,  229,  231,  233,  235,  237,
	  239,  241,  243,  245,  247,  249,  251,  253,  255,  257,  259,  261,
	  263,  265,  267,  269,  271,  273,  275,  277,  279,  281,  283,  285,
	  287,  289,  291,  293,  295,  297,  299,  301,  303,  305,  307,  309,
	  311,  313,  315,  317,  319,  321,  323,  324,  325,  326,  327,  328,
	  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
	  341,  342,  343,  344,  360,  362,  364,  366,  368,  370,  372,  374,
	  376,  378,  380,  382,  384,  386,  388,  390,  392,  394,  396,  398,
	  400,  402,  404,  406,  408,  410,  412,  414,  416,  418,  420,  422,
	  424,  426,  428,  430,  432,  434,  436,  438,  440,  442,  444,  446,
	  448,  450,  452,  454,  456,  458,  460,  462,  464,  466,  468,  470,
	  472,  474,  476,  478,  480,  482,  484,  486,  488,  490,  492,  494,
	  495,  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
	  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,  517,  532,
	  534,  536,  538,  540,  542,  544,  546,  548,  550,  552,  554,  556,
	  558,  560,  562,  564,  566,  568,  570,  572,  574,  576,  578,  580,
	  582,  584,  586,  588,  590,  592,  594,  596,  598,  600,  602,  604,
	  606,  608,  610,  612,  614,  616,  618,  620,  622,  624,  626,  627,
	  628,  629,  630,  631,  632,  633,  634,  635,  652,  654,  656,  658,
	  660,  662,  664,  666,  668,  670,  672,  674,  676,  678,  680,  682,
	  684,  686,  688,  690,  692,  694,  696,  698,  700,  702,  704,  706,
	  708,  710,  712,  714,  716,  718,  720,  722,  724,  726,  728,  730,
	  732,  734,  736,  738,  740,  742,  744,  746,  748,  750,  752,  754,
	  756,  758,  760,  762,  764,  766,  768,  770,  772,  774,  776,  778,
	  780,  782,  784,  786,  788,  790,  792,  794,  796,  798,  800,  802,
	  804,  806,  808,  810,  812,  813,  814,  815,  816,  820,  826,  829,
	  831,  837,  857
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   67,   68,
	   70,   75,   76,   77,   83,   84,  124,    9,   13,  -69,  -65,   10,
	   32,   34,   35,   37,   42,   64,   65,   66,   67,   68,   70,   75,
	   76,   77,   83,   84,  124,    9,   13,   34,   34,   10,   13,   10,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,    9,
	   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,   65,
	   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   32,   10,
	   13,   10,   13,   13,   32,   64,    9,   10,    9,   10,   13,   32,
	   64,   11,   12,   10,   32,   64,    9,   13,  112,   97,   98,  105,
	  108,   97,   97,  103,  105,  111,  110,  116,  111,  104,   32,   58,
	   10,   10,   10,   32,   35,   70,  124,    9,   13,   10,  117,   10,
	  110,   10,  103,   10,  115,   10,  105,   10,   58,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   67,   68,   70,   75,   76,   77,
	   83,   84,  124,    9,   13,   97,  110,  117,  110,  103,  115,  105,
	   58,   10,   10,   10,   32,   35,   37,   64,   67,   70,   76,   77,
	   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,
	   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,
	   78,   10,   68,   10,   95,   10,   37,   10,  111,   10,  110,   10,
	  116,   10,  111,   10,  104,   10,   32,   10,   58,   10,  117,   10,
	  110,   10,  103,   10,  115,   10,  105,   10,   97,   10,  116,   10,
	   97,   10,  114,   10,   32,   10,   66,   10,  101,   10,  108,   10,
	   97,   10,  107,   10,   97,   10,  110,   10,  103,   10,  101,   10,
	  110,   10,  103,   10,  103,   10,   97,   10,  114,   10,  105,   10,
	  115,   10,  107,   10,   97,   10,  110,   10,   32,   10,   83,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,
	  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,  101,
	  109,  117,  100,  105,   97,  116,   97,  114,   32,   66,  101,  108,
	   97,  107,   97,  110,  103,   58,   10,   10,   10,   32,   35,   37,
	   42,   64,   65,   66,   68,   70,   75,   77,   83,   84,    9,   13,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,   10,   32,   10,  112,   10,   97,   10,   98,
	   10,  105,   10,  108,   10,   97,   10,   97,   10,  103,   10,  105,
	   10,   97,   10,  110,   10,  117,   10,  110,   10,  103,   10,  115,
	   10,  105,   10,   58,   10,  101,   10,  109,   10,  117,   10,  100,
	   10,  105,   10,  101,   10,  110,   10,  103,   10,  103,   10,   97,
	   10,  114,   10,  105,   10,  115,   10,  107,   10,   97,   10,  110,
	   10,   32,   10,   83,   10,  101,   10,  110,   10,   97,   10,  114,
	   10,  105,   10,  111,   10,   32,   10,  101,   10,  110,   10,   97,
	   10,  114,   10,  105,   10,  111,   10,  101,   10,  116,   10,   97,
	   10,  112,  101,  110,  103,  103,   97,  114,  105,  115,  107,   97,
	  110,   32,   83,  101,  110,   97,  114,  105,  111,   32,   58,   10,
	   10,   10,   32,   35,   37,   42,   64,   65,   66,   68,   70,   75,
	   83,   84,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,  112,
	   10,   97,   10,   98,   10,  105,   10,  108,   10,   97,   10,   97,
	   10,  103,   10,  105,   10,   97,   10,  110,   10,  117,   10,  110,
	   10,  103,   10,  115,   10,  105,   10,   58,   10,  101,   10,  109,
	   10,  117,   10,  100,   10,  105,   10,  101,   10,  110,   10,   97,
	   10,  114,   10,  105,   10,  111,   10,  101,   10,  116,   10,   97,
	   10,  112,  101,  110,   97,  114,  105,  111,   58,   10,   10,   10,
	   32,   35,   37,   42,   64,   65,   66,   68,   70,   75,   76,   77,
	   83,   84,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,  112,
	   10,   97,   10,   98,   10,  105,   10,  108,   10,   97,   10,   97,
	   10,  103,   10,  105,   10,   97,   10,  110,   10,  117,   10,  110,
	   10,  103,   10,  115,   10,  105,   10,   58,   10,  101,   10,  109,
	   10,  117,   10,  100,   10,  105,   10,   97,   10,  116,   10,   97,
	   10,  114,   10,   32,   10,   66,   10,  101,   10,  108,   10,   97,
	   10,  107,   10,   97,   10,  110,   10,  103,   10,  101,   10,  110,
	   10,  103,   10,  103,   10,   97,   10,  114,   10,  105,   10,  115,
	   10,  107,   10,   97,   10,  110,   10,   32,   10,   83,   10,  101,
	   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   32,
	   10,  101,   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,
	   10,  101,   10,  116,   10,   97,   10,  112,  101,  116,   97,  112,
	   32,  124,    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,
	  124,   10,   92,   10,   32,   92,  124,    9,   13,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   67,   68,   70,   75,   76,   77,
	   83,   84,  124,    9,   13,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   19,    1,    1,   18,    1,    1,    2,    2,    3,    3,    3,
	    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    5,
	    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    5,    2,    2,    2,    2,
	    2,    2,   18,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,   10,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,   14,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,   15,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    1,    1,    1,    1,    2,    4,    3,    2,
	    4,   18,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    0,    0,
	    1,    1,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   21,   23,   25,   45,   47,   49,   52,   55,   60,   65,
	   70,   75,   79,   83,   86,   88,   90,   92,   94,   96,   98,  100,
	  102,  104,  106,  108,  110,  112,  114,  116,  118,  121,  124,  129,
	  136,  141,  143,  145,  147,  149,  151,  153,  155,  157,  159,  161,
	  163,  165,  167,  169,  171,  173,  175,  177,  184,  187,  190,  193,
	  196,  199,  202,  222,  224,  226,  228,  230,  232,  234,  236,  238,
	  240,  242,  254,  257,  260,  263,  266,  269,  272,  275,  278,  281,
	  284,  287,  290,  293,  296,  299,  302,  305,  308,  311,  314,  317,
	  320,  323,  326,  329,  332,  335,  338,  341,  344,  347,  350,  353,
	  356,  359,  362,  365,  368,  371,  374,  377,  380,  383,  386,  389,
	  392,  395,  398,  401,  404,  407,  410,  413,  416,  419,  422,  425,
	  428,  431,  434,  437,  440,  443,  446,  448,  450,  452,  454,  456,
	  458,  460,  462,  464,  466,  468,  470,  472,  474,  476,  478,  480,
	  482,  484,  486,  488,  504,  507,  510,  513,  516,  519,  522,  525,
	  528,  531,  534,  537,  540,  543,  546,  549,  552,  555,  558,  561,
	  564,  567,  570,  573,  576,  579,  582,  585,  588,  591,  594,  597,
	  600,  603,  606,  609,  612,  615,  618,  621,  624,  627,  630,  633,
	  636,  639,  642,  645,  648,  651,  654,  657,  660,  663,  666,  669,
	  672,  675,  678,  681,  684,  687,  690,  693,  696,  699,  702,  705,
	  707,  709,  711,  713,  715,  717,  719,  721,  723,  725,  727,  729,
	  731,  733,  735,  737,  739,  741,  743,  745,  747,  749,  751,  766,
	  769,  772,  775,  778,  781,  784,  787,  790,  793,  796,  799,  802,
	  805,  808,  811,  814,  817,  820,  823,  826,  829,  832,  835,  838,
	  841,  844,  847,  850,  853,  856,  859,  862,  865,  868,  871,  874,
	  877,  880,  883,  886,  889,  892,  895,  898,  901,  904,  907,  909,
	  911,  913,  915,  917,  919,  921,  923,  925,  942,  945,  948,  951,
	  954,  957,  960,  963,  966,  969,  972,  975,  978,  981,  984,  987,
	  990,  993,  996,  999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023,
	 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059,
	 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095,
	 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131,
	 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167,
	 1170, 1173, 1176, 1179, 1182, 1184, 1186, 1188, 1190, 1194, 1200, 1204,
	 1207, 1213, 1233
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   18,   19,    2,    0,   20,    0,    2,
	    0,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   18,   19,    2,    0,   21,    0,   22,
	    0,   24,   25,   23,   27,   28,   26,   31,   30,   32,   30,   29,
	   35,   34,   36,   34,   33,   35,   34,   37,   34,   33,   35,   34,
	   38,   34,   33,   40,   39,   39,    0,    3,   41,   41,    0,   43,
	   44,   42,    3,    0,   45,    0,   46,    0,   47,    0,   48,    0,
	   49,    0,   50,    0,   51,    0,   52,    0,   53,    0,   54,    0,
	   55,    0,   56,    0,   57,    0,   58,    0,   59,    0,   61,   62,
	   60,   64,   65,   63,    0,    0,    0,    0,   66,   67,   68,   67,
	   67,   70,   69,   66,    3,   71,    8,   71,    0,   72,    0,   73,
	    0,   74,    0,   75,    0,   76,    0,   77,    0,   78,    0,   79,
	    0,   77,    0,   80,    0,   81,    0,   82,    0,   83,    0,   84,
	    0,   85,    0,   86,    0,   88,   87,   90,   89,   90,   91,   92,
	   93,   92,   91,   89,   90,   94,   89,   90,   95,   89,   90,   96,
	   89,   90,   97,   89,   90,   98,   89,   90,   99,   89,  101,  100,
	  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
	  114,  115,  116,  117,  100,    0,  118,    0,   77,    0,  119,    0,
	  120,    0,  121,    0,  122,    0,  123,    0,  124,    0,  126,  125,
	  128,  127,  128,  129,  130,  131,  130,  132,  133,  134,  135,  136,
	  129,  127,  128,  137,  127,  128,  138,  127,  128,  139,  127,  128,
	  140,  127,  128,  141,  127,  128,  142,  127,  128,  143,  127,  128,
	  144,  127,  128,  145,  127,  128,  146,  127,  128,  147,  127,  128,
	  148,  127,  128,  149,  127,  128,  150,  127,  128,  151,  127,  128,
	  152,  127,  128,  153,  127,  128,  154,  127,  128,  155,  127,  128,
	  156,  127,  128,  157,  127,  128,  158,  127,  128,  159,  127,  128,
	  160,  127,  128,  161,  127,  128,  156,  127,  128,  162,  127,  128,
	  163,  127,  128,  164,  127,  128,  165,  127,  128,  166,  127,  128,
	  167,  127,  128,  168,  127,  128,  169,  127,  128,  170,  127,  128,
	  171,  127,  128,  172,  127,  128,  173,  127,  128,  156,  127,  128,
	  174,  127,  128,  175,  127,  128,  176,  127,  128,  177,  127,  128,
	  178,  127,  128,  179,  127,  128,  180,  127,  128,  181,  127,  128,
	  182,  127,  128,  183,  127,  128,  184,  127,  128,  185,  127,  128,
	  186,  127,  128,  187,  127,  128,  188,  127,  128,  189,  127,  128,
	  190,  127,  128,  191,  127,  128,  155,  127,  128,  192,  127,  128,
	  193,  127,  128,  194,  127,  128,  195,  127,  128,  196,  127,  128,
	  156,  127,  197,    0,  198,    0,  199,    0,  200,    0,  201,    0,
	  202,    0,  203,    0,  204,    0,  205,    0,  206,    0,  207,    0,
	  208,    0,  209,    0,  210,    0,  211,    0,  212,    0,  213,    0,
	  214,    0,  215,    0,  217,  216,  219,  218,  219,  220,  221,  222,
	  223,  221,  224,  225,  226,  227,  228,  229,  230,  231,  220,  218,
	  219,  232,  218,  219,  233,  218,  219,  234,  218,  219,  235,  218,
	  219,  236,  218,  219,  237,  218,  219,  238,  218,  219,  239,  218,
	  219,  240,  218,  219,  241,  218,  219,  242,  218,  219,  243,  218,
	  219,  244,  218,  219,  245,  218,  219,  246,  218,  219,  247,  218,
	  219,  248,  218,  219,  249,  218,  219,  250,  218,  219,  251,  218,
	  219,  252,  218,  219,  253,  218,  219,  254,  218,  219,  252,  218,
	  219,  255,  218,  219,  252,  218,  219,  256,  218,  219,  257,  218,
	  219,  258,  218,  219,  259,  218,  219,  260,  218,  219,  246,  218,
	  219,  261,  218,  219,  262,  218,  219,  263,  218,  219,  264,  218,
	  219,  265,  218,  219,  266,  218,  219,  267,  218,  219,  268,  218,
	  219,  269,  218,  219,  270,  218,  219,  271,  218,  219,  272,  218,
	  219,  273,  218,  219,  274,  218,  219,  275,  218,  219,  276,  218,
	  219,  277,  218,  219,  278,  218,  219,  279,  218,  219,  280,  218,
	  219,  281,  218,  219,  282,  218,  219,  283,  218,  219,  284,  218,
	  219,  260,  218,  219,  285,  218,  219,  286,  218,  219,  287,  218,
	  219,  288,  218,  219,  289,  218,  219,  260,  218,  219,  290,  218,
	  219,  291,  218,  219,  292,  218,  219,  254,  218,  293,    0,  294,
	    0,  295,    0,  296,    0,  297,    0,  298,    0,  299,    0,  300,
	    0,  301,    0,  302,    0,  303,    0,  304,    0,  305,    0,  306,
	    0,  307,    0,  308,    0,  309,    0,  310,    0,  311,    0,  312,
	    0,  313,    0,  315,  314,  317,  316,  317,  318,  319,  320,  321,
	  319,  322,  323,  324,  325,  326,  327,  328,  318,  316,  317,  329,
	  316,  317,  330,  316,  317,  331,  316,  317,  332,  316,  317,  333,
	  316,  317,  334,  316,  317,  335,  316,  317,  336,  316,  317,  337,
	  316,  317,  338,  316,  317,  339,  316,  317,  340,  316,  317,  341,
	  316,  317,  342,  316,  317,  343,  316,  317,  344,  316,  317,  345,
	  316,  317,  346,  316,  317,  347,  316,  317,  348,  316,  317,  349,
	  316,  317,  350,  316,  317,  351,  316,  317,  349,  316,  317,  352,
	  316,  317,  349,  316,  317,  353,  316,  317,  354,  316,  317,  355,
	  316,  317,  356,  316,  317,  357,  316,  317,  343,  316,  317,  358,
	  316,  317,  359,  316,  317,  360,  316,  317,  361,  316,  317,  362,
	  316,  317,  363,  316,  317,  364,  316,  317,  365,  316,  317,  366,
	  316,  317,  367,  316,  317,  357,  316,  317,  368,  316,  317,  369,
	  316,  317,  370,  316,  317,  351,  316,  371,    0,  372,    0,  373,
	    0,  374,    0,  375,    0,  376,    0,  377,    0,  379,  378,  381,
	  380,  381,  382,  383,  384,  385,  383,  386,  387,  388,  389,  390,
	  391,  392,  393,  394,  382,  380,  381,  395,  380,  381,  396,  380,
	  381,  397,  380,  381,  398,  380,  381,  399,  380,  381,  400,  380,
	  381,  401,  380,  381,  402,  380,  381,  403,  380,  381,  404,  380,
	  381,  405,  380,  381,  406,  380,  381,  407,  380,  381,  408,  380,
	  381,  409,  380,  381,  410,  380,  381,  411,  380,  381,  412,  380,
	  381,  413,  380,  381,  414,  380,  381,  415,  380,  381,  416,  380,
	  381,  417,  380,  381,  415,  380,  381,  418,  380,  381,  415,  380,
	  381,  419,  380,  381,  420,  380,  381,  421,  380,  381,  422,  380,
	  381,  423,  380,  381,  409,  380,  381,  424,  380,  381,  425,  380,
	  381,  426,  380,  381,  427,  380,  381,  428,  380,  381,  429,  380,
	  381,  430,  380,  381,  431,  380,  381,  432,  380,  381,  433,  380,
	  381,  434,  380,  381,  435,  380,  381,  436,  380,  381,  437,  380,
	  381,  438,  380,  381,  439,  380,  381,  440,  380,  381,  423,  380,
	  381,  441,  380,  381,  442,  380,  381,  443,  380,  381,  444,  380,
	  381,  445,  380,  381,  446,  380,  381,  447,  380,  381,  448,  380,
	  381,  449,  380,  381,  450,  380,  381,  451,  380,  381,  452,  380,
	  381,  453,  380,  381,  454,  380,  381,  455,  380,  381,  456,  380,
	  381,  457,  380,  381,  458,  380,  381,  459,  380,  381,  423,  380,
	  381,  460,  380,  381,  461,  380,  381,  462,  380,  381,  463,  380,
	  381,  464,  380,  381,  423,  380,  381,  465,  380,  381,  466,  380,
	  381,  467,  380,  381,  417,  380,  468,    0,  469,    0,  470,    0,
	   79,    0,  471,  472,  471,    0,  475,  474,  476,  477,  474,  473,
	    0,  479,  480,  478,    0,  479,  478,  475,  481,  479,  480,  481,
	  478,  475,  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,
	  492,  493,  494,  495,  496,  497,  498,  482,    0,  499,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   15,   17,   31,   34,   37,   43,   46,
	   63,   65,  138,  143,  227,  298,  388,  392,    3,    6,    7,    8,
	    9,    8,    8,    9,    8,   10,   10,   10,   11,   10,   10,   10,
	   11,   12,   13,   14,    4,   14,   15,    4,   16,   18,   19,   20,
	   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,  398,   32,
	   33,    4,   16,   33,    4,   16,   35,   36,    4,   35,   34,   36,
	   38,   39,   40,   41,   42,   31,   44,   45,   47,   48,   49,   50,
	   51,   52,   53,   54,   55,   54,   55,   55,    4,   56,   57,   58,
	   59,   60,   61,   62,    4,    4,    5,   15,   17,   31,   34,   37,
	   43,   46,   63,   65,  138,  143,  227,  298,  388,  392,   64,   66,
	   67,   68,   69,   70,   71,   72,   73,   72,   73,   73,    4,   74,
	   88,   95,  100,  113,  132,   75,   76,   77,   78,   79,   80,   81,
	   82,   83,   84,   85,   86,   87,    4,   89,   90,   91,   92,   93,
	   94,   62,   96,   97,   98,   99,  101,  102,  103,  104,  105,  106,
	  107,  108,  109,  110,  111,  112,  114,  115,  116,  117,  118,  119,
	  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
	  133,  134,  135,  136,  137,  139,  140,  141,  142,   63,  144,  145,
	  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
	  158,  159,  158,  159,  159,    4,  160,  174,  175,  181,  184,  186,
	  192,  197,  217,  223,  161,  162,  163,  164,  165,  166,  167,  168,
	  169,  170,  171,  172,  173,    4,   62,  176,  177,  178,  179,  180,
	  174,  182,  183,  185,  187,  188,  189,  190,  191,  193,  194,  195,
	  196,  184,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
	  208,  209,  210,  211,  212,  213,  214,  215,  216,  218,  219,  220,
	  221,  222,  224,  225,  226,  228,  229,  230,  231,  232,  233,  234,
	  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
	  247,  248,  249,  250,  249,  250,  250,    4,  251,  265,  266,  272,
	  275,  277,  283,  288,  294,  252,  253,  254,  255,  256,  257,  258,
	  259,  260,  261,  262,  263,  264,    4,   62,  267,  268,  269,  270,
	  271,  265,  273,  274,  276,  278,  279,  280,  281,  282,  284,  285,
	  286,  287,  275,  289,  290,  291,  292,  293,  295,  296,  297,  299,
	  300,  301,  302,  303,  304,  305,  306,  307,  306,  307,  307,    4,
	  308,  322,  323,  329,  332,  334,  340,  345,  358,  378,  384,  309,
	  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
	    4,   62,  324,  325,  326,  327,  328,  322,  330,  331,  333,  335,
	  336,  337,  338,  339,  341,  342,  343,  344,  332,  346,  347,  348,
	  349,  350,  351,  352,  353,  354,  355,  356,  357,  359,  360,  361,
	  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,
	  374,  375,  376,  377,  379,  380,  381,  382,  383,  385,  386,  387,
	  389,  390,  391,  392,  393,  394,  396,  397,  395,  393,  394,  395,
	  393,  396,  397,    5,   15,   17,   31,   34,   37,   43,   46,   63,
	   65,  138,  143,  227,  298,  388,  392,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   29,   29,   29,   35,    0,    0,    0,    7,
	  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,
	   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  149,  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   81,   84,    0,    0,
	    0,    0,    0,   21,   31,  130,   60,   57,   31,   63,   57,   63,
	   63,   63,   63,   63,   63,   63,   63,   63,   63,   66,    0,    0,
	    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   69,   33,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
	    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   72,   33,   84,   84,   84,   84,   84,
	   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,   15,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   19,   19,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   75,
	   33,   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   17,   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   37,   37,   54,   37,   87,    0,    0,
	   39,    0,    0,   93,   90,   41,   96,   90,   96,   96,   96,   96,
	   96,   96,   96,   96,   96,   96,   99,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 398;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 592 "java/src/main/java/gherkin/lexer/Bm.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
    
// line 599 "java/src/main/java/gherkin/lexer/Bm.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 860 "java/src/main/java/gherkin/lexer/Bm.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 892 "java/src/main/java/gherkin/lexer/Bm.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/bm.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

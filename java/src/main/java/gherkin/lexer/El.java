
// line 1 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class El implements Lexer {
  
// line 150 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"


  private final Listener listener;

  public El(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/El.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   12,   21,   22,   23,   24,   25,   26,   27,   28,   30,
	   32,   43,   44,   45,   47,   49,   54,   59,   64,   69,   73,   77,
	   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
	   91,   92,   93,   94,   99,  106,  111,  115,  121,  124,  126,  132,
	  143,  144,  145,  146,  147,  148,  149,  151,  152,  153,  154,  155,
	  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
	  170,  173,  176,  179,  182,  185,  188,  189,  190,  191,  192,  193,
	  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
	  206,  207,  208,  216,  222,  224,  226,  228,  230,  232,  234,  236,
	  238,  240,  242,  244,  246,  248,  250,  252,  254,  256,  258,  260,
	  271,  273,  275,  277,  279,  281,  283,  285,  287,  289,  291,  293,
	  295,  297,  299,  301,  303,  305,  308,  310,  312,  314,  316,  318,
	  320,  322,  324,  326,  328,  330,  332,  334,  336,  338,  340,  342,
	  344,  346,  348,  350,  352,  354,  356,  358,  360,  362,  364,  366,
	  368,  370,  372,  374,  376,  378,  380,  382,  384,  386,  388,  390,
	  392,  394,  396,  398,  400,  402,  404,  406,  408,  410,  412,  414,
	  416,  418,  420,  422,  424,  427,  429,  431,  433,  435,  437,  439,
	  441,  443,  445,  447,  449,  451,  453,  455,  457,  459,  461,  463,
	  465,  467,  469,  471,  473,  475,  477,  479,  481,  483,  484,  485,
	  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,  497,
	  498,  499,  500,  501,  502,  503,  504,  506,  507,  508,  509,  510,
	  511,  512,  513,  514,  515,  516,  517,  518,  519,  520,  521,  522,
	  523,  524,  525,  526,  527,  528,  529,  536,  539,  541,  543,  545,
	  547,  549,  551,  553,  555,  557,  559,  561,  563,  565,  567,  569,
	  571,  573,  575,  577,  579,  581,  583,  585,  587,  589,  591,  593,
	  595,  597,  599,  601,  603,  605,  607,  609,  610,  611,  612,  613,
	  614,  615,  616,  617,  618,  619,  620,  621,  622,  623,  624,  625,
	  626,  627,  628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
	  638,  639,  640,  641,  642,  643,  652,  660,  662,  664,  666,  668,
	  670,  672,  674,  676,  678,  680,  682,  684,  686,  689,  691,  693,
	  695,  697,  699,  701,  703,  705,  707,  709,  711,  713,  715,  717,
	  719,  721,  733,  734,  735,  736,  737,  738,  739,  741,  743,  745,
	  747,  749,  751,  753,  755,  757,  759,  761,  763,  765,  767,  769,
	  771,  773,  775,  777,  779,  781,  783,  785,  787,  789,  791,  793,
	  795,  797,  799,  801,  803,  805,  807,  809,  811,  813,  815,  817,
	  819,  821,  823,  825,  827,  829,  831,  833,  835,  837,  839,  841,
	  843,  845,  847,  849,  851,  853,  855,  857,  859,  861,  863,  865,
	  867,  869,  871,  873,  875,  877,  879,  880,  881,  882,  883,  884,
	  885,  886,  887,  888,  889,  890,  892,  893,  894,  895,  904,  914,
	  916,  918,  920,  922,  924,  926,  928,  930,  932,  934,  936,  938,
	  940,  943,  945,  947,  949,  951,  953,  955,  957,  959,  961,  963,
	  965,  967,  969,  971,  973,  975,  987,  988,  989,  990,  991,  992,
	  993,  995,  997,  999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015,
	 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039,
	 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063,
	 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087,
	 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111,
	 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135,
	 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159,
	 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183,
	 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207,
	 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1224, 1225, 1226, 1227,
	 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1255, 1264, 1266, 1268, 1270,
	 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1293, 1295,
	 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319,
	 1321, 1323, 1325, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347,
	 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371,
	 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395,
	 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419,
	 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443,
	 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467,
	 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491,
	 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515,
	 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539,
	 1541, 1543, 1545, 1547, 1549, 1550, 1551
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -50,  -17,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	 -116, -111, -108, -102, -101,  -96,  -93,  -92,  -91,  -49, -124,  -50,
	  -79,  -50,  -67,   32,   10,   13,   10,   13,  -50,   10,   32,   34,
	   35,   37,   42,   64,  124,    9,   13,   34,   34,   10,   13,   10,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,    9,
	   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,   65,
	   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   13,   32,
	   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,   32,
	   64,    9,   13,   32,  124,    9,   13,   10,   32,   92,  124,    9,
	   13,   10,   92,  124,   10,   92,   10,   32,   92,  124,    9,   13,
	  -50,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,  -50,
	  -69,  -50,  -69,  -50,  -84,  -50,  -49,  -75,  -50,  -76,  -50,  -65,
	  -50,  -68,  -50,  -83,  -50,  -67,  -50,  -65,  -49, -123,   32,  -49,
	   10,   13, -116,   10,   13,  -49,   10,   13, -124,   10,   13,  -50,
	   10,   13,  -71,   10,   13,   10,   13,   32, -123,  -50,  -67,  -50,
	  -79,  -49, -124,  -49, -116,  -49, -124,  -50,  -73,  -49, -124,  -50,
	  -79,   58,   10,   10,  -50,   10,   32,   35,   37,   64,    9,   13,
	 -108, -101,  -96,  -93,  -91,   10,  -49,   10, -123,   10,  -50,   10,
	  -67,   10,  -50,   10,  -79,   10,  -49,   10, -124,   10,  -49,   10,
	 -116,   10,  -49,   10, -124,   10,  -50,   10,  -73,   10,  -49,   10,
	 -124,   10,  -50,   10,  -79,   10,   10,   58,  -50,   10,   32,   34,
	   35,   37,   42,   64,  124,    9,   13,  -50,   10,  -75,   10,  -50,
	   10,  -71,   10,  -49,   10, -124,   10,  -50,   10,  -65,   10,  -49,
	   10, -123,   10,  -49,   10, -127,   10,  -50,   10,  -77,   10,  -50,
	   10,  -81,   10,  -50,   10,  -79,  -75,   10,  -49,   10, -127,   10,
	  -50,   10,  -79,   10,  -50,   10,  -76,   10,  -50,   10,  -75,   10,
	  -50,   10,  -81,   10,  -50,   10,  -77,   10,  -50,   10,  -68,   10,
	  -50,   10,  -79,   10,  -49,   10, -127,   10,  -50,   10,  -71,   10,
	  -50,   10,  -77,   10,  -49,   10, -127,   10,  -50,   10,  -79,   10,
	  -49,   10, -122,   10,  -50,   10,  -82,   10,   10,   32,  -50,   10,
	  -93,   10,  -50,   10,  -75,   10,  -50,   10,  -67,   10,  -50,   10,
	  -79,   10,  -49,   10, -127,   10,  -50,   10,  -81,   10,  -50,   10,
	  -65,   10,  -49,   10, -123,   10,  -50,   10,  -75,   10,  -50,   10,
	  -67,   10,  -50,   10,  -84,   10,  -49,   10, -127,   10,  -50,   10,
	  -71,   10,  -50,   10,  -79,  -65,   10,  -49,   10, -128,   10,  -49,
	   10, -116,   10,  -50,   10,  -78,   10,  -50,   10,  -79,   10,  -50,
	   10,  -72,   10,  -49,   10, -127,   10,  -50,   10,  -65,   10,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,  -50,  -79,  -50,  -71,  -50,  -75,  -50,  -71,  -49,
	 -124,  -50,  -65,  -49, -123,  -49, -127,  -50,  -77,  -50,  -81,  -50,
	  -79,  -75,  -49, -127,  -50,  -79,  -50,  -76,  -50,  -75,  -50,  -81,
	  -50,  -77,  -50,  -68,  -50,  -79,  -49, -124,  -50,  -79,   58,   10,
	   10,  -50,   10,   32,   35,  124,    9,   13, -108, -101,   10,  -49,
	   10, -123,   10,  -50,   10,  -67,   10,  -50,   10,  -79,   10,  -49,
	   10, -124,   10,  -49,   10, -116,   10,  -49,   10, -124,   10,  -50,
	   10,  -73,   10,  -49,   10, -124,   10,  -50,   10,  -79,   10,   10,
	   58,  -50,   10,  -75,   10,  -50,   10,  -71,   10,  -49,   10, -124,
	   10,  -50,   10,  -65,   10,  -49,   10, -123,   10,  -49,   10, -127,
	   10,  -50,   10,  -77,   10,  -50,   10,  -81,   10,  -49, -127,  -50,
	  -71,  -50,  -77,  -49, -127,  -50,  -79,  -49, -122,  -50,  -82,   32,
	  -50,  -93,  -50,  -75,  -50,  -67,  -50,  -79,  -49, -127,  -50,  -81,
	  -50,  -65,  -49, -123,   58,   10,   10,  -50,   10,   32,   35,   37,
	   42,   64,    9,   13, -116, -111, -108, -102, -101,  -93,  -92,   10,
	  -49,   10, -124,   10,  -50,   10,  -79,   10,  -50,   10,  -67,   10,
	   10,   32,  -50,   10,  -69,   10,  -50,   10,  -69,   10,  -50,   10,
	  -84,   10,  -50,  -49,   10,  -75,   10,  -50,   10,  -76,   10,  -50,
	   10,  -65,   10,  -50,   10,  -68,   10,  -50,   10,  -83,   10,  -50,
	   10,  -67,   10,  -50,   10,  -65,   10,  -49,   10, -123,   10,   10,
	   32,  -50,  -49,   10,   32,   34,   35,   37,   42,   64,  124,    9,
	   13, -116,  -49, -124,  -50,  -71,   32, -123,   10,  -50,   10,  -67,
	   10,  -50,   10,  -79,   10,  -49,   10, -124,   10,  -49,   10, -116,
	   10,  -49,   10, -124,   10,  -50,   10,  -73,   10,  -49,   10, -124,
	   10,  -50,   10,  -79,   10,   10,   58,  -50,   10,  -79,   10,  -50,
	   10,  -71,   10,  -50,   10,  -75,   10,  -50,   10,  -71,   10,  -49,
	   10, -124,   10,  -50,   10,  -65,   10,  -49,   10, -123,   10,  -49,
	   10, -127,   10,  -50,   10,  -77,   10,  -50,   10,  -81,   10,  -50,
	   10,  -75,   10,  -50,   10,  -67,   10,  -50,   10,  -84,   10,  -49,
	   10, -127,   10,  -50,   10,  -71,   10,  -50,   10,  -65,   10,  -49,
	   10, -116,   10,  -49,   10, -124,   10,  -50,   10,  -75,   10,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,  -50,  -75,  -50,  -67,  -50,  -84,  -49, -127,  -50,
	  -71,  -50,  -79,  -65,   58,   10,   10,  -50,   10,   32,   35,   37,
	   42,   64,    9,   13, -116, -111, -108, -102, -101,  -96,  -93,  -92,
	  -91,   10,  -49,   10, -124,   10,  -50,   10,  -79,   10,  -50,   10,
	  -67,   10,   10,   32,  -50,   10,  -69,   10,  -50,   10,  -69,   10,
	  -50,   10,  -84,   10,  -50,  -49,   10,  -75,   10,  -50,   10,  -76,
	   10,  -50,   10,  -65,   10,  -50,   10,  -68,   10,  -50,   10,  -83,
	   10,  -50,   10,  -67,   10,  -50,   10,  -65,   10,  -49,   10, -123,
	   10,   10,   32,  -50,  -49,   10,   32,   34,   35,   37,   42,   64,
	  124,    9,   13, -116,  -49, -124,  -50,  -71,   32, -123,   10,  -50,
	   10,  -67,   10,  -50,   10,  -79,   10,  -49,   10, -124,   10,  -49,
	   10, -116,   10,  -49,   10, -124,   10,  -50,   10,  -73,   10,  -49,
	   10, -124,   10,  -50,   10,  -79,   10,   10,   58,  -50,   10,  -79,
	   10,  -50,   10,  -71,   10,  -50,   10,  -75,   10,  -50,   10,  -71,
	   10,  -49,   10, -124,   10,  -50,   10,  -65,   10,  -49,   10, -123,
	   10,  -49,   10, -127,   10,  -50,   10,  -77,   10,  -50,   10,  -81,
	   10,  -50,   10,  -75,   10,  -49,   10, -127,   10,  -50,   10,  -71,
	   10,  -50,   10,  -77,   10,  -49,   10, -127,   10,  -50,   10,  -79,
	   10,  -49,   10, -122,   10,  -50,   10,  -82,   10,   10,   32,  -50,
	   10,  -93,   10,  -50,   10,  -75,   10,  -50,   10,  -67,   10,  -50,
	   10,  -79,   10,  -49,   10, -127,   10,  -50,   10,  -81,   10,  -50,
	   10,  -65,   10,  -49,   10, -123,   10,  -50,   10,  -75,   10,  -50,
	   10,  -67,   10,  -50,   10,  -84,   10,  -49,   10, -127,   10,  -50,
	   10,  -71,   10,  -50,   10,  -65,   10,  -49,   10, -116,   10,  -49,
	   10, -124,   10,  -50,   10,  -75,   10,  -49,   10, -128,   10,  -49,
	   10, -116,   10,  -50,   10,  -78,   10,  -50,   10,  -79,   10,  -50,
	   10,  -72,   10,  -49,   10, -127,   10,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,  -49,
	 -116,  -49, -124,  -50,  -75,  -49, -128,  -49, -116,  -50,  -78,  -50,
	  -79,  -50,  -72,  -49, -127,  -50,  -65,   58,   10,   10,  -50,   10,
	   32,   35,   37,   42,   64,    9,   13, -116, -111, -108, -102, -101,
	  -96,  -93,  -92,   10,  -49,   10, -124,   10,  -50,   10,  -79,   10,
	  -50,   10,  -67,   10,   10,   32,  -50,   10,  -69,   10,  -50,   10,
	  -69,   10,  -50,   10,  -84,   10,  -50,  -49,   10,  -75,   10,  -50,
	   10,  -76,   10,  -50,   10,  -65,   10,  -50,   10,  -68,   10,  -50,
	   10,  -83,   10,  -50,   10,  -67,   10,  -50,   10,  -65,   10,  -49,
	   10, -123,   10,   10,   32,  -50,  -49,   10,   32,   34,   35,   37,
	   42,   64,  124,    9,   13, -116,  -49, -124,  -50,  -71,   32, -123,
	   10,  -50,   10,  -67,   10,  -50,   10,  -79,   10,  -49,   10, -124,
	   10,  -49,   10, -116,   10,  -49,   10, -124,   10,  -50,   10,  -73,
	   10,  -49,   10, -124,   10,  -50,   10,  -79,   10,   10,   58,  -50,
	   10,  -79,   10,  -50,   10,  -71,   10,  -50,   10,  -75,   10,  -50,
	   10,  -71,   10,  -49,   10, -124,   10,  -50,   10,  -65,   10,  -49,
	   10, -123,   10,  -49,   10, -127,   10,  -50,   10,  -77,   10,  -50,
	   10,  -81,   10,  -50,   10,  -75,   10,  -49,   10, -127,   10,  -50,
	   10,  -71,   10,  -50,   10,  -77,   10,  -49,   10, -127,   10,  -50,
	   10,  -79,   10,  -49,   10, -122,   10,  -50,   10,  -82,   10,   10,
	   32,  -50,   10,  -93,   10,  -50,   10,  -75,   10,  -50,   10,  -67,
	   10,  -50,   10,  -79,   10,  -49,   10, -127,   10,  -50,   10,  -81,
	   10,  -50,   10,  -65,   10,  -49,   10, -123,   10,  -50,   10,  -75,
	   10,  -50,   10,  -67,   10,  -50,   10,  -84,   10,  -49,   10, -127,
	   10,  -50,   10,  -71,   10,  -50,   10,  -65,   10,  -49,   10, -116,
	   10,  -49,   10, -124,   10,  -50,   10,  -75,   10,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   10,    9,    1,    1,    1,    1,    1,    1,    1,    2,    2,
	    9,    1,    1,    2,    2,    3,    3,    3,    3,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    3,    5,    3,    2,    4,    3,    2,    4,    9,
	    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
	    3,    3,    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    6,    6,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    9,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    5,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    7,    8,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,   10,    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    2,    1,    1,    1,    7,   10,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,   10,    1,    1,    1,    1,    1,    1,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    7,    9,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,   10,    1,    1,    1,    1,    1,    1,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    1,    1,    1,    1,    0,    0,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   12,   22,   24,   26,   28,   30,   32,   34,   36,   39,
	   42,   53,   55,   57,   60,   63,   68,   73,   78,   83,   87,   91,
	   94,   96,   98,  100,  102,  104,  106,  108,  110,  112,  114,  116,
	  118,  120,  122,  124,  129,  136,  141,  145,  151,  155,  158,  164,
	  175,  177,  179,  181,  183,  185,  187,  190,  192,  194,  196,  198,
	  200,  202,  204,  206,  208,  210,  212,  214,  216,  218,  220,  222,
	  226,  230,  234,  238,  242,  246,  250,  252,  254,  256,  258,  260,
	  262,  264,  266,  268,  270,  272,  274,  276,  278,  280,  282,  284,
	  286,  288,  290,  298,  305,  308,  311,  314,  317,  320,  323,  326,
	  329,  332,  335,  338,  341,  344,  347,  350,  353,  356,  359,  362,
	  373,  376,  379,  382,  385,  388,  391,  394,  397,  400,  403,  406,
	  409,  412,  415,  418,  421,  424,  428,  431,  434,  437,  440,  443,
	  446,  449,  452,  455,  458,  461,  464,  467,  470,  473,  476,  479,
	  482,  485,  488,  491,  494,  497,  500,  503,  506,  509,  512,  515,
	  518,  521,  524,  527,  530,  533,  536,  539,  542,  545,  548,  551,
	  554,  557,  560,  563,  566,  569,  572,  575,  578,  581,  584,  587,
	  590,  593,  596,  599,  602,  606,  609,  612,  615,  618,  621,  624,
	  627,  630,  633,  636,  639,  642,  645,  648,  651,  654,  657,  660,
	  663,  666,  669,  672,  675,  678,  681,  684,  687,  690,  692,  694,
	  696,  698,  700,  702,  704,  706,  708,  710,  712,  714,  716,  718,
	  720,  722,  724,  726,  728,  730,  732,  735,  737,  739,  741,  743,
	  745,  747,  749,  751,  753,  755,  757,  759,  761,  763,  765,  767,
	  769,  771,  773,  775,  777,  779,  781,  788,  792,  795,  798,  801,
	  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,  834,  837,
	  840,  843,  846,  849,  852,  855,  858,  861,  864,  867,  870,  873,
	  876,  879,  882,  885,  888,  891,  894,  897,  899,  901,  903,  905,
	  907,  909,  911,  913,  915,  917,  919,  921,  923,  925,  927,  929,
	  931,  933,  935,  937,  939,  941,  943,  945,  947,  949,  951,  953,
	  955,  957,  959,  961,  963,  965,  974,  983,  986,  989,  992,  995,
	  998, 1001, 1004, 1007, 1010, 1013, 1016, 1019, 1022, 1026, 1029, 1032,
	 1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068,
	 1071, 1074, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1101, 1104, 1107,
	 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143,
	 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 1176, 1179,
	 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215,
	 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251,
	 1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287,
	 1290, 1293, 1296, 1299, 1302, 1305, 1308, 1310, 1312, 1314, 1316, 1318,
	 1320, 1322, 1324, 1326, 1328, 1330, 1333, 1335, 1337, 1339, 1348, 1359,
	 1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386, 1389, 1392, 1395,
	 1398, 1402, 1405, 1408, 1411, 1414, 1417, 1420, 1423, 1426, 1429, 1432,
	 1435, 1438, 1441, 1444, 1447, 1450, 1462, 1464, 1466, 1468, 1470, 1472,
	 1474, 1477, 1480, 1483, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507,
	 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543,
	 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579,
	 1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615,
	 1618, 1621, 1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651,
	 1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 1678, 1681, 1684, 1687,
	 1690, 1693, 1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723,
	 1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 1750, 1753, 1756, 1759,
	 1762, 1765, 1768, 1771, 1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795,
	 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1821, 1823, 1825, 1827,
	 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851,
	 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1874, 1884, 1887, 1890, 1893,
	 1896, 1899, 1902, 1905, 1908, 1911, 1914, 1917, 1920, 1923, 1927, 1930,
	 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 1960, 1963, 1966,
	 1969, 1972, 1975, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2002, 2005,
	 2008, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041,
	 2044, 2047, 2050, 2053, 2056, 2059, 2062, 2065, 2068, 2071, 2074, 2077,
	 2080, 2083, 2086, 2089, 2092, 2095, 2098, 2101, 2104, 2107, 2110, 2113,
	 2116, 2119, 2122, 2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146, 2149,
	 2152, 2155, 2158, 2161, 2164, 2167, 2170, 2173, 2176, 2179, 2182, 2185,
	 2188, 2191, 2194, 2197, 2200, 2203, 2206, 2209, 2212, 2215, 2218, 2221,
	 2224, 2227, 2230, 2233, 2236, 2239, 2242, 2245, 2248, 2251, 2254, 2257,
	 2260, 2263, 2266, 2269, 2272, 2275, 2278, 2281, 2284, 2287, 2290, 2293,
	 2296, 2299, 2302, 2305, 2308, 2310, 2312
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    4,    3,    5,    6,    7,    8,    9,   10,    3,    0,
	   11,   12,   13,   14,   15,   16,   17,   18,   19,    0,   20,    0,
	   21,    0,   22,    0,   23,    0,   24,    0,   25,    0,   26,    0,
	   28,   29,   27,   31,   32,   30,    1,    4,    3,    5,    6,    7,
	    8,    9,   10,    3,    0,   33,    0,   34,    0,   36,   37,   35,
	   39,   40,   38,   43,   42,   44,   42,   41,   47,   46,   48,   46,
	   45,   47,   46,   49,   46,   45,   47,   46,   50,   46,   45,   52,
	   51,   51,    0,    4,   53,   53,    0,   55,   56,   54,    4,    0,
	   57,    0,   58,    0,   59,    0,   60,    0,   61,    0,   62,    0,
	   63,    0,   64,    0,   65,    0,   66,    0,   67,    0,   68,    0,
	   69,    0,   70,    0,    0,    0,    0,    0,   71,   72,   73,   72,
	   72,   75,   74,   71,    4,   76,    9,   76,    0,   77,   78,   77,
	    0,   81,   80,   82,   83,   80,   79,    0,   85,   86,   84,    0,
	   85,   84,   81,   87,   85,   86,   87,   84,   88,   81,   89,   90,
	   91,   92,   93,   94,   95,   89,    0,   96,    0,   97,    0,   98,
	    0,   99,    0,  100,    0,   25,    0,  101,  102,    0,  103,    0,
	  104,    0,  105,    0,  106,    0,  107,    0,  108,    0,  109,    0,
	  110,    0,  111,    0,  112,    0,  113,    0,  114,    0,  115,    0,
	  116,    0,  117,    0,  118,    0,  119,   28,   29,   27,  120,   31,
	   32,   30,  121,   31,   32,   30,  122,   31,   32,   30,  123,   31,
	   32,   30,  124,   31,   32,   30,   31,   32,   26,   30,  125,    0,
	  126,    0,  127,    0,  128,    0,  129,    0,  130,    0,  131,    0,
	  132,    0,  133,    0,  134,    0,  135,    0,  136,    0,  137,    0,
	  138,    0,  139,    0,  140,    0,  141,    0,  142,    0,  144,  143,
	  146,  145,  147,  146,  148,  149,  150,  149,  148,  145,  151,  152,
	  153,  154,  155,  146,  145,  156,  146,  145,  157,  146,  145,  158,
	  146,  145,  159,  146,  145,  160,  146,  145,  161,  146,  145,  162,
	  146,  145,  163,  146,  145,  164,  146,  145,  165,  146,  145,  166,
	  146,  145,  167,  146,  145,  168,  146,  145,  169,  146,  145,  170,
	  146,  145,  171,  146,  145,  172,  146,  145,  173,  146,  145,  146,
	  174,  145,  175,  177,  176,  178,  179,  180,  181,  182,  183,  176,
	    0,  184,  146,  145,  185,  146,  145,  186,  146,  145,  187,  146,
	  145,  188,  146,  145,  189,  146,  145,  190,  146,  145,  191,  146,
	  145,  192,  146,  145,  193,  146,  145,  194,  146,  145,  195,  146,
	  145,  196,  146,  145,  197,  146,  145,  198,  146,  145,  171,  146,
	  145,  199,  146,  145,  200,  201,  146,  145,  202,  146,  145,  203,
	  146,  145,  204,  146,  145,  205,  146,  145,  206,  146,  145,  207,
	  146,  145,  208,  146,  145,  209,  146,  145,  210,  146,  145,  211,
	  146,  145,  212,  146,  145,  213,  146,  145,  214,  146,  145,  215,
	  146,  145,  216,  146,  145,  169,  146,  145,  217,  146,  145,  218,
	  146,  145,  219,  146,  145,  220,  146,  145,  221,  146,  145,  222,
	  146,  145,  223,  146,  145,  224,  146,  145,  225,  146,  145,  226,
	  146,  145,  227,  146,  145,  228,  146,  145,  229,  146,  145,  230,
	  146,  145,  146,  231,  145,  232,  146,  145,  233,  146,  145,  234,
	  146,  145,  235,  146,  145,  236,  146,  145,  237,  146,  145,  238,
	  146,  145,  239,  146,  145,  240,  146,  145,  241,  146,  145,  242,
	  146,  145,  243,  146,  145,  244,  146,  145,  245,  146,  145,  246,
	  146,  145,  173,  146,  145,  247,  146,  145,  248,  146,  145,  249,
	  146,  145,  250,  146,  145,  251,  146,  145,  252,  146,  145,  253,
	  146,  145,  254,  146,  145,  255,  146,  145,  256,  146,  145,  257,
	  146,  145,  173,  173,  146,  145,  258,  146,  145,  259,  146,  145,
	  260,  146,  145,  261,  146,  145,  262,  146,  145,  263,  146,  145,
	  264,  146,  145,  265,  146,  145,  266,  146,  145,  267,  146,  145,
	  268,  146,  145,  269,  146,  145,  270,  146,  145,  173,  146,  145,
	  146,  271,  145,  146,  272,  145,  146,  273,  145,  146,  274,  145,
	  146,  275,  145,  146,  276,  145,  146,  277,  145,  146,  278,  145,
	  146,  279,  145,  146,  280,  145,  146,  281,  145,  146,  282,  145,
	  146,  283,  145,  146,  284,  145,  285,    0,  286,    0,  287,    0,
	   25,    0,  288,    0,  289,    0,  290,    0,  291,    0,  292,    0,
	  293,    0,  294,    0,  295,    0,  296,    0,  297,    0,  298,    0,
	  299,    0,  300,    0,  301,    0,  302,    0,  139,    0,  303,    0,
	  304,  305,    0,  306,    0,  307,    0,  308,    0,  309,    0,  310,
	    0,  311,    0,  312,    0,  313,    0,  314,    0,  315,    0,  316,
	    0,  317,    0,  318,    0,  319,    0,  320,    0,  321,    0,  322,
	    0,  323,    0,  324,    0,  325,    0,  326,    0,  328,  327,  330,
	  329,  331,  330,  332,  333,  333,  332,  329,  334,  335,  330,  329,
	  336,  330,  329,  337,  330,  329,  338,  330,  329,  339,  330,  329,
	  340,  330,  329,  341,  330,  329,  342,  330,  329,  343,  330,  329,
	  344,  330,  329,  345,  330,  329,  346,  330,  329,  347,  330,  329,
	  348,  330,  329,  349,  330,  329,  350,  330,  329,  351,  330,  329,
	  352,  330,  329,  353,  330,  329,  330,  354,  329,  355,  330,  329,
	  356,  330,  329,  357,  330,  329,  358,  330,  329,  359,  330,  329,
	  360,  330,  329,  361,  330,  329,  362,  330,  329,  363,  330,  329,
	  364,  330,  329,  365,  330,  329,  366,  330,  329,  367,  330,  329,
	  368,  330,  329,  369,  330,  329,  351,  330,  329,  370,    0,  371,
	    0,  372,    0,  373,    0,  374,    0,  375,    0,  376,    0,  377,
	    0,  378,    0,  379,    0,  380,    0,  381,    0,  382,    0,  383,
	    0,  384,    0,  385,    0,  386,    0,  387,    0,  388,    0,  389,
	    0,  390,    0,  391,    0,  392,    0,  393,    0,  394,    0,  395,
	    0,  396,    0,  397,    0,  398,    0,  399,    0,  400,    0,  401,
	    0,  403,  402,  405,  404,  406,  405,  407,  408,  409,  410,  408,
	  407,  404,  411,  412,  413,  414,  415,  416,  417,  405,  404,  418,
	  405,  404,  419,  405,  404,  420,  405,  404,  421,  405,  404,  422,
	  405,  404,  423,  405,  404,  405,  424,  404,  425,  405,  404,  426,
	  405,  404,  427,  405,  404,  428,  405,  404,  429,  405,  404,  423,
	  405,  404,  430,  431,  405,  404,  432,  405,  404,  433,  405,  404,
	  434,  405,  404,  435,  405,  404,  436,  405,  404,  437,  405,  404,
	  438,  405,  404,  439,  405,  404,  440,  405,  404,  441,  405,  404,
	  442,  405,  404,  443,  405,  404,  444,  405,  404,  445,  405,  404,
	  446,  405,  404,  405,  447,  404,  175,  448,  177,  176,  178,  179,
	  180,  181,  182,  183,  176,    0,  449,    0,  450,    0,  451,    0,
	  452,    0,  453,    0,  424,    0,  454,  405,  404,  455,  405,  404,
	  456,  405,  404,  457,  405,  404,  458,  405,  404,  459,  405,  404,
	  460,  405,  404,  461,  405,  404,  462,  405,  404,  463,  405,  404,
	  464,  405,  404,  465,  405,  404,  466,  405,  404,  467,  405,  404,
	  468,  405,  404,  469,  405,  404,  470,  405,  404,  405,  424,  404,
	  471,  405,  404,  472,  405,  404,  473,  405,  404,  423,  405,  404,
	  474,  405,  404,  475,  405,  404,  476,  405,  404,  477,  405,  404,
	  478,  405,  404,  479,  405,  404,  480,  405,  404,  481,  405,  404,
	  482,  405,  404,  483,  405,  404,  484,  405,  404,  485,  405,  404,
	  486,  405,  404,  487,  405,  404,  488,  405,  404,  468,  405,  404,
	  489,  405,  404,  490,  405,  404,  491,  405,  404,  492,  405,  404,
	  493,  405,  404,  494,  405,  404,  495,  405,  404,  496,  405,  404,
	  497,  405,  404,  498,  405,  404,  499,  405,  404,  470,  405,  404,
	  500,  405,  404,  501,  405,  404,  502,  405,  404,  503,  405,  404,
	  504,  405,  404,  423,  405,  404,  405,  505,  404,  405,  506,  404,
	  405,  507,  404,  405,  508,  404,  405,  509,  404,  405,  510,  404,
	  405,  511,  404,  405,  512,  404,  405,  513,  404,  405,  514,  404,
	  405,  515,  404,  405,  516,  404,  405,  517,  404,  405,  518,  404,
	  519,    0,  520,    0,  521,    0,  522,    0,  523,    0,  524,    0,
	  525,    0,  526,    0,  527,    0,  528,    0,  529,    0,  325,  530,
	    0,  531,    0,  533,  532,  535,  534,  536,  535,  537,  538,  539,
	  540,  538,  537,  534,  541,  542,  543,  544,  545,  546,  547,  548,
	  549,  535,  534,  550,  535,  534,  551,  535,  534,  552,  535,  534,
	  553,  535,  534,  554,  535,  534,  555,  535,  534,  535,  556,  534,
	  557,  535,  534,  558,  535,  534,  559,  535,  534,  560,  535,  534,
	  561,  535,  534,  555,  535,  534,  562,  563,  535,  534,  564,  535,
	  534,  565,  535,  534,  566,  535,  534,  567,  535,  534,  568,  535,
	  534,  569,  535,  534,  570,  535,  534,  571,  535,  534,  572,  535,
	  534,  573,  535,  534,  574,  535,  534,  575,  535,  534,  576,  535,
	  534,  577,  535,  534,  578,  535,  534,  535,  579,  534,  175,  580,
	  177,  176,  178,  179,  180,  181,  182,  183,  176,    0,  581,    0,
	  582,    0,  583,    0,  584,    0,  585,    0,  556,    0,  586,  535,
	  534,  587,  535,  534,  588,  535,  534,  589,  535,  534,  590,  535,
	  534,  591,  535,  534,  592,  535,  534,  593,  535,  534,  594,  535,
	  534,  595,  535,  534,  596,  535,  534,  597,  535,  534,  598,  535,
	  534,  599,  535,  534,  600,  535,  534,  601,  535,  534,  602,  535,
	  534,  535,  556,  534,  603,  535,  534,  604,  535,  534,  605,  535,
	  534,  555,  535,  534,  606,  535,  534,  607,  535,  534,  608,  535,
	  534,  609,  535,  534,  610,  535,  534,  611,  535,  534,  612,  535,
	  534,  613,  535,  534,  614,  535,  534,  615,  535,  534,  616,  535,
	  534,  617,  535,  534,  618,  535,  534,  619,  535,  534,  620,  535,
	  534,  600,  535,  534,  621,  535,  534,  622,  535,  534,  623,  535,
	  534,  624,  535,  534,  625,  535,  534,  626,  535,  534,  627,  535,
	  534,  628,  535,  534,  629,  535,  534,  630,  535,  534,  631,  535,
	  534,  632,  535,  534,  633,  535,  534,  634,  535,  534,  635,  535,
	  534,  636,  535,  534,  535,  637,  534,  638,  535,  534,  639,  535,
	  534,  640,  535,  534,  641,  535,  534,  642,  535,  534,  643,  535,
	  534,  644,  535,  534,  645,  535,  534,  646,  535,  534,  647,  535,
	  534,  648,  535,  534,  649,  535,  534,  650,  535,  534,  651,  535,
	  534,  652,  535,  534,  602,  535,  534,  653,  535,  534,  654,  535,
	  534,  655,  535,  534,  656,  535,  534,  657,  535,  534,  658,  535,
	  534,  659,  535,  534,  660,  535,  534,  661,  535,  534,  662,  535,
	  534,  663,  535,  534,  602,  535,  534,  664,  535,  534,  665,  535,
	  534,  666,  535,  534,  667,  535,  534,  668,  535,  534,  555,  535,
	  534,  669,  535,  534,  670,  535,  534,  671,  535,  534,  672,  535,
	  534,  673,  535,  534,  674,  535,  534,  675,  535,  534,  676,  535,
	  534,  677,  535,  534,  678,  535,  534,  679,  535,  534,  662,  535,
	  534,  535,  680,  534,  535,  681,  534,  535,  682,  534,  535,  683,
	  534,  535,  684,  534,  535,  685,  534,  535,  686,  534,  535,  687,
	  534,  535,  688,  534,  535,  689,  534,  535,  690,  534,  535,  691,
	  534,  535,  692,  534,  535,  693,  534,  694,    0,  695,    0,  696,
	    0,  697,    0,  698,    0,   25,    0,  699,    0,  700,    0,  701,
	    0,  702,    0,  703,    0,  704,    0,  705,    0,  706,    0,  707,
	    0,  708,    0,  709,    0,  710,    0,  711,    0,  712,    0,  713,
	    0,  715,  714,  717,  716,  718,  717,  719,  720,  721,  722,  720,
	  719,  716,  723,  724,  725,  726,  727,  728,  729,  730,  717,  716,
	  731,  717,  716,  732,  717,  716,  733,  717,  716,  734,  717,  716,
	  735,  717,  716,  736,  717,  716,  717,  737,  716,  738,  717,  716,
	  739,  717,  716,  740,  717,  716,  741,  717,  716,  742,  717,  716,
	  736,  717,  716,  743,  744,  717,  716,  745,  717,  716,  746,  717,
	  716,  747,  717,  716,  748,  717,  716,  749,  717,  716,  750,  717,
	  716,  751,  717,  716,  752,  717,  716,  753,  717,  716,  754,  717,
	  716,  755,  717,  716,  756,  717,  716,  757,  717,  716,  758,  717,
	  716,  759,  717,  716,  717,  760,  716,  175,  761,  177,  176,  178,
	  179,  180,  181,  182,  183,  176,    0,  762,    0,  763,    0,  764,
	    0,  765,    0,  766,    0,  737,    0,  767,  717,  716,  768,  717,
	  716,  769,  717,  716,  770,  717,  716,  771,  717,  716,  772,  717,
	  716,  773,  717,  716,  774,  717,  716,  775,  717,  716,  776,  717,
	  716,  777,  717,  716,  778,  717,  716,  779,  717,  716,  780,  717,
	  716,  781,  717,  716,  782,  717,  716,  783,  717,  716,  717,  737,
	  716,  784,  717,  716,  785,  717,  716,  786,  717,  716,  736,  717,
	  716,  787,  717,  716,  788,  717,  716,  789,  717,  716,  790,  717,
	  716,  791,  717,  716,  792,  717,  716,  793,  717,  716,  794,  717,
	  716,  795,  717,  716,  796,  717,  716,  797,  717,  716,  798,  717,
	  716,  799,  717,  716,  800,  717,  716,  801,  717,  716,  781,  717,
	  716,  802,  717,  716,  803,  717,  716,  804,  717,  716,  805,  717,
	  716,  806,  717,  716,  807,  717,  716,  808,  717,  716,  809,  717,
	  716,  810,  717,  716,  811,  717,  716,  812,  717,  716,  813,  717,
	  716,  814,  717,  716,  815,  717,  716,  816,  717,  716,  817,  717,
	  716,  717,  818,  716,  819,  717,  716,  820,  717,  716,  821,  717,
	  716,  822,  717,  716,  823,  717,  716,  824,  717,  716,  825,  717,
	  716,  826,  717,  716,  827,  717,  716,  828,  717,  716,  829,  717,
	  716,  830,  717,  716,  831,  717,  716,  832,  717,  716,  833,  717,
	  716,  783,  717,  716,  834,  717,  716,  835,  717,  716,  836,  717,
	  716,  837,  717,  716,  838,  717,  716,  839,  717,  716,  840,  717,
	  716,  841,  717,  716,  842,  717,  716,  843,  717,  716,  844,  717,
	  716,  783,  717,  716,  845,  717,  716,  846,  717,  716,  847,  717,
	  716,  848,  717,  716,  849,  717,  716,  736,  717,  716,  717,  850,
	  716,  717,  851,  716,  717,  852,  716,  717,  853,  716,  717,  854,
	  716,  717,  855,  716,  717,  856,  716,  717,  857,  716,  717,  858,
	  716,  717,  859,  716,  717,  860,  716,  717,  861,  716,  717,  862,
	  716,  717,  863,  716,  864,    0,    3,    0,  865,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,  784,   12,   12,   13,   23,   25,    9,   39,   42,    3,
	   48,   54,  225,  229,  245,  450,  619,  625,    4,    5,    6,    7,
	    8,    9,   10,   11,   12,   24,   11,   12,   24,   14,   15,   16,
	   17,   16,   16,   17,   16,   18,   18,   18,   19,   18,   18,   18,
	   19,   20,   21,   22,   12,   22,   23,   12,   24,   26,   27,   28,
	   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,  786,   40,
	   41,   12,   40,   39,   41,   42,   43,   44,   46,   47,   45,   43,
	   44,   45,   43,   46,    2,   47,   13,   23,   25,    9,   39,   42,
	   49,   50,   51,   52,   53,   55,   78,   56,   57,   58,   59,   60,
	   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
	   73,   74,   75,   76,   77,   79,   80,   81,   82,   83,   84,   85,
	   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
	   98,   97,   98,   99,   98,   12,  211,  100,  120,  136,  185,  197,
	  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
	  113,  114,  115,  116,  117,  118,  119,    2,   12,   12,   13,   23,
	   25,    9,   39,   42,  121,  122,  123,  124,  125,  126,  127,  128,
	  129,  130,  131,  132,  133,  134,  135,  137,  138,  154,  139,  140,
	  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
	  153,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,
	  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
	  178,  179,  180,  181,  182,  183,  184,  186,  187,  188,  189,  190,
	  191,  192,  193,  194,  195,  196,  198,  199,  200,  201,  202,  203,
	  204,  205,  206,  207,  208,  209,  210,  212,  213,  214,  215,  216,
	  217,  218,  219,  220,  221,  222,  223,  224,   12,  226,  227,  228,
	  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
	  242,  243,  244,  246,  247,  307,  248,  249,  250,  251,  252,  253,
	  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
	  266,  267,  268,  269,  270,  269,  270,  271,  270,   12,  272,  291,
	  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
	  285,  286,  287,  288,  289,  290,  119,  292,  293,  294,  295,  296,
	  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  308,  309,
	  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
	  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
	  334,  335,  336,  337,  338,  339,  340,  341,  340,  341,  342,  341,
	   12,  436,  349,  343,  350,  356,  398,  402,  418,  430,  344,  345,
	  346,  347,  348,  349,  119,  351,  352,  353,  354,  355,  357,  380,
	  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
	  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  381,  382,
	  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
	  395,  396,  397,  399,  400,  401,  403,  404,  405,  406,  407,  408,
	  409,  410,  411,  412,  413,  414,  415,  416,  417,  419,  420,  421,
	  422,  423,  424,  425,  426,  427,  428,  429,  431,  432,  433,  434,
	  435,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
	  448,  449,   12,  451,  452,  453,  454,  455,  456,  457,  458,  459,
	  460,  461,  462,  463,  464,  465,  464,  465,  466,  465,   12,  605,
	  473,  467,  474,  480,  522,  526,  542,  575,  587,  593,  468,  469,
	  470,  471,  472,  473,  119,  475,  476,  477,  478,  479,  481,  504,
	  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
	  494,  495,  496,  497,  498,  499,  500,  501,  502,  503,  505,  506,
	  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,  517,  518,
	  519,  520,  521,  523,  524,  525,  527,  528,  529,  530,  531,  532,
	  533,  534,  535,  536,  537,  538,  539,  540,  541,  543,  544,  545,
	  546,  547,  548,  549,  550,  551,  552,  553,  554,  555,  556,  557,
	  558,  559,  560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
	  570,  571,  572,  573,  574,  576,  577,  578,  579,  580,  581,  582,
	  583,  584,  585,  586,  588,  589,  590,  591,  592,  594,  595,  596,
	  597,  598,  599,  600,  601,  602,  603,  604,  606,  607,  608,  609,
	  610,  611,  612,  613,  614,  615,  616,  617,  618,   12,  620,  621,
	  622,  623,  624,  626,  627,  628,  629,  630,  631,  632,  633,  634,
	  635,  636,  637,  638,  639,  640,  641,  642,  641,  642,  643,  642,
	   12,  770,  650,  644,  651,  657,  699,  703,  719,  752,  764,  645,
	  646,  647,  648,  649,  650,  119,  652,  653,  654,  655,  656,  658,
	  681,  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,  669,
	  670,  671,  672,  673,  674,  675,  676,  677,  678,  679,  680,  682,
	  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,  693,  694,
	  695,  696,  697,  698,  700,  701,  702,  704,  705,  706,  707,  708,
	  709,  710,  711,  712,  713,  714,  715,  716,  717,  718,  720,  721,
	  722,  723,  724,  725,  726,  727,  728,  729,  730,  731,  732,  733,
	  734,  735,  736,  737,  738,  739,  740,  741,  742,  743,  744,  745,
	  746,  747,  748,  749,  750,  751,  753,  754,  755,  756,  757,  758,
	  759,  760,  761,  762,  763,  765,  766,  767,  768,  769,  771,  772,
	  773,  774,  775,  776,  777,  778,  779,  780,  781,  782,  783,   12,
	  785,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,    0,    0,   54,    3,    1,    0,   29,    1,   35,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  149,  126,    0,  110,   23,    0,    0,    7,
	  139,   48,    0,  102,    9,    5,   45,  134,   45,    0,   33,  122,
	   33,   33,    0,   11,  106,    0,    0,  114,   25,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   27,  118,   27,   51,    0,    0,    0,   37,   37,   54,   37,   87,
	    0,    0,   39,    0,   96,    0,   93,   90,   41,   96,   90,   99,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,   84,    0,   69,   33,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   13,   63,   31,  130,   60,   57,
	   31,   63,   57,   66,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,   84,    0,   81,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   21,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,
	   78,   33,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,   75,   33,
	   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,
	   72,   33,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
	    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 786;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 962 "java/src/main/java/gherkin/lexer/El.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
    
// line 969 "java/src/main/java/gherkin/lexer/El.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1230 "java/src/main/java/gherkin/lexer/El.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1262 "java/src/main/java/gherkin/lexer/El.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/cucumber/gherkin/tasks/../ragel/i18n/el.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

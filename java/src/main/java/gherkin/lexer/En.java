
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class En implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"


  private final Listener listener;

  public En(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/En.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   19,   20,   21,   39,   40,   41,   43,   45,   50,   55,
	   60,   65,   70,   74,   78,   80,   81,   82,   83,   84,   85,   86,
	   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   98,  100,
	  105,  112,  117,  119,  120,  121,  122,  123,  124,  125,  126,  127,
	  139,  141,  143,  145,  147,  149,  151,  153,  155,  157,  159,  161,
	  163,  165,  167,  169,  171,  173,  175,  177,  179,  181,  199,  201,
	  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  227,
	  229,  231,  233,  235,  237,  239,  241,  243,  245,  247,  249,  251,
	  253,  255,  257,  260,  262,  264,  266,  268,  270,  272,  274,  276,
	  279,  281,  283,  285,  287,  289,  291,  293,  295,  297,  299,  301,
	  303,  305,  307,  309,  311,  313,  315,  317,  319,  321,  323,  325,
	  327,  329,  331,  333,  336,  339,  341,  343,  345,  347,  349,  351,
	  353,  355,  357,  359,  361,  363,  365,  366,  367,  368,  369,  370,
	  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
	  383,  384,  385,  394,  396,  398,  400,  402,  404,  406,  408,  410,
	  412,  414,  416,  418,  420,  422,  424,  426,  428,  430,  432,  434,
	  436,  438,  440,  442,  444,  445,  446,  447,  448,  449,  450,  451,
	  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  464,  466,
	  467,  468,  469,  470,  471,  472,  473,  474,  475,  490,  492,  494,
	  496,  498,  500,  502,  504,  506,  508,  510,  512,  514,  516,  518,
	  520,  523,  525,  527,  529,  531,  533,  535,  537,  539,  542,  544,
	  546,  548,  550,  552,  554,  556,  558,  560,  562,  564,  566,  568,
	  570,  572,  574,  576,  578,  580,  582,  584,  586,  588,  590,  592,
	  594,  596,  598,  599,  600,  601,  602,  603,  604,  605,  606,  621,
	  623,  625,  627,  629,  631,  633,  635,  637,  639,  641,  643,  645,
	  647,  649,  651,  654,  656,  658,  660,  662,  664,  666,  668,  671,
	  673,  675,  677,  679,  681,  683,  685,  687,  690,  692,  694,  696,
	  698,  700,  702,  704,  706,  708,  710,  712,  714,  716,  718,  720,
	  722,  724,  726,  728,  730,  732,  734,  736,  738,  740,  742,  745,
	  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,  768,  770,
	  772,  773,  777,  783,  786,  788,  794,  812,  815,  817,  819,  821,
	  823,  825,  827,  829,  831,  833,  835,  837,  839,  841,  843,  845,
	  847,  849,  851,  853,  855,  857,  859,  861,  863,  865,  867,  869,
	  871,  873,  875,  877,  879,  881,  883,  885,  887,  889,  891,  895,
	  898,  900,  902,  904,  906,  908,  910,  912,  914,  916,  918,  920,
	  921
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,   70,
	   71,   83,   84,   87,  124,    9,   13,  -69,  -65,   10,   32,   34,
	   35,   37,   42,   64,   65,   66,   69,   70,   71,   83,   84,   87,
	  124,    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,
	   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,
	    9,   13,   10,   32,    9,   13,   10,   13,   10,   95,   70,   69,
	   65,   84,   85,   82,   69,   95,   69,   78,   68,   95,   37,   32,
	   10,   13,   10,   13,   13,   32,   64,    9,   10,    9,   10,   13,
	   32,   64,   11,   12,   10,   32,   64,    9,   13,   98,  110,  105,
	  108,  105,  116,  121,   58,   10,   10,   10,   32,   35,   37,   64,
	   65,   66,   69,   70,   83,    9,   13,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	   98,   10,  105,   10,  108,   10,  105,   10,  116,   10,  121,   10,
	   58,   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,   70,
	   71,   83,   84,   87,  124,    9,   13,   97,  117,   99,  107,  103,
	  114,  111,  117,  110,  100,   58,   10,   10,   10,   32,   35,   37,
	   42,   64,   65,   66,   70,   71,   83,   84,   87,    9,   13,   10,
	   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,
	   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,
	   95,   10,   37,   10,   32,   10,   98,  110,   10,  105,   10,  108,
	   10,  105,   10,  116,   10,  121,   10,   58,   10,  100,   10,  117,
	   10,  115,  116,   10,  105,   10,  110,   10,  101,   10,  115,   10,
	  115,   10,   32,   10,   78,   10,  101,   10,  101,   10,  100,   10,
	  101,   10,   97,   10,  116,   10,  117,   10,  114,   10,  101,   10,
	  105,   10,  118,   10,  101,   10,  110,   10,   99,   10,  101,   10,
	  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   32,   58,
	   10,   79,   84,   10,  117,   10,  116,   10,  108,   10,  105,   10,
	  110,   10,  101,   10,  109,   10,  112,   10,  108,   10,   97,   10,
	  116,   10,  104,  115,  116,  105,  110,  101,  115,  115,   32,   78,
	  101,  101,  100,  120,   97,  109,  112,  108,  101,  115,   58,   10,
	   10,   10,   32,   35,   65,   66,   70,  124,    9,   13,   10,   98,
	   10,  105,   10,  108,   10,  105,   10,  116,   10,  121,   10,   58,
	   10,  117,   10,  115,   10,  105,   10,  110,   10,  101,   10,  115,
	   10,  115,   10,   32,   10,   78,   10,  101,   10,  101,   10,  100,
	   10,  101,   10,   97,   10,  116,   10,  117,   10,  114,   10,  101,
	  101,   97,  116,  117,  114,  101,  105,  118,  101,  110,   99,  101,
	  110,   97,  114,  105,  111,   32,   58,  115,   79,   84,  117,  116,
	  108,  105,  110,  101,   58,   10,   10,   10,   32,   35,   37,   42,
	   64,   65,   66,   70,   71,   83,   84,   87,    9,   13,   10,   95,
	   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,
	   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,
	   10,   37,   10,   32,   10,   98,  110,   10,  105,   10,  108,   10,
	  105,   10,  116,   10,  121,   10,   58,   10,  100,   10,  117,   10,
	  115,  116,   10,  105,   10,  110,   10,  101,   10,  115,   10,  115,
	   10,   32,   10,   78,   10,  101,   10,  101,   10,  100,   10,  101,
	   10,   97,   10,  116,   10,  117,   10,  114,   10,  101,   10,  105,
	   10,  118,   10,  101,   10,  110,   10,   99,   10,  101,   10,  110,
	   10,   97,   10,  114,   10,  105,   10,  111,   10,  104,  101,  109,
	  112,  108,   97,  116,   10,   10,   10,   32,   35,   37,   42,   64,
	   65,   66,   70,   71,   83,   84,   87,    9,   13,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37,   10,   32,   10,   98,  110,   10,  105,   10,  108,   10,  105,
	   10,  116,   10,  121,   10,   58,   10,  100,   10,   97,  117,   10,
	   99,   10,  107,   10,  103,   10,  114,   10,  111,   10,  117,   10,
	  110,   10,  100,   10,  115,  116,   10,  105,   10,  110,   10,  101,
	   10,  115,   10,  115,   10,   32,   10,   78,   10,  101,   10,  101,
	   10,  101,   10,   97,   10,  116,   10,  117,   10,  114,   10,  101,
	   10,  105,   10,  118,   10,  101,   10,  110,   10,   99,   10,  101,
	   10,  110,   10,   97,   10,  114,   10,  105,   10,  111,   10,   32,
	   58,   10,   79,   84,   10,  117,   10,  116,   10,  108,   10,  105,
	   10,  110,   10,  101,   10,  109,   10,  112,   10,  108,   10,   97,
	   10,  116,   10,  104,  104,   32,  124,    9,   13,   10,   32,   92,
	  124,    9,   13,   10,   92,  124,   10,   92,   10,   32,   92,  124,
	    9,   13,   10,   32,   34,   35,   37,   42,   64,   65,   66,   69,
	   70,   71,   83,   84,   87,  124,    9,   13,   10,   97,  117,   10,
	   99,   10,  107,   10,  103,   10,  114,   10,  111,   10,  117,   10,
	  110,   10,  100,   10,  115,   10,  105,   10,  110,   10,  101,   10,
	  115,   10,  115,   10,   32,   10,   78,   10,  101,   10,  101,   10,
	  120,   10,   97,   10,  109,   10,  112,   10,  108,   10,  101,   10,
	  115,   10,  101,   10,   97,   10,  116,   10,  117,   10,  114,   10,
	  101,   10,   99,   10,  101,   10,  110,   10,   97,   10,  114,   10,
	  105,   10,  111,   10,   32,   58,  115,   10,   79,   84,   10,  117,
	   10,  116,   10,  108,   10,  105,   10,  110,   10,  101,   10,  109,
	   10,  112,   10,  108,   10,   97,   10,  116,  100,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   17,    1,    1,   16,    1,    1,    2,    2,    3,    3,    3,
	    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
	    5,    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,   10,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,   16,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    7,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,   13,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    2,    4,    3,    2,    4,   16,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   19,   21,   23,   41,   43,   45,   48,   51,   56,   61,
	   66,   71,   76,   80,   84,   87,   89,   91,   93,   95,   97,   99,
	  101,  103,  105,  107,  109,  111,  113,  115,  117,  119,  122,  125,
	  130,  137,  142,  145,  147,  149,  151,  153,  155,  157,  159,  161,
	  173,  176,  179,  182,  185,  188,  191,  194,  197,  200,  203,  206,
	  209,  212,  215,  218,  221,  224,  227,  230,  233,  236,  254,  257,
	  259,  261,  263,  265,  267,  269,  271,  273,  275,  277,  279,  294,
	  297,  300,  303,  306,  309,  312,  315,  318,  321,  324,  327,  330,
	  333,  336,  339,  343,  346,  349,  352,  355,  358,  361,  364,  367,
	  371,  374,  377,  380,  383,  386,  389,  392,  395,  398,  401,  404,
	  407,  410,  413,  416,  419,  422,  425,  428,  431,  434,  437,  440,
	  443,  446,  449,  452,  456,  460,  463,  466,  469,  472,  475,  478,
	  481,  484,  487,  490,  493,  496,  499,  501,  503,  505,  507,  509,
	  511,  513,  515,  517,  519,  521,  523,  525,  527,  529,  531,  533,
	  535,  537,  539,  548,  551,  554,  557,  560,  563,  566,  569,  572,
	  575,  578,  581,  584,  587,  590,  593,  596,  599,  602,  605,  608,
	  611,  614,  617,  620,  623,  625,  627,  629,  631,  633,  635,  637,
	  639,  641,  643,  645,  647,  649,  651,  653,  655,  657,  661,  664,
	  666,  668,  670,  672,  674,  676,  678,  680,  682,  697,  700,  703,
	  706,  709,  712,  715,  718,  721,  724,  727,  730,  733,  736,  739,
	  742,  746,  749,  752,  755,  758,  761,  764,  767,  770,  774,  777,
	  780,  783,  786,  789,  792,  795,  798,  801,  804,  807,  810,  813,
	  816,  819,  822,  825,  828,  831,  834,  837,  840,  843,  846,  849,
	  852,  855,  858,  860,  862,  864,  866,  868,  870,  872,  874,  889,
	  892,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922,  925,
	  928,  931,  934,  938,  941,  944,  947,  950,  953,  956,  959,  963,
	  966,  969,  972,  975,  978,  981,  984,  987,  991,  994,  997, 1000,
	 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036,
	 1039, 1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1073,
	 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110,
	 1113, 1115, 1119, 1125, 1129, 1132, 1138, 1156, 1160, 1163, 1166, 1169,
	 1172, 1175, 1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 1205,
	 1208, 1211, 1214, 1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241,
	 1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 1279,
	 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310, 1313, 1316,
	 1318
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   15,   16,    2,    0,   17,    0,    2,    0,    3,
	    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
	   15,   15,   16,    2,    0,   18,    0,   19,    0,   21,   22,   20,
	   24,   25,   23,   28,   27,   29,   27,   26,   32,   31,   33,   31,
	   30,   32,   31,   34,   31,   30,   32,   31,   35,   31,   30,   37,
	   36,   38,   36,    0,    3,   39,   39,    0,   37,   36,   36,    0,
	   41,   42,   40,    3,    0,   43,    0,   44,    0,   45,    0,   46,
	    0,   47,    0,   48,    0,   49,    0,   50,    0,   51,    0,   52,
	    0,   53,    0,   54,    0,   55,    0,   56,    0,   57,    0,   59,
	   60,   58,   62,   63,   61,    0,    0,    0,    0,   64,   65,   66,
	   65,   65,   68,   67,   64,    3,   69,    8,   69,    0,   70,   71,
	    0,   72,    0,   73,    0,   74,    0,   75,    0,   76,    0,   77,
	    0,   79,   78,   81,   80,   81,   82,   83,   84,   83,   85,   86,
	   87,   88,   89,   82,   80,   81,   90,   80,   81,   91,   80,   81,
	   92,   80,   81,   93,   80,   81,   94,   80,   81,   95,   80,   81,
	   96,   80,   81,   97,   80,   81,   98,   80,   81,   99,   80,   81,
	  100,   80,   81,  101,   80,   81,  102,   80,   81,  103,   80,   81,
	  104,   80,   81,  105,   80,   81,  106,   80,   81,  107,   80,   81,
	  108,   80,   81,  109,   80,   81,  110,   80,  112,  111,  113,  114,
	  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  124,  125,
	  111,    0,  126,  127,    0,  128,    0,  129,    0,  130,    0,  131,
	    0,  132,    0,  133,    0,  134,    0,  135,    0,  136,    0,  138,
	  137,  140,  139,  140,  141,  142,  143,  144,  142,  145,  146,  147,
	  148,  149,  150,  150,  141,  139,  140,  151,  139,  140,  152,  139,
	  140,  153,  139,  140,  154,  139,  140,  155,  139,  140,  156,  139,
	  140,  157,  139,  140,  158,  139,  140,  159,  139,  140,  160,  139,
	  140,  161,  139,  140,  162,  139,  140,  163,  139,  140,  164,  139,
	  140,  165,  139,  140,  166,  167,  139,  140,  168,  139,  140,  169,
	  139,  140,  170,  139,  140,  171,  139,  140,  172,  139,  140,  165,
	  139,  140,  173,  139,  140,  174,  139,  140,  175,  173,  139,  140,
	  176,  139,  140,  177,  139,  140,  178,  139,  140,  179,  139,  140,
	  180,  139,  140,  181,  139,  140,  182,  139,  140,  183,  139,  140,
	  184,  139,  140,  172,  139,  140,  185,  139,  140,  186,  139,  140,
	  187,  139,  140,  188,  139,  140,  189,  139,  140,  172,  139,  140,
	  190,  139,  140,  191,  139,  140,  192,  139,  140,  173,  139,  140,
	  193,  139,  140,  194,  139,  140,  195,  139,  140,  196,  139,  140,
	  197,  139,  140,  198,  139,  140,  199,  139,  140,  200,  165,  139,
	  140,  201,  202,  139,  140,  203,  139,  140,  204,  139,  140,  205,
	  139,  140,  206,  139,  140,  189,  139,  140,  207,  139,  140,  208,
	  139,  140,  209,  139,  140,  210,  139,  140,  211,  139,  140,  189,
	  139,  140,  191,  139,  212,  213,    0,  214,    0,  215,    0,  216,
	    0,  217,    0,  218,    0,  219,    0,  220,    0,  221,    0,  222,
	    0,   76,    0,  223,    0,  224,    0,  225,    0,  226,    0,  227,
	    0,  228,    0,  229,    0,  230,    0,  232,  231,  234,  233,  234,
	  235,  236,  237,  238,  239,  236,  235,  233,  234,  240,  233,  234,
	  241,  233,  234,  242,  233,  234,  243,  233,  234,  244,  233,  234,
	  245,  233,  234,  246,  233,  234,  247,  233,  234,  248,  233,  234,
	  249,  233,  234,  250,  233,  234,  251,  233,  234,  252,  233,  234,
	  253,  233,  234,  254,  233,  234,  255,  233,  234,  256,  233,  234,
	  257,  233,  234,  245,  233,  234,  258,  233,  234,  259,  233,  234,
	  260,  233,  234,  261,  233,  234,  262,  233,  234,  245,  233,  263,
	    0,  264,    0,  265,    0,  266,    0,  267,    0,   76,    0,  268,
	    0,  269,    0,  270,    0,  213,    0,  271,    0,  272,    0,  273,
	    0,  274,    0,  275,    0,  276,    0,  277,    0,  278,  279,  229,
	    0,  280,  281,    0,  282,    0,  283,    0,  284,    0,  285,    0,
	  286,    0,  287,    0,  288,    0,  290,  289,  292,  291,  292,  293,
	  294,  295,  296,  294,  297,  298,  299,  300,  301,  302,  302,  293,
	  291,  292,  303,  291,  292,  304,  291,  292,  305,  291,  292,  306,
	  291,  292,  307,  291,  292,  308,  291,  292,  309,  291,  292,  310,
	  291,  292,  311,  291,  292,  312,  291,  292,  313,  291,  292,  314,
	  291,  292,  315,  291,  292,  316,  291,  292,  317,  291,  292,  318,
	  319,  291,  292,  320,  291,  292,  321,  291,  292,  322,  291,  292,
	  323,  291,  292,  324,  291,  292,  317,  291,  292,  325,  291,  292,
	  326,  291,  292,  327,  325,  291,  292,  328,  291,  292,  329,  291,
	  292,  330,  291,  292,  331,  291,  292,  332,  291,  292,  333,  291,
	  292,  334,  291,  292,  335,  291,  292,  336,  291,  292,  324,  291,
	  292,  337,  291,  292,  338,  291,  292,  339,  291,  292,  340,  291,
	  292,  341,  291,  292,  324,  291,  292,  342,  291,  292,  343,  291,
	  292,  344,  291,  292,  325,  291,  292,  345,  291,  292,  346,  291,
	  292,  347,  291,  292,  348,  291,  292,  349,  291,  292,  350,  291,
	  292,  324,  291,  292,  343,  291,  351,    0,  352,    0,  353,    0,
	  354,    0,  355,    0,  286,    0,  357,  356,  359,  358,  359,  360,
	  361,  362,  363,  361,  364,  365,  366,  367,  368,  369,  369,  360,
	  358,  359,  370,  358,  359,  371,  358,  359,  372,  358,  359,  373,
	  358,  359,  374,  358,  359,  375,  358,  359,  376,  358,  359,  377,
	  358,  359,  378,  358,  359,  379,  358,  359,  380,  358,  359,  381,
	  358,  359,  382,  358,  359,  383,  358,  359,  384,  358,  359,  385,
	  386,  358,  359,  387,  358,  359,  388,  358,  359,  389,  358,  359,
	  390,  358,  359,  391,  358,  359,  384,  358,  359,  392,  358,  359,
	  393,  394,  358,  359,  395,  358,  359,  396,  358,  359,  397,  358,
	  359,  398,  358,  359,  399,  358,  359,  400,  358,  359,  401,  358,
	  359,  391,  358,  359,  402,  392,  358,  359,  403,  358,  359,  404,
	  358,  359,  405,  358,  359,  406,  358,  359,  407,  358,  359,  408,
	  358,  359,  409,  358,  359,  410,  358,  359,  401,  358,  359,  411,
	  358,  359,  412,  358,  359,  413,  358,  359,  414,  358,  359,  415,
	  358,  359,  391,  358,  359,  416,  358,  359,  417,  358,  359,  418,
	  358,  359,  392,  358,  359,  419,  358,  359,  420,  358,  359,  421,
	  358,  359,  422,  358,  359,  423,  358,  359,  424,  358,  359,  425,
	  358,  359,  426,  384,  358,  359,  427,  428,  358,  359,  429,  358,
	  359,  430,  358,  359,  431,  358,  359,  432,  358,  359,  415,  358,
	  359,  433,  358,  359,  434,  358,  359,  435,  358,  359,  436,  358,
	  359,  437,  358,  359,  415,  358,  359,  417,  358,  269,    0,  438,
	  439,  438,    0,  442,  441,  443,  444,  441,  440,    0,  446,  447,
	  445,    0,  446,  445,  442,  448,  446,  447,  448,  445,  442,  449,
	  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
	  461,  462,  449,    0,   81,  463,  464,   80,   81,  465,   80,   81,
	  466,   80,   81,  467,   80,   81,  468,   80,   81,  469,   80,   81,
	  470,   80,   81,  471,   80,   81,  109,   80,   81,  472,   80,   81,
	  473,   80,   81,  474,   80,   81,  475,   80,   81,  476,   80,   81,
	  477,   80,   81,  478,   80,   81,  479,   80,   81,  480,   80,   81,
	  471,   80,   81,  481,   80,   81,  482,   80,   81,  483,   80,   81,
	  484,   80,   81,  485,   80,   81,  486,   80,   81,  109,   80,   81,
	  487,   80,   81,  488,   80,   81,  489,   80,   81,  490,   80,   81,
	  491,   80,   81,  109,   80,   81,  492,   80,   81,  493,   80,   81,
	  494,   80,   81,  495,   80,   81,  496,   80,   81,  497,   80,   81,
	  498,   80,   81,  499,  110,  109,   80,   81,  500,  501,   80,   81,
	  502,   80,   81,  503,   80,   81,  504,   80,   81,  505,   80,   81,
	  491,   80,   81,  506,   80,   81,  507,   80,   81,  508,   80,   81,
	  509,   80,   81,  510,   80,   81,  491,   80,  213,    0,  511,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   16,   18,   32,   35,   38,   70,  160,
	  196,  202,  206,  360,  361,    3,    6,    7,    8,    9,    8,    8,
	    9,    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,   13,
	   14,    4,   15,   14,   16,    4,   17,   19,   20,   21,   22,   23,
	   24,   25,   26,   27,   28,   29,   30,   31,  420,   33,   34,    4,
	   17,   34,    4,   17,   36,   37,    4,   36,   35,   37,   39,  419,
	   40,   41,   42,   43,   44,   45,   46,   47,   46,   47,   47,    4,
	   48,   62,  367,  386,  393,  399,   49,   50,   51,   52,   53,   54,
	   55,   56,   57,   58,   59,   60,   61,    4,   63,   64,   65,   66,
	   67,   68,   69,    4,    4,    5,   16,   18,   32,   35,   38,   70,
	  160,  196,  202,  206,  360,  361,   71,  149,   72,   73,   74,   75,
	   76,   77,   78,   79,   80,   81,   82,   81,   82,   82,    4,   83,
	   97,   98,  106,  118,  124,  128,  148,   84,   85,   86,   87,   88,
	   89,   90,   91,   92,   93,   94,   95,   96,    4,   69,   99,  105,
	  100,  101,  102,  103,  104,   97,  107,  108,  109,  110,  111,  112,
	  113,  114,  115,  116,  117,  119,  120,  121,  122,  123,  125,  126,
	  127,  129,  130,  131,  132,  133,  134,  135,  136,  137,  142,  138,
	  139,  140,  141,  143,  144,  145,  146,  147,  150,   32,  151,  152,
	  153,  154,  155,  156,  157,  158,  159,  161,  162,  163,  164,  165,
	  166,  167,  168,  169,  170,  169,  170,  170,    4,  171,  178,  190,
	  172,  173,  174,  175,  176,  177,   69,  179,  180,  181,  182,  183,
	  184,  185,  186,  187,  188,  189,  191,  192,  193,  194,  195,  197,
	  198,  199,  200,  201,  203,  204,  205,  207,  208,  209,  210,  211,
	  212,  213,  214,  284,  215,  278,  216,  217,  218,  219,  220,  221,
	  222,  223,  224,  223,  224,  224,    4,  225,  239,  240,  248,  260,
	  266,  270,  277,  226,  227,  228,  229,  230,  231,  232,  233,  234,
	  235,  236,  237,  238,    4,   69,  241,  247,  242,  243,  244,  245,
	  246,  239,  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
	  259,  261,  262,  263,  264,  265,  267,  268,  269,  271,  272,  273,
	  274,  275,  276,  279,  280,  281,  282,  283,  285,  286,  285,  286,
	  286,    4,  287,  301,  302,  310,  329,  335,  339,  359,  288,  289,
	  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,    4,
	   69,  303,  309,  304,  305,  306,  307,  308,  301,  311,  319,  312,
	  313,  314,  315,  316,  317,  318,  320,  321,  322,  323,  324,  325,
	  326,  327,  328,  330,  331,  332,  333,  334,  336,  337,  338,  340,
	  341,  342,  343,  344,  345,  346,  347,  348,  353,  349,  350,  351,
	  352,  354,  355,  356,  357,  358,  361,  362,  363,  365,  366,  364,
	  362,  363,  364,  362,  365,  366,    5,   16,   18,   32,   35,   38,
	   70,  160,  196,  202,  206,  360,  361,  368,  376,  369,  370,  371,
	  372,  373,  374,  375,  377,  378,  379,  380,  381,  382,  383,  384,
	  385,  387,  388,  389,  390,  391,  392,  394,  395,  396,  397,  398,
	  400,  401,  402,  403,  404,  405,  406,  407,  408,  413,  409,  410,
	  411,  412,  414,  415,  416,  417,  418,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,    0,
	  102,    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,    0,
	   11,  106,    0,    0,    0,  114,   25,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,
	  126,    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   69,
	   33,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,    0,    0,
	    0,    0,   13,   31,  130,   60,   57,   31,   63,   57,   63,   63,
	   63,   63,   63,   63,   63,   66,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   57,  144,    0,   54,    0,   72,   33,
	   84,   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   15,   15,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   81,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,   21,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,   84,   84,
	   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   19,   19,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	    0,   75,   33,   84,   84,   84,   84,   84,   84,   84,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
	   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   37,   37,   54,   37,
	   87,    0,    0,   39,    0,    0,   93,   90,   41,   96,   90,   96,
	   96,   96,   96,   96,   96,   96,   99,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 420;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 616 "java/src/main/java/gherkin/lexer/En.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
    
// line 623 "java/src/main/java/gherkin/lexer/En.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 884 "java/src/main/java/gherkin/lexer/En.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 916 "java/src/main/java/gherkin/lexer/En.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/en.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

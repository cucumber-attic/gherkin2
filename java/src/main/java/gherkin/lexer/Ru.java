
// line 1 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Ru implements Lexer {
  
// line 150 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"


  private final Listener listener;

  public Ru(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Ru.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   12,   22,   23,   25,   27,   38,   39,   40,   42,   44,
	   49,   54,   59,   64,   68,   72,   74,   75,   76,   77,   78,   79,
	   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   94,  101,
	  106,  110,  116,  119,  121,  127,  138,  139,  141,  142,  143,  144,
	  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
	  157,  158,  159,  160,  161,  162,  163,  165,  166,  167,  169,  170,
	  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
	  183,  184,  185,  186,  195,  206,  208,  219,  221,  224,  226,  228,
	  230,  232,  234,  236,  238,  240,  242,  244,  246,  248,  250,  252,
	  254,  256,  258,  260,  262,  264,  266,  268,  271,  273,  275,  277,
	  279,  281,  283,  285,  287,  289,  291,  293,  295,  297,  299,  301,
	  303,  305,  307,  309,  311,  313,  315,  317,  319,  321,  323,  325,
	  327,  330,  332,  334,  336,  338,  340,  342,  344,  346,  348,  350,
	  352,  354,  356,  358,  361,  363,  365,  367,  369,  371,  373,  375,
	  377,  379,  381,  383,  385,  387,  389,  391,  393,  395,  397,  399,
	  401,  403,  405,  407,  409,  411,  413,  415,  417,  419,  421,  423,
	  425,  427,  429,  431,  433,  435,  437,  439,  441,  443,  445,  447,
	  449,  452,  454,  456,  459,  461,  463,  465,  467,  469,  471,  473,
	  475,  477,  479,  482,  484,  486,  488,  490,  492,  494,  496,  498,
	  500,  502,  504,  506,  508,  510,  512,  514,  516,  518,  520,  522,
	  524,  525,  526,  527,  528,  529,  530,  531,  532,  533,  534,  535,
	  536,  537,  538,  540,  541,  543,  544,  545,  546,  547,  548,  549,
	  550,  551,  552,  553,  554,  555,  556,  557,  558,  559,  560,  561,
	  562,  563,  564,  565,  566,  567,  568,  569,  570,  577,  580,  582,
	  584,  586,  588,  590,  592,  594,  596,  598,  600,  602,  604,  606,
	  608,  610,  612,  614,  616,  618,  620,  622,  624,  626,  628,  630,
	  633,  635,  637,  639,  641,  643,  645,  647,  649,  650,  651,  652,
	  653,  654,  655,  657,  658,  659,  660,  661,  662,  663,  664,  665,
	  666,  667,  668,  669,  670,  671,  672,  673,  681,  686,  688,  690,
	  692,  694,  696,  698,  700,  702,  704,  706,  708,  710,  712,  714,
	  716,  718,  720,  722,  725,  727,  729,  731,  733,  735,  737,  739,
	  741,  743,  745,  747,  749,  751,  753,  755,  757,  759,  761,  763,
	  765,  767,  769,  771,  773,  776,  778,  780,  782,  784,  786,  788,
	  790,  792,  794,  796,  798,  800,  802,  805,  807,  809,  811,  813,
	  815,  817,  819,  821,  823,  825,  827,  829,  831,  833,  835,  837,
	  839,  841,  843,  845,  847,  849,  851,  853,  855,  857,  859,  861,
	  863,  865,  867,  869,  871,  873,  875,  877,  879,  881,  883,  885,
	  887,  889,  891,  893,  895,  897,  899,  902,  904,  906,  908,  910,
	  912,  914,  916,  918,  920,  922,  924,  926,  928,  930,  932,  934,
	  936,  938,  940,  942,  944,  946,  947,  948,  949,  950,  951,  952,
	  953,  954,  955,  956,  957,  958,  959,  960,  961,  962,  963,  964,
	  965,  966,  967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
	  977,  978,  979,  980,  989, 1000, 1002, 1004, 1007, 1009, 1011, 1013,
	 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037,
	 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1054, 1056, 1058, 1060, 1062,
	 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086,
	 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110,
	 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135,
	 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159,
	 1161, 1163, 1165, 1167, 1169, 1172, 1174, 1176, 1179, 1181, 1183, 1185,
	 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1202, 1204, 1206, 1208, 1210,
	 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234,
	 1236, 1238, 1240, 1242, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1270, 1281, 1283,
	 1285, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308,
	 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332,
	 1335, 1337, 1339, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358,
	 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382,
	 1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1403, 1405, 1407,
	 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431,
	 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1454, 1456,
	 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480,
	 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505,
	 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529,
	 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553,
	 1555, 1557, 1559, 1562, 1564, 1566, 1569, 1571, 1573, 1575, 1577, 1579,
	 1581, 1583, 1585, 1587, 1589, 1591, 1594, 1596, 1598, 1600, 1602, 1604,
	 1606, 1608, 1610, 1612, 1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628,
	 1630, 1632, 1634, 1636, 1637, 1639, 1640, 1641, 1643, 1644, 1645, 1646,
	 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1658, 1659,
	 1660, 1661, 1662, 1663, 1664, 1665, 1666
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -48,  -17,   10,   32,   34,   35,   37,   42,   64,  124,    9,   13,
	 -112, -108, -107, -104, -102,  -99,  -97,  -95,  -94,  -92,   32,   10,
	   13,   10,   13,  -48,   10,   32,   34,   35,   37,   42,   64,  124,
	    9,   13,   34,   34,   10,   13,   10,   13,   10,   32,   34,    9,
	   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,    9,   13,
	   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,   69,   95,
	   69,   78,   68,   95,   37,   13,   32,   64,    9,   10,    9,   10,
	   13,   32,   64,   11,   12,   10,   32,   64,    9,   13,   32,  124,
	    9,   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,   10,
	   92,   10,   32,   92,  124,    9,   13,  -48,   10,   32,   34,   35,
	   37,   42,   64,  124,    9,   13,  -48,  -80,  -66,  -48,  -67,  -48,
	  -66,  -48,  -65,  -47, -125,  -47, -127,  -47, -126,  -48,  -72,  -48,
	  -68,  -47, -127,  -48,  -69,  -48,  -72,  -48,   32,  -66,  -48,  -77,
	  -67,  -48,  -76,  -48,  -80,  -47, -126,  -48,  -75,  -48,  -70,  -47,
	 -127,  -47, -126,   58,   10,   10,  -48,   10,   32,   35,   37,   42,
	   64,    9,   13, -112, -108, -107, -104, -102,  -99,  -97,  -95,  -94,
	  -92,   10,   10,   32,  -48,   10,   32,   34,   35,   37,   42,   64,
	  124,    9,   13,  -48,   10,  -80,  -66,   10,  -48,   10,  -67,   10,
	  -48,   10,  -66,   10,  -48,   10,  -65,   10,  -47,   10, -125,   10,
	  -47,   10, -127,   10,  -47,   10, -126,   10,  -48,   10,  -72,   10,
	  -48,   10,  -68,   10,  -47,   10, -127,   10,  -48,   10,  -69,   10,
	  -48,   10,  -72,   10,  -48,   10,   32,  -66,   10,  -48,   10,  -77,
	   10,  -48,   10,  -76,   10,  -48,   10,  -80,   10,  -47,   10, -126,
	   10,  -48,   10,  -66,   10,  -48,   10,  -68,   10,  -47,   10, -125,
	   10,   10,   32,  -48,   10,  -74,   10,  -48,   10,  -75,   10,  -47,
	   10, -125,   10,  -47,   10, -127,   10,  -47,   10, -126,   10,  -47,
	   10, -116,   10,  -48,  -47,   10,  -78,   10,  -48,   10,  -66,   10,
	  -48,   10,  -71,   10,  -47,   10, -127,   10,  -47,   10, -126,   10,
	  -48,   10,  -78,   10,  -48,   10,  -66,   10,   10,   58, -126, -122,
	   10,  -47,   10, -128,   10,  -47,   10, -125,   10,  -48,   10,  -70,
	   10,  -47,   10, -126,   10,  -47,   10, -125,   10,  -47,   10, -128,
	   10,  -48,   10,  -80,   10,   10,   32,  -47,   10, -127,   10,  -47,
	   10, -122,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -47,
	   10, -113,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -48,
	   10,  -71,   10,  -48,   10,  -80,  -66,   10,  -48,   10,  -70,   10,
	  -48,   10,   32,  -47,   10, -125,   10,  -48,   10,  -67,   10,  -48,
	   10,  -70,   10,  -47,   10, -122,   10,  -48,   10,  -72,   10,  -48,
	  -47,   10,  -66,   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,
	  -48,   10,  -69,   10,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,  -47, -126,  -48,  -66,
	  -48,  -68,  -47, -125,   32,  -48,  -74,  -48,  -75,  -47, -128, -125,
	  -48,  -75,  -72,  -48,  -76,  -47, -117,  -47, -127,  -47, -126,  -48,
	  -66,  -47, -128,  -48,  -72,  -47, -113,  -48,  -68,  -48,  -75,  -47,
	 -128,  -47, -117,   58,   10,   10,  -48,   10,   32,   35,  124,    9,
	   13,  -95,  -92,   10,  -48,   10,  -78,   10,  -48,   10,  -66,   10,
	  -48,   10,  -71,   10,  -47,   10, -127,   10,  -47,   10, -126,   10,
	  -48,   10,  -78,   10,  -48,   10,  -66,   10,   10,   58,  -47,   10,
	 -125,   10,  -48,   10,  -67,   10,  -48,   10,  -70,   10,  -47,   10,
	 -122,   10,  -48,   10,  -72,   10,  -48,  -47,   10,  -66,   10,  -48,
	   10,  -67,   10,  -48,   10,  -80,   10,  -48,   10,  -69,   10, -113,
	   10,  -47, -127,  -47, -126,  -47, -116,  -48,  -47,  -78,  -48,  -66,
	  -48,  -71,  -47, -127,  -47, -126,  -48,  -78,  -48,  -66,   58,   10,
	   10,  -48,   10,   32,   35,   37,   64,    9,   13, -102,  -97,  -95,
	  -92,   10,  -48,   10,  -66,   10,  -48,   10,  -67,   10,  -47,   10,
	 -126,   10,  -48,   10,  -75,   10,  -48,   10,  -70,   10,  -47,   10,
	 -127,   10,  -47,   10, -126,   10,   10,   58,  -47,   10, -128,   10,
	  -48,   10,  -75,  -72,   10,  -48,   10,  -76,   10,  -47,   10, -117,
	   10,  -47,   10, -127,   10,  -47,   10, -126,   10,  -48,   10,  -66,
	   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -47,   10, -113,
	   10,  -48,   10,  -68,   10,  -48,   10,  -75,   10,  -47,   10, -128,
	   10,  -47,   10, -117,   10,  -48,  -47,   10,  -78,   10,  -48,   10,
	  -66,   10,  -48,   10,  -71,   10,  -47,   10, -127,   10,  -47,   10,
	 -126,   10,  -48,   10,  -78,   10,  -48,   10,  -66,   10, -126, -122,
	   10,  -47,   10, -128,   10,  -47,   10, -125,   10,  -48,   10,  -70,
	   10,  -47,   10, -126,   10,  -47,   10, -125,   10,  -47,   10, -128,
	   10,  -48,   10,  -80,   10,   10,   32,  -47,   10, -127,   10,  -47,
	   10, -122,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -48,
	   10,  -71,   10,  -47,   10, -125,   10,  -48,   10,  -67,   10,  -48,
	   10,  -70,   10,  -47,   10, -122,   10,  -48,   10,  -72,   10,  -48,
	  -47,   10,  -66,   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,
	  -48,   10,  -69,   10,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37, -126, -122,  -47, -128,
	  -47, -125,  -48,  -70,  -47, -126,  -47, -125,  -47, -128,  -48,  -80,
	   32,  -47, -127,  -47, -122,  -48,  -75,  -48,  -67,  -48,  -80,  -47,
	 -128,  -48,  -72,  -47, -113,   58,   10,   10,  -48,   10,   32,   35,
	   37,   42,   64,    9,   13, -112, -108, -107, -104, -102,  -99,  -97,
	  -95,  -94,  -92,   10,   10,   32,  -48,   10,  -80,  -66,   10,  -48,
	   10,  -67,   10,  -48,   10,  -66,   10,  -48,   10,  -65,   10,  -47,
	   10, -125,   10,  -47,   10, -127,   10,  -47,   10, -126,   10,  -48,
	   10,  -72,   10,  -48,   10,  -68,   10,  -47,   10, -127,   10,  -48,
	   10,  -69,   10,  -48,   10,  -72,   10,  -48,   10,   32,  -66,   10,
	  -48,   10,  -77,   10,  -48,   10,  -76,   10,  -48,   10,  -80,   10,
	  -47,   10, -126,   10,  -48,   10,  -66,   10,  -48,   10,  -68,   10,
	  -47,   10, -125,   10,   10,   32,  -48,   10,  -74,   10,  -48,   10,
	  -75,   10,  -47,   10, -125,   10,  -47,   10, -127,   10,  -47,   10,
	 -126,   10,  -47,   10, -116,   10,  -48,  -47,   10,  -78,   10,  -48,
	   10,  -66,   10,  -48,   10,  -71,   10,  -47,   10, -127,   10,  -47,
	   10, -126,   10,  -48,   10,  -78,   10,  -48,   10,  -66,   10,   10,
	   58, -122,   10,  -48,   10,  -75,   10,  -48,   10,  -67,   10,  -48,
	   10,  -80,   10,  -47,   10, -128,   10,  -48,   10,  -72,   10,  -48,
	   10,  -71,   10,  -48,   10,  -80,  -66,   10,  -48,   10,  -70,   10,
	  -48,   10,   32,  -47,   10, -125,   10,  -48,   10,  -67,   10,  -48,
	   10,  -70,   10,  -47,   10, -122,   10,  -48,   10,  -72,   10,  -48,
	  -47,   10,  -66,   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,
	  -48,   10,  -69,   10, -113,   10,   10,   95,   10,   70,   10,   69,
	   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,
	   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,  -48,  -75,
	  -48,  -67,  -48,  -80,  -47, -128,  -48,  -72,  -48,  -71,   58,   10,
	   10,  -48,   10,   32,   35,   37,   42,   64,    9,   13, -112, -108,
	 -107, -104, -102,  -99,  -97,  -95,  -94,  -92,   10,   10,   32,  -48,
	   10,  -80,  -66,   10,  -48,   10,  -67,   10,  -48,   10,  -66,   10,
	  -48,   10,  -65,   10,  -47,   10, -125,   10,  -47,   10, -127,   10,
	  -47,   10, -126,   10,  -48,   10,  -72,   10,  -48,   10,  -68,   10,
	  -47,   10, -127,   10,  -48,   10,  -69,   10,  -48,   10,  -72,   10,
	  -48,   10,   32,  -66,   10,  -48,   10,  -77,  -67,   10,  -48,   10,
	  -76,   10,  -48,   10,  -80,   10,  -47,   10, -126,   10,  -48,   10,
	  -75,   10,  -48,   10,  -70,   10,  -47,   10, -127,   10,  -47,   10,
	 -126,   10,   10,   58,  -47,   10, -126,   10,  -48,   10,  -66,   10,
	  -48,   10,  -68,   10,  -47,   10, -125,   10,   10,   32,  -48,   10,
	  -74,   10,  -48,   10,  -75,   10,  -47,   10, -128, -125,   10,  -48,
	   10,  -75,   10,  -48,   10,  -76,   10,  -47,   10, -117,   10,  -47,
	   10, -127,   10,  -47,   10, -126,   10,  -48,   10,  -66,   10,  -47,
	   10, -128,   10,  -48,   10,  -72,   10,  -47,   10, -113,   10,  -47,
	   10, -127,   10,  -47,   10, -126,   10,  -47,   10, -116,   10,  -48,
	  -47,   10,  -78,   10,  -48,   10,  -66,   10,  -48,   10,  -71,   10,
	  -47,   10, -127,   10,  -47,   10, -126,   10,  -48,   10,  -78,   10,
	  -48,   10,  -66,   10, -126, -122,   10,  -47,   10, -128,   10,  -47,
	   10, -125,   10,  -48,   10,  -70,   10,  -47,   10, -126,   10,  -47,
	   10, -125,   10,  -47,   10, -128,   10,  -48,   10,  -80,   10,   10,
	   32,  -47,   10, -127,   10,  -47,   10, -122,   10,  -48,   10,  -75,
	   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,  -48,   10,  -75,
	   10,  -48,   10,  -67,   10,  -48,   10,  -80,   10,  -47,   10, -128,
	   10,  -48,   10,  -72,   10,  -48,   10,  -71,   10,  -48,   10,  -80,
	  -66,   10,  -48,   10,  -70,   10,  -48,   10,   32,  -77,   10,  -47,
	   10, -125,   10,  -48,   10,  -67,   10,  -48,   10,  -70,   10,  -47,
	   10, -122,   10,  -48,   10,  -72,   10,  -48,  -47,   10,  -66,   10,
	  -48,   10,  -67,   10,  -48,   10,  -80,   10,  -48,   10,  -69,   10,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,  -48,  -80,  -66,  -48,  -70,  -48,   32,  -77,
	  -47, -125,  -48,  -67,  -48,  -70,  -47, -122,  -48,  -72,  -48,  -47,
	  -66,  -48,  -67,  -48,  -80,  -48,  -69, -113,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   10,   10,    1,    2,    2,    9,    1,    1,    2,    2,    3,
	    3,    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,    5,    3,
	    2,    4,    3,    2,    4,    9,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    2,    1,    1,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    7,   11,    2,    9,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    5,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
	    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    6,    5,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    7,   11,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    7,   11,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    2,    1,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    1,    0,    0,    0,    0,    1,
	    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   12,   23,   25,   28,   31,   42,   44,   46,   49,   52,
	   57,   62,   67,   72,   76,   80,   83,   85,   87,   89,   91,   93,
	   95,   97,   99,  101,  103,  105,  107,  109,  111,  113,  118,  125,
	  130,  134,  140,  144,  147,  153,  164,  166,  169,  171,  173,  175,
	  177,  179,  181,  183,  185,  187,  189,  191,  193,  195,  197,  199,
	  201,  203,  205,  207,  209,  211,  213,  216,  218,  220,  223,  225,
	  227,  229,  231,  233,  235,  237,  239,  241,  243,  245,  247,  249,
	  251,  253,  255,  257,  266,  278,  281,  292,  295,  299,  302,  305,
	  308,  311,  314,  317,  320,  323,  326,  329,  332,  335,  338,  341,
	  344,  347,  350,  353,  356,  359,  362,  365,  369,  372,  375,  378,
	  381,  384,  387,  390,  393,  396,  399,  402,  405,  408,  411,  414,
	  417,  420,  423,  426,  429,  432,  435,  438,  441,  444,  447,  450,
	  453,  457,  460,  463,  466,  469,  472,  475,  478,  481,  484,  487,
	  490,  493,  496,  499,  503,  506,  509,  512,  515,  518,  521,  524,
	  527,  530,  533,  536,  539,  542,  545,  548,  551,  554,  557,  560,
	  563,  566,  569,  572,  575,  578,  581,  584,  587,  590,  593,  596,
	  599,  602,  605,  608,  611,  614,  617,  620,  623,  626,  629,  632,
	  635,  639,  642,  645,  649,  652,  655,  658,  661,  664,  667,  670,
	  673,  676,  679,  683,  686,  689,  692,  695,  698,  701,  704,  707,
	  710,  713,  716,  719,  722,  725,  728,  731,  734,  737,  740,  743,
	  746,  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,  768,
	  770,  772,  774,  777,  779,  782,  784,  786,  788,  790,  792,  794,
	  796,  798,  800,  802,  804,  806,  808,  810,  812,  814,  816,  818,
	  820,  822,  824,  826,  828,  830,  832,  834,  836,  843,  847,  850,
	  853,  856,  859,  862,  865,  868,  871,  874,  877,  880,  883,  886,
	  889,  892,  895,  898,  901,  904,  907,  910,  913,  916,  919,  922,
	  926,  929,  932,  935,  938,  941,  944,  947,  950,  952,  954,  956,
	  958,  960,  962,  965,  967,  969,  971,  973,  975,  977,  979,  981,
	  983,  985,  987,  989,  991,  993,  995,  997, 1005, 1011, 1014, 1017,
	 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053,
	 1056, 1059, 1062, 1065, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090,
	 1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126,
	 1129, 1132, 1135, 1138, 1141, 1145, 1148, 1151, 1154, 1157, 1160, 1163,
	 1166, 1169, 1172, 1175, 1178, 1181, 1184, 1188, 1191, 1194, 1197, 1200,
	 1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236,
	 1239, 1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 1272,
	 1275, 1278, 1281, 1284, 1287, 1290, 1293, 1296, 1299, 1302, 1305, 1308,
	 1311, 1314, 1317, 1320, 1323, 1326, 1329, 1333, 1336, 1339, 1342, 1345,
	 1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 1372, 1375, 1378, 1381,
	 1384, 1387, 1390, 1393, 1396, 1399, 1401, 1403, 1405, 1407, 1409, 1411,
	 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435,
	 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459,
	 1461, 1463, 1465, 1467, 1476, 1488, 1491, 1494, 1498, 1501, 1504, 1507,
	 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543,
	 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1568, 1571, 1574, 1577, 1580,
	 1583, 1586, 1589, 1592, 1595, 1598, 1601, 1604, 1607, 1610, 1613, 1616,
	 1619, 1622, 1625, 1628, 1631, 1634, 1637, 1640, 1643, 1646, 1649, 1652,
	 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 1683, 1686, 1689,
	 1692, 1695, 1698, 1701, 1704, 1707, 1710, 1713, 1716, 1719, 1722, 1725,
	 1728, 1731, 1734, 1737, 1740, 1744, 1747, 1750, 1754, 1757, 1760, 1763,
	 1766, 1769, 1772, 1775, 1778, 1781, 1784, 1788, 1791, 1794, 1797, 1800,
	 1803, 1806, 1809, 1812, 1815, 1818, 1821, 1824, 1827, 1830, 1833, 1836,
	 1839, 1842, 1845, 1848, 1851, 1854, 1856, 1858, 1860, 1862, 1864, 1866,
	 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884, 1893, 1905, 1908,
	 1911, 1915, 1918, 1921, 1924, 1927, 1930, 1933, 1936, 1939, 1942, 1945,
	 1948, 1951, 1954, 1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978, 1981,
	 1985, 1988, 1991, 1995, 1998, 2001, 2004, 2007, 2010, 2013, 2016, 2019,
	 2022, 2025, 2028, 2031, 2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055,
	 2058, 2061, 2064, 2067, 2070, 2073, 2076, 2079, 2082, 2086, 2089, 2092,
	 2095, 2098, 2101, 2104, 2107, 2110, 2113, 2116, 2119, 2122, 2125, 2128,
	 2131, 2134, 2137, 2140, 2143, 2146, 2149, 2152, 2155, 2158, 2162, 2165,
	 2168, 2171, 2174, 2177, 2180, 2183, 2186, 2189, 2192, 2195, 2198, 2201,
	 2205, 2208, 2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238,
	 2241, 2244, 2247, 2250, 2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274,
	 2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310,
	 2313, 2316, 2319, 2323, 2326, 2329, 2333, 2336, 2339, 2342, 2345, 2348,
	 2351, 2354, 2357, 2360, 2363, 2366, 2370, 2373, 2376, 2379, 2382, 2385,
	 2388, 2391, 2394, 2397, 2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421,
	 2424, 2427, 2430, 2433, 2435, 2438, 2440, 2442, 2445, 2447, 2449, 2451,
	 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2470, 2472, 2474, 2476,
	 2478, 2480, 2482, 2484, 2486, 2488, 2490
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    4,    3,    5,    6,    7,    8,    9,   10,    3,    0,
	   11,   12,   13,   11,   14,   15,   16,   17,   18,   19,    0,   20,
	    0,   22,   23,   21,   25,   26,   24,    1,    4,    3,    5,    6,
	    7,    8,    9,   10,    3,    0,   27,    0,   28,    0,   30,   31,
	   29,   33,   34,   32,   37,   36,   38,   36,   35,   41,   40,   42,
	   40,   39,   41,   40,   43,   40,   39,   41,   40,   44,   40,   39,
	   46,   45,   45,    0,    4,   47,   47,    0,   49,   50,   48,    4,
	    0,   51,    0,   52,    0,   53,    0,   54,    0,   55,    0,   56,
	    0,   57,    0,   58,    0,   59,    0,   60,    0,   61,    0,   62,
	    0,   63,    0,   64,    0,    0,    0,    0,    0,   65,   66,   67,
	   66,   66,   69,   68,   65,    4,   70,    9,   70,    0,   71,   72,
	   71,    0,   75,   74,   76,   77,   74,   73,    0,   79,   80,   78,
	    0,   79,   78,   75,   81,   79,   80,   81,   78,   82,   75,   83,
	   84,   85,   86,   87,   88,   89,   83,    0,   90,    0,   91,   92,
	    0,   93,    0,   15,    0,   94,    0,   11,    0,   95,    0,   96,
	    0,   97,    0,   98,    0,   99,    0,  100,    0,  101,    0,  102,
	    0,  103,    0,  104,    0,  105,    0,   11,    0,  106,    0,  107,
	    0,  108,    0,  109,    0,  110,    0,   11,    0,  111,  112,    0,
	  113,    0,  114,    0,  115,  116,    0,  117,    0,  118,    0,  119,
	    0,   11,    0,  120,    0,  121,    0,  122,    0,  123,    0,  124,
	    0,  125,    0,  126,    0,  127,    0,  128,    0,  129,    0,  130,
	    0,  132,  131,  134,  133,  135,  134,  136,  137,  138,  139,  137,
	  136,  133,  140,  141,  142,  140,  143,  144,  145,  146,  147,  148,
	  134,  133,  134,  149,  133,  150,  152,  151,  153,  154,  155,  156,
	  157,  158,  151,    0,  159,  134,  133,  160,  161,  134,  133,  162,
	  134,  133,  144,  134,  133,  163,  134,  133,  140,  134,  133,  164,
	  134,  133,  165,  134,  133,  166,  134,  133,  167,  134,  133,  168,
	  134,  133,  169,  134,  133,  170,  134,  133,  171,  134,  133,  172,
	  134,  133,  173,  134,  133,  174,  134,  133,  140,  134,  133,  175,
	  134,  133,  176,  134,  133,  177,  134,  133,  178,  134,  133,  179,
	  134,  133,  140,  134,  133,  180,  134,  181,  133,  182,  134,  133,
	  183,  134,  133,  184,  134,  133,  185,  134,  133,  186,  134,  133,
	  187,  134,  133,  140,  134,  133,  188,  134,  133,  189,  134,  133,
	  190,  134,  133,  191,  134,  133,  192,  134,  133,  193,  134,  133,
	  194,  134,  133,  195,  134,  133,  134,  196,  133,  197,  134,  133,
	  198,  134,  133,  199,  134,  133,  140,  134,  133,  200,  134,  133,
	  201,  134,  133,  202,  134,  133,  203,  134,  133,  204,  134,  133,
	  205,  134,  133,  206,  134,  133,  140,  134,  133,  207,  208,  134,
	  133,  209,  134,  133,  210,  134,  133,  211,  134,  133,  212,  134,
	  133,  213,  134,  133,  214,  134,  133,  215,  134,  133,  216,  134,
	  133,  217,  134,  133,  218,  134,  133,  219,  134,  133,  220,  134,
	  133,  221,  134,  133,  134,  149,  133,  222,  223,  134,  133,  224,
	  134,  133,  225,  134,  133,  226,  134,  133,  227,  134,  133,  228,
	  134,  133,  229,  134,  133,  230,  134,  133,  231,  134,  133,  232,
	  134,  133,  233,  134,  133,  234,  134,  133,  235,  134,  133,  236,
	  134,  133,  237,  134,  133,  134,  238,  133,  239,  134,  133,  240,
	  134,  133,  241,  134,  133,  242,  134,  133,  243,  134,  133,  244,
	  134,  133,  245,  134,  133,  246,  134,  133,  247,  134,  133,  248,
	  134,  133,  249,  134,  133,  250,  134,  133,  251,  134,  133,  252,
	  134,  133,  253,  134,  133,  221,  134,  133,  254,  134,  133,  255,
	  134,  133,  256,  134,  133,  257,  134,  133,  258,  134,  133,  259,
	  134,  133,  260,  134,  133,  261,  134,  133,  262,  134,  133,  263,
	  134,  133,  264,  134,  133,  221,  134,  133,  265,  134,  133,  266,
	  267,  134,  133,  268,  134,  133,  196,  134,  133,  183,  134,  149,
	  133,  269,  134,  133,  270,  134,  133,  271,  134,  133,  272,  134,
	  133,  273,  134,  133,  274,  134,  133,  275,  134,  133,  276,  134,
	  133,  277,  134,  133,  278,  134,  133,  279,  253,  134,  133,  280,
	  134,  133,  281,  134,  133,  282,  134,  133,  283,  134,  133,  284,
	  134,  133,  285,  134,  133,  221,  134,  133,  134,  286,  133,  134,
	  287,  133,  134,  288,  133,  134,  289,  133,  134,  290,  133,  134,
	  291,  133,  134,  292,  133,  134,  293,  133,  134,  294,  133,  134,
	  295,  133,  134,  296,  133,  134,  297,  133,  134,  298,  133,  134,
	  299,  133,  300,    0,  301,    0,  302,    0,  303,    0,  304,    0,
	  305,    0,  306,    0,  307,    0,  308,    0,  309,    0,  310,    0,
	  311,    0,   11,    0,  312,    0,  313,  314,    0,  315,    0,  316,
	  317,    0,  318,    0,  319,    0,  320,    0,  321,    0,  322,    0,
	  323,    0,  324,    0,  325,    0,  326,    0,  327,    0,  328,    0,
	  329,    0,  330,    0,  331,    0,  332,    0,  129,    0,  333,    0,
	  334,    0,  335,    0,  336,    0,  337,    0,  338,    0,  339,    0,
	  340,    0,  341,    0,  343,  342,  345,  344,  346,  345,  347,  348,
	  348,  347,  344,  349,  350,  345,  344,  351,  345,  344,  352,  345,
	  344,  353,  345,  344,  354,  345,  344,  355,  345,  344,  356,  345,
	  344,  357,  345,  344,  358,  345,  344,  359,  345,  344,  360,  345,
	  344,  361,  345,  344,  362,  345,  344,  363,  345,  344,  364,  345,
	  344,  345,  365,  344,  366,  345,  344,  367,  345,  344,  368,  345,
	  344,  369,  345,  344,  370,  345,  344,  371,  345,  344,  372,  345,
	  344,  373,  345,  344,  374,  345,  344,  375,  345,  344,  376,  377,
	  345,  344,  378,  345,  344,  379,  345,  344,  380,  345,  344,  381,
	  345,  344,  382,  345,  344,  383,  345,  344,  364,  345,  344,  364,
	  345,  344,  384,    0,  385,    0,  386,    0,  387,    0,  388,    0,
	   11,    0,  389,  390,    0,  391,    0,  392,    0,  393,    0,  394,
	    0,  395,    0,  396,    0,  397,    0,  398,    0,  399,    0,  400,
	    0,  401,    0,  402,    0,  403,    0,  404,    0,  406,  405,  408,
	  407,  409,  408,  410,  411,  412,  411,  410,  407,  413,  414,  415,
	  416,  408,  407,  417,  408,  407,  418,  408,  407,  419,  408,  407,
	  420,  408,  407,  421,  408,  407,  422,  408,  407,  423,  408,  407,
	  424,  408,  407,  425,  408,  407,  426,  408,  407,  427,  408,  407,
	  428,  408,  407,  429,  408,  407,  430,  408,  407,  408,  431,  407,
	  432,  408,  407,  433,  408,  407,  434,  408,  407,  435,  436,  408,
	  407,  437,  408,  407,  438,  408,  407,  439,  408,  407,  440,  408,
	  407,  441,  408,  407,  442,  408,  407,  443,  408,  407,  444,  408,
	  407,  445,  408,  407,  446,  408,  407,  447,  408,  407,  448,  408,
	  407,  449,  408,  407,  450,  408,  407,  451,  408,  407,  430,  408,
	  407,  452,  408,  407,  453,  408,  407,  454,  408,  407,  455,  408,
	  407,  456,  408,  407,  457,  408,  407,  458,  408,  407,  430,  408,
	  407,  459,  460,  408,  407,  461,  408,  407,  462,  408,  407,  463,
	  408,  407,  464,  408,  407,  465,  408,  407,  466,  408,  407,  467,
	  408,  407,  468,  408,  407,  469,  408,  407,  470,  408,  407,  471,
	  408,  407,  472,  408,  407,  430,  408,  407,  473,  474,  408,  407,
	  475,  408,  407,  476,  408,  407,  477,  408,  407,  478,  408,  407,
	  479,  408,  407,  480,  408,  407,  481,  408,  407,  482,  408,  407,
	  483,  408,  407,  484,  408,  407,  485,  408,  407,  486,  408,  407,
	  487,  408,  407,  488,  408,  407,  408,  489,  407,  490,  408,  407,
	  491,  408,  407,  492,  408,  407,  493,  408,  407,  494,  408,  407,
	  495,  408,  407,  496,  408,  407,  497,  408,  407,  498,  408,  407,
	  446,  408,  407,  499,  408,  407,  500,  408,  407,  501,  408,  407,
	  502,  408,  407,  503,  408,  407,  504,  408,  407,  505,  408,  407,
	  506,  408,  407,  507,  408,  407,  508,  408,  407,  509,  408,  407,
	  430,  408,  407,  510,  408,  407,  511,  408,  407,  512,  408,  407,
	  513,  408,  407,  514,  408,  407,  515,  408,  407,  516,  408,  407,
	  517,  408,  407,  518,  408,  407,  519,  408,  407,  520,  451,  408,
	  407,  521,  408,  407,  522,  408,  407,  523,  408,  407,  524,  408,
	  407,  525,  408,  407,  526,  408,  407,  430,  408,  407,  408,  527,
	  407,  408,  528,  407,  408,  529,  407,  408,  530,  407,  408,  531,
	  407,  408,  532,  407,  408,  533,  407,  408,  534,  407,  408,  535,
	  407,  408,  536,  407,  408,  537,  407,  408,  538,  407,  408,  539,
	  407,  408,  540,  407,  541,  542,    0,  543,    0,  544,    0,  545,
	    0,  546,    0,  547,    0,  548,    0,  549,    0,  550,    0,  551,
	    0,  552,    0,  553,    0,  554,    0,  555,    0,  556,    0,  557,
	    0,  558,    0,  559,    0,  560,    0,  561,    0,  562,    0,  563,
	    0,  564,    0,  565,    0,  566,    0,  567,    0,  568,    0,  569,
	    0,  570,    0,  571,    0,  572,    0,  573,    0,  574,    0,  576,
	  575,  578,  577,  579,  578,  580,  581,  582,  583,  581,  580,  577,
	  584,  585,  586,  584,  587,  588,  589,  590,  591,  592,  578,  577,
	  578,  593,  577,  594,  578,  577,  595,  596,  578,  577,  597,  578,
	  577,  588,  578,  577,  598,  578,  577,  584,  578,  577,  599,  578,
	  577,  600,  578,  577,  601,  578,  577,  602,  578,  577,  603,  578,
	  577,  604,  578,  577,  605,  578,  577,  606,  578,  577,  607,  578,
	  577,  608,  578,  577,  609,  578,  577,  584,  578,  577,  610,  578,
	  577,  611,  578,  577,  612,  578,  577,  613,  578,  577,  614,  578,
	  577,  584,  578,  577,  615,  578,  616,  577,  617,  578,  577,  618,
	  578,  577,  619,  578,  577,  620,  578,  577,  621,  578,  577,  622,
	  578,  577,  584,  578,  577,  623,  578,  577,  624,  578,  577,  625,
	  578,  577,  626,  578,  577,  627,  578,  577,  628,  578,  577,  629,
	  578,  577,  630,  578,  577,  578,  631,  577,  632,  578,  577,  633,
	  578,  577,  634,  578,  577,  584,  578,  577,  635,  578,  577,  636,
	  578,  577,  637,  578,  577,  638,  578,  577,  639,  578,  577,  640,
	  578,  577,  641,  578,  577,  584,  578,  577,  642,  643,  578,  577,
	  644,  578,  577,  645,  578,  577,  646,  578,  577,  647,  578,  577,
	  648,  578,  577,  649,  578,  577,  650,  578,  577,  651,  578,  577,
	  652,  578,  577,  653,  578,  577,  654,  578,  577,  655,  578,  577,
	  656,  578,  577,  578,  593,  577,  657,  578,  577,  658,  578,  577,
	  659,  578,  577,  660,  578,  577,  661,  578,  577,  662,  578,  577,
	  663,  578,  577,  664,  578,  577,  665,  578,  577,  666,  578,  577,
	  667,  578,  577,  668,  578,  577,  656,  578,  577,  669,  578,  577,
	  670,  671,  578,  577,  672,  578,  577,  631,  578,  577,  618,  578,
	  593,  577,  673,  578,  577,  674,  578,  577,  675,  578,  577,  676,
	  578,  577,  677,  578,  577,  678,  578,  577,  679,  578,  577,  680,
	  578,  577,  681,  578,  577,  682,  578,  577,  683,  684,  578,  577,
	  685,  578,  577,  686,  578,  577,  687,  578,  577,  688,  578,  577,
	  689,  578,  577,  690,  578,  577,  656,  578,  577,  656,  578,  577,
	  578,  691,  577,  578,  692,  577,  578,  693,  577,  578,  694,  577,
	  578,  695,  577,  578,  696,  577,  578,  697,  577,  578,  698,  577,
	  578,  699,  577,  578,  700,  577,  578,  701,  577,  578,  702,  577,
	  578,  703,  577,  578,  704,  577,  705,    0,  706,    0,  707,    0,
	  708,    0,  709,    0,  710,    0,  711,    0,  712,    0,  713,    0,
	  714,    0,  715,    0,  716,    0,  717,    0,  719,  718,  721,  720,
	  722,  721,  723,  724,  725,  726,  724,  723,  720,  727,  728,  729,
	  727,  730,  731,  732,  733,  734,  735,  721,  720,  721,  736,  720,
	  737,  721,  720,  738,  739,  721,  720,  740,  721,  720,  731,  721,
	  720,  741,  721,  720,  727,  721,  720,  742,  721,  720,  743,  721,
	  720,  744,  721,  720,  745,  721,  720,  746,  721,  720,  747,  721,
	  720,  748,  721,  720,  749,  721,  720,  750,  721,  720,  751,  721,
	  720,  752,  721,  720,  727,  721,  720,  753,  721,  720,  754,  721,
	  720,  755,  721,  720,  756,  721,  720,  757,  721,  720,  727,  721,
	  720,  758,  721,  759,  720,  760,  721,  720,  761,  721,  720,  762,
	  763,  721,  720,  764,  721,  720,  765,  721,  720,  766,  721,  720,
	  727,  721,  720,  767,  721,  720,  768,  721,  720,  769,  721,  720,
	  770,  721,  720,  771,  721,  720,  772,  721,  720,  773,  721,  720,
	  774,  721,  720,  775,  721,  720,  776,  721,  720,  721,  736,  720,
	  777,  721,  720,  778,  721,  720,  779,  721,  720,  780,  721,  720,
	  781,  721,  720,  782,  721,  720,  783,  721,  720,  784,  721,  720,
	  721,  785,  720,  786,  721,  720,  787,  721,  720,  788,  721,  720,
	  727,  721,  720,  789,  721,  720,  790,  791,  721,  720,  792,  721,
	  720,  793,  721,  720,  794,  721,  720,  795,  721,  720,  796,  721,
	  720,  797,  721,  720,  798,  721,  720,  799,  721,  720,  800,  721,
	  720,  801,  721,  720,  802,  721,  720,  803,  721,  720,  804,  721,
	  720,  805,  721,  720,  806,  721,  720,  807,  721,  720,  808,  721,
	  720,  776,  721,  720,  809,  721,  720,  810,  721,  720,  811,  721,
	  720,  812,  721,  720,  813,  721,  720,  727,  721,  720,  814,  815,
	  721,  720,  816,  721,  720,  817,  721,  720,  818,  721,  720,  819,
	  721,  720,  820,  721,  720,  821,  721,  720,  822,  721,  720,  823,
	  721,  720,  824,  721,  720,  825,  721,  720,  826,  721,  720,  827,
	  721,  720,  776,  721,  720,  828,  829,  721,  720,  830,  721,  720,
	  831,  721,  720,  832,  721,  720,  833,  721,  720,  834,  721,  720,
	  835,  721,  720,  836,  721,  720,  837,  721,  720,  838,  721,  720,
	  839,  721,  720,  840,  721,  720,  841,  721,  720,  842,  721,  720,
	  843,  721,  720,  721,  844,  720,  845,  721,  720,  846,  721,  720,
	  847,  721,  720,  848,  721,  720,  849,  721,  720,  850,  721,  720,
	  851,  721,  720,  852,  721,  720,  853,  721,  720,  803,  721,  720,
	  854,  721,  720,  855,  721,  720,  856,  721,  720,  857,  721,  720,
	  858,  721,  720,  859,  721,  720,  860,  721,  720,  861,  721,  720,
	  862,  721,  720,  863,  721,  720,  864,  721,  720,  776,  721,  720,
	  865,  721,  720,  866,  867,  721,  720,  868,  721,  720,  785,  721,
	  720,  869,  721,  736,  720,  762,  721,  720,  870,  721,  720,  871,
	  721,  720,  872,  721,  720,  873,  721,  720,  874,  721,  720,  875,
	  721,  720,  876,  721,  720,  877,  721,  720,  878,  721,  720,  879,
	  721,  720,  880,  808,  721,  720,  881,  721,  720,  882,  721,  720,
	  883,  721,  720,  884,  721,  720,  885,  721,  720,  886,  721,  720,
	  776,  721,  720,  721,  887,  720,  721,  888,  720,  721,  889,  720,
	  721,  890,  720,  721,  891,  720,  721,  892,  720,  721,  893,  720,
	  721,  894,  720,  721,  895,  720,  721,  896,  720,  721,  897,  720,
	  721,  898,  720,  721,  899,  720,  721,  900,  720,  901,    0,  902,
	  903,    0,  904,    0,  308,    0,  905,   20,    0,  115,    0,  906,
	    0,  907,    0,  908,    0,  909,    0,  910,    0,  911,    0,  912,
	    0,  913,    0,  914,    0,  915,    0,  916,  917,    0,  918,    0,
	  919,    0,  920,    0,  921,    0,  922,    0,  923,    0,  403,    0,
	  403,    0,  924,    0,    3,    0,  925,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,  844,    6,    6,    7,   17,   19,    3,   33,   36,    3,
	   42,   60,   66,   46,  253,  326,  819,  825,    4,    5,    6,   18,
	    5,    6,   18,    8,    9,   10,   11,   10,   10,   11,   10,   12,
	   12,   12,   13,   12,   12,   12,   13,   14,   15,   16,    6,   16,
	   17,    6,   18,   20,   21,   22,   23,   24,   25,   26,   27,   28,
	   29,   30,   31,   32,  846,   34,   35,    6,   34,   33,   35,   36,
	   37,   38,   40,   41,   39,   37,   38,   39,   37,   40,    2,   41,
	    7,   17,   19,    3,   33,   36,   43,   44,   48,   45,   47,   49,
	   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   61,   62,
	   63,   64,   65,   67,  240,   68,   69,   70,   74,   71,   72,   73,
	   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
	   87,   86,   87,   88,   87,    6,  226,   89,   89,   91,  109,  115,
	   95,  136,  144,  203,  208,   90,    2,    6,    6,    7,   17,   19,
	    3,   33,   36,   92,   93,   97,   94,   96,   98,   99,  100,  101,
	  102,  103,  104,  105,  106,  107,  108,  110,  111,  112,  113,  114,
	  116,  123,  117,  118,  119,  120,  121,  122,  124,  125,  126,  127,
	  128,  129,  130,  131,  132,  133,  134,  135,  137,  138,  139,  140,
	  141,  142,  143,  145,  159,  146,  147,  148,  149,  150,  151,  152,
	  153,  154,  155,  156,  157,  158,  160,  191,  161,  162,  163,  164,
	  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
	  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
	  189,  190,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
	  202,  204,  205,  207,  206,  209,  210,  211,  212,  213,  214,  215,
	  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  227,  228,
	  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,    6,
	  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
	  254,  255,  320,  256,  257,  273,  258,  259,  260,  261,  262,  263,
	  264,  265,  266,  267,  268,  269,  270,  271,  272,  274,  275,  276,
	  277,  278,  279,  280,  281,  282,  283,  284,  283,  284,  285,  284,
	    6,  286,  301,  287,  288,  289,  290,  291,  292,  293,  294,  295,
	  296,  297,  298,  299,  300,   90,  302,  303,  304,  305,  306,  307,
	  308,  309,  310,  311,  312,  319,  313,  314,  315,  316,  317,  318,
	  321,  322,  323,  324,  325,  327,  472,  328,  329,  330,  331,  332,
	  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  342,
	  343,  344,  343,    6,  458,  345,  360,  388,  440,  346,  347,  348,
	  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,   90,
	  361,  362,  363,  364,  380,  365,  366,  367,  368,  369,  370,  371,
	  372,  373,  374,  375,  376,  377,  378,  379,  381,  382,  383,  384,
	  385,  386,  387,  389,  402,  390,  391,  392,  393,  394,  395,  396,
	  397,  398,  399,  400,  401,  403,  428,  404,  405,  406,  407,  408,
	  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
	  421,  422,  423,  424,  425,  426,  427,  429,  430,  431,  432,  433,
	  434,  435,  436,  437,  438,  439,  441,  442,  443,  444,  445,  446,
	  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  459,
	  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
	    6,  473,  629,  474,  475,  476,  477,  478,  479,  480,  481,  482,
	  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
	  495,  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
	  507,  506,  507,  508,  507,    6,  615,  509,  509,  510,  528,  534,
	  514,  555,  563,  591,  596,   90,  511,  512,  516,  513,  515,  517,
	  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,  529,  530,
	  531,  532,  533,  535,  542,  536,  537,  538,  539,  540,  541,  543,
	  544,  545,  546,  547,  548,  549,  550,  551,  552,  553,  554,  556,
	  557,  558,  559,  560,  561,  562,  564,  578,  565,  566,  567,  568,
	  569,  570,  571,  572,  573,  574,  575,  576,  577,  579,  580,  581,
	  582,  583,  584,  585,  586,  587,  588,  589,  590,  592,  593,  595,
	  594,  597,  598,  599,  600,  601,  602,  603,  604,  605,  606,  607,
	  614,  608,  609,  610,  611,  612,  613,  616,  617,  618,  619,  620,
	  621,  622,  623,  624,  625,  626,  627,  628,    6,  630,  631,  632,
	  633,  634,  635,  636,  637,  638,  639,  640,  641,  642,  643,  644,
	  643,  644,  645,  644,    6,  805,  646,  646,  647,  665,  671,  651,
	  703,  729,  781,  787,   90,  648,  649,  653,  650,  652,  654,  655,
	  656,  657,  658,  659,  660,  661,  662,  663,  664,  666,  667,  668,
	  669,  670,  672,  690,  673,  674,  675,  679,  676,  677,  678,  680,
	  681,  682,  683,  684,  685,  686,  687,  688,  689,  691,  692,  693,
	  694,  695,  696,  697,  698,  699,  700,  701,  702,  704,  705,  723,
	  706,  707,  708,  709,  710,  711,  712,  713,  714,  715,  716,  717,
	  718,  719,  720,  721,  722,  724,  725,  726,  727,  728,  730,  743,
	  731,  732,  733,  734,  735,  736,  737,  738,  739,  740,  741,  742,
	  744,  769,  745,  746,  747,  748,  749,  750,  751,  752,  753,  754,
	  755,  756,  757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
	  767,  768,  770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
	  780,  782,  783,  785,  784,  786,  788,  789,  790,  791,  792,  793,
	  794,  795,  796,  797,  798,  799,  800,  801,  802,  803,  804,  806,
	  807,  808,  809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
	    6,  820,  821,  823,  822,  824,  826,  827,  828,  829,  830,  831,
	  832,  833,  834,  835,  836,  843,  837,  838,  839,  840,  841,  842,
	  845,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,    0,    0,   54,    3,    1,    0,   29,    1,   35,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,  126,
	    0,  110,   23,    0,    0,    7,  139,   48,    0,  102,    9,    5,
	   45,  134,   45,    0,   33,  122,   33,   33,    0,   11,  106,    0,
	    0,  114,   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   27,  118,   27,   51,    0,    0,
	    0,   37,   37,   54,   37,   87,    0,    0,   39,    0,   96,    0,
	   93,   90,   41,   96,   90,   99,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,   84,    0,   72,   33,   84,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,   63,   31,  130,   60,   57,   31,
	   63,   57,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,
	   81,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   21,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,
	   54,   84,    0,   69,   33,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  144,    0,   54,   84,    0,   78,   33,   84,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,   84,    0,   75,   33,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 846;

static final int lexer_en_main = 1;


// line 159 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 1021 "java/src/main/java/gherkin/lexer/Ru.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
    
// line 1028 "java/src/main/java/gherkin/lexer/Ru.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1289 "java/src/main/java/gherkin/lexer/Ru.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1321 "java/src/main/java/gherkin/lexer/Ru.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/son/work/github/os97673/gherkin/tasks/../ragel/i18n/ru.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}

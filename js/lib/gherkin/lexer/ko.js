
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ko.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 15, 17, 18, 19, 21, 22, 
	23, 24, 25, 26, 28, 42, 46, 47, 
	48, 49, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	76, 79, 81, 83, 86, 88, 90, 92, 
	94, 108, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 144, 
	147, 149, 151, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 178, 
	180, 184, 186, 188, 190, 193, 195, 197, 
	199, 201, 203, 205, 208, 210, 212, 214, 
	216, 218, 220, 222, 224, 226, 228, 230, 
	232, 234, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 281, 282, 294, 297, 299, 301, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 335, 337, 339, 
	341, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 367, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	455, 456, 457, 458, 465, 467, 469, 471, 
	473, 475, 477, 478, 479, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	494, 499, 504, 509, 514, 518, 522, 524, 
	525, 526, 527, 528, 529, 530, 531, 532, 
	533, 534, 535, 536, 537, 538, 539, 540, 
	545, 552, 557, 561, 567, 570, 572, 578, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 614, 616, 618, 620, 623, 625, 
	627, 629, 631, 633, 635, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	661, 663, 665, 667, 669, 671, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 699, 701, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 726, 727, 728, 729, 730, 731, 732, 
	733, 734, 735, 736, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	771, 773, 775, 777, 779, 781, 783, 785, 
	787, 789, 791, 794, 796, 798, 800, 802, 
	804, 806, 808, 810, 812, 814, 816, 818, 
	820, 822, 824, 826, 828, 830, 832, 834, 
	836, 837, 838
];

const _lexer_trans_keys = [
	-22, -21, -20, -19, 10, 32, 34, 35, 
	37, 42, 64, 124, 239, 9, 13, -73, 
	-72, -72, -21, -97, -90, -84, -21, -87, 
	-76, 10, 10, 13, -22, -21, -20, -19, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -117, -89, -88, -80, -88, -116, 
	-20, -107, -99, -67, -68, -68, -20, -96, 
	-128, -80, -22, -78, -67, 58, 10, 10, 
	-22, -21, -20, -19, 10, 32, 35, 37, 
	42, 64, 9, 13, -73, -72, 10, -72, 
	10, -21, 10, -97, -90, 10, -84, 10, 
	-21, 10, -87, 10, -76, 10, -22, -21, 
	-20, -19, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -117, -104, -95, -100, 
	-21, -126, -104, -21, -90, -84, -20, -104, 
	-92, 32, 58, -22, -80, -100, -20, -102, 
	-108, 58, 10, 10, -22, -21, -20, -19, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-73, -72, 10, -72, 10, -21, 10, -97, 
	-90, 10, -84, 10, -21, 10, -87, 10, 
	-76, 10, -84, 10, -22, 10, -77, 10, 
	-96, 10, -80, 10, -21, 10, -118, 10, 
	-91, 10, 10, 58, -117, -89, -88, 10, 
	-88, 10, -116, 10, -20, 10, -107, -99, 
	10, -67, 10, -68, 10, -68, 10, -20, 
	10, -96, 10, -128, 10, -117, -95, 10, 
	-100, 10, -21, 10, -126, 10, -104, 10, 
	-21, 10, -90, 10, -84, 10, -20, 10, 
	-104, 10, -92, 10, -80, 10, -22, 10, 
	-79, 10, -107, 10, -104, 10, -20, 10, 
	-89, 10, -128, 10, -21, 10, -89, 10, 
	-116, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 10, -22, -21, -20, -19, 10, 32, 
	35, 37, 42, 64, 9, 13, -73, -72, 
	10, -72, 10, -21, 10, -97, -90, 10, 
	-84, 10, -21, 10, -87, 10, -76, 10, 
	-84, 10, -22, 10, -77, 10, -96, 10, 
	-80, 10, -21, 10, -118, 10, -91, 10, 
	10, 58, -117, -89, -88, -80, 10, -88, 
	10, -116, 10, -20, 10, -107, -99, 10, 
	-67, 10, -68, 10, -68, 10, -20, 10, 
	-96, 10, -128, 10, -80, 10, -22, 10, 
	-78, 10, -67, 10, -117, -95, 10, -100, 
	10, -21, 10, -126, 10, -104, 10, -21, 
	10, -90, 10, -84, 10, -20, 10, -104, 
	10, -92, 10, 10, 32, 58, -22, 10, 
	-80, 10, -100, 10, -20, 10, -102, 10, 
	-108, 10, -80, 10, -22, 10, -79, 10, 
	-107, 10, -104, 10, -20, 10, -89, 10, 
	-128, 10, -21, 10, -89, 10, -116, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, -120, 58, 
	10, 10, -22, 10, 32, 35, 124, 9, 
	13, -72, 10, -80, 10, -21, 10, -118, 
	10, -91, 10, 10, 58, -80, -22, -79, 
	-107, -104, -20, -89, -128, -21, -89, -116, 
	34, 34, 10, 32, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 32, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -22, -21, -20, -19, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-84, 10, -22, 10, -77, 10, -96, 10, 
	-80, 10, -21, 10, -118, 10, -91, 10, 
	10, 58, -117, -89, -88, 10, -88, 10, 
	-116, 10, -20, 10, -107, -99, 10, -67, 
	10, -68, 10, -68, 10, -20, 10, -96, 
	10, -128, 10, -117, -95, 10, -100, 10, 
	-21, 10, -126, 10, -104, 10, -21, 10, 
	-90, 10, -84, 10, -20, 10, -104, 10, 
	-92, 10, 10, 32, 58, -22, 10, -80, 
	10, -100, 10, -20, 10, -102, 10, -108, 
	10, -80, 10, -22, 10, -79, 10, -107, 
	10, -104, 10, -20, 10, -89, 10, -128, 
	10, -21, 10, -89, 10, -116, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, -84, -22, -77, 
	-96, -80, -21, -118, -91, 58, 10, 10, 
	-22, -21, -20, 10, 32, 35, 37, 64, 
	9, 13, -72, 10, -80, 10, -21, 10, 
	-118, 10, -91, 10, 10, 58, -80, 10, 
	-80, 10, -22, 10, -78, 10, -67, 10, 
	-117, -104, 10, -100, 10, -21, 10, -126, 
	10, -104, 10, -21, 10, -90, 10, -84, 
	10, -20, 10, -104, 10, -92, 10, 10, 
	32, 58, -22, 10, -80, 10, -100, 10, 
	-20, 10, -102, 10, -108, 10, -120, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 13, 2, 1, 1, 2, 1, 1, 
	1, 1, 1, 2, 12, 4, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	12, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 10, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 3, 3, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 15, 18, 20, 22, 25, 27, 
	29, 31, 33, 35, 38, 52, 57, 59, 
	61, 63, 66, 68, 70, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	104, 108, 111, 114, 118, 121, 124, 127, 
	130, 144, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 201, 
	205, 208, 211, 215, 218, 221, 224, 227, 
	230, 233, 236, 239, 242, 245, 248, 251, 
	254, 259, 262, 265, 268, 272, 275, 278, 
	281, 284, 287, 290, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 339, 342, 345, 348, 351, 
	354, 357, 360, 363, 366, 369, 372, 375, 
	378, 381, 384, 387, 390, 393, 396, 399, 
	402, 404, 406, 418, 422, 425, 428, 432, 
	435, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 477, 480, 483, 
	486, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 524, 527, 530, 533, 
	536, 539, 542, 545, 548, 551, 554, 558, 
	561, 564, 567, 570, 573, 576, 579, 582, 
	585, 588, 591, 594, 597, 600, 603, 606, 
	609, 612, 615, 618, 621, 624, 627, 630, 
	633, 636, 639, 642, 645, 648, 651, 654, 
	656, 658, 660, 662, 669, 672, 675, 678, 
	681, 684, 687, 689, 691, 693, 695, 697, 
	699, 701, 703, 705, 707, 709, 711, 713, 
	717, 722, 727, 732, 737, 741, 745, 748, 
	750, 752, 754, 756, 758, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	785, 792, 797, 801, 807, 811, 814, 820, 
	834, 837, 840, 843, 846, 849, 852, 855, 
	858, 861, 866, 869, 872, 875, 879, 882, 
	885, 888, 891, 894, 897, 901, 904, 907, 
	910, 913, 916, 919, 922, 925, 928, 931, 
	935, 938, 941, 944, 947, 950, 953, 956, 
	959, 962, 965, 968, 971, 974, 977, 980, 
	983, 986, 989, 992, 995, 998, 1001, 1004, 
	1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 
	1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 
	1047, 1049, 1051, 1053, 1063, 1066, 1069, 1072, 
	1075, 1078, 1081, 1084, 1087, 1090, 1093, 1096, 
	1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 
	1124, 1127, 1130, 1134, 1137, 1140, 1143, 1146, 
	1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 
	1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 
	1197, 1199, 1201
];

const _lexer_indicies = [
	1, 2, 3, 4, 6, 5, 7, 8, 
	9, 10, 11, 12, 13, 5, 0, 14, 
	15, 0, 16, 0, 17, 0, 18, 19, 
	0, 20, 0, 21, 0, 22, 0, 23, 
	0, 0, 24, 26, 27, 25, 1, 2, 
	3, 4, 6, 5, 7, 8, 9, 10, 
	11, 12, 5, 0, 28, 29, 30, 31, 
	0, 23, 0, 32, 0, 33, 0, 34, 
	35, 0, 23, 0, 23, 0, 36, 0, 
	37, 0, 38, 0, 23, 0, 39, 0, 
	40, 0, 41, 0, 42, 0, 43, 0, 
	45, 44, 47, 46, 48, 49, 50, 51, 
	47, 52, 53, 54, 55, 53, 52, 46, 
	56, 57, 47, 46, 58, 47, 46, 59, 
	47, 46, 60, 61, 47, 46, 62, 47, 
	46, 63, 47, 46, 64, 47, 46, 65, 
	47, 46, 66, 67, 68, 69, 71, 70, 
	72, 73, 74, 75, 76, 77, 70, 0, 
	78, 79, 80, 0, 81, 0, 82, 0, 
	83, 0, 84, 0, 85, 0, 86, 0, 
	87, 0, 88, 0, 89, 0, 90, 0, 
	91, 92, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 101, 100, 103, 102, 104, 105, 106, 
	107, 103, 108, 109, 110, 111, 109, 108, 
	102, 112, 113, 103, 102, 114, 103, 102, 
	115, 103, 102, 116, 117, 103, 102, 118, 
	103, 102, 119, 103, 102, 120, 103, 102, 
	121, 103, 102, 122, 103, 102, 123, 103, 
	102, 124, 103, 102, 121, 103, 102, 125, 
	103, 102, 126, 103, 102, 127, 103, 102, 
	128, 103, 102, 103, 121, 102, 129, 130, 
	131, 103, 102, 121, 103, 102, 132, 103, 
	102, 133, 103, 102, 134, 135, 103, 102, 
	121, 103, 102, 121, 103, 102, 136, 103, 
	102, 137, 103, 102, 138, 103, 102, 121, 
	103, 102, 139, 140, 103, 102, 141, 103, 
	102, 142, 103, 102, 143, 103, 102, 144, 
	103, 102, 145, 103, 102, 146, 103, 102, 
	147, 103, 102, 148, 103, 102, 149, 103, 
	102, 128, 103, 102, 150, 103, 102, 151, 
	103, 102, 120, 103, 102, 152, 103, 102, 
	153, 103, 102, 154, 103, 102, 155, 103, 
	102, 156, 103, 102, 157, 103, 102, 158, 
	103, 102, 121, 103, 102, 103, 159, 102, 
	103, 160, 102, 103, 161, 102, 103, 162, 
	102, 103, 163, 102, 103, 164, 102, 103, 
	165, 102, 103, 166, 102, 103, 167, 102, 
	103, 168, 102, 103, 169, 102, 103, 170, 
	102, 103, 171, 102, 103, 172, 102, 103, 
	121, 102, 174, 173, 176, 175, 177, 178, 
	179, 180, 176, 181, 182, 183, 184, 182, 
	181, 175, 185, 186, 176, 175, 187, 176, 
	175, 188, 176, 175, 189, 190, 176, 175, 
	191, 176, 175, 192, 176, 175, 193, 176, 
	175, 194, 176, 175, 195, 176, 175, 196, 
	176, 175, 197, 176, 175, 194, 176, 175, 
	198, 176, 175, 199, 176, 175, 200, 176, 
	175, 201, 176, 175, 176, 194, 175, 202, 
	203, 204, 205, 176, 175, 194, 176, 175, 
	206, 176, 175, 207, 176, 175, 208, 209, 
	176, 175, 194, 176, 175, 194, 176, 175, 
	210, 176, 175, 211, 176, 175, 212, 176, 
	175, 194, 176, 175, 213, 176, 175, 214, 
	176, 175, 215, 176, 175, 201, 176, 175, 
	216, 217, 176, 175, 218, 176, 175, 219, 
	176, 175, 220, 176, 175, 221, 176, 175, 
	222, 176, 175, 223, 176, 175, 224, 176, 
	175, 225, 176, 175, 226, 176, 175, 227, 
	176, 175, 176, 228, 194, 175, 229, 176, 
	175, 230, 176, 175, 231, 176, 175, 232, 
	176, 175, 233, 176, 175, 201, 176, 175, 
	234, 176, 175, 235, 176, 175, 193, 176, 
	175, 236, 176, 175, 237, 176, 175, 238, 
	176, 175, 239, 176, 175, 240, 176, 175, 
	241, 176, 175, 242, 176, 175, 194, 176, 
	175, 176, 243, 175, 176, 244, 175, 176, 
	245, 175, 176, 246, 175, 176, 247, 175, 
	176, 248, 175, 176, 249, 175, 176, 250, 
	175, 176, 251, 175, 176, 252, 175, 176, 
	253, 175, 176, 254, 175, 176, 255, 175, 
	176, 256, 175, 176, 194, 175, 257, 0, 
	258, 0, 260, 259, 262, 261, 263, 262, 
	264, 265, 265, 264, 261, 266, 262, 261, 
	267, 262, 261, 268, 262, 261, 269, 262, 
	261, 270, 262, 261, 262, 271, 261, 272, 
	0, 273, 0, 22, 0, 274, 0, 275, 
	0, 276, 0, 277, 0, 278, 0, 279, 
	0, 280, 0, 23, 0, 281, 0, 282, 
	0, 283, 282, 282, 0, 286, 285, 287, 
	285, 284, 290, 289, 291, 289, 288, 290, 
	289, 292, 289, 288, 290, 289, 293, 289, 
	288, 295, 294, 294, 0, 6, 296, 296, 
	0, 298, 299, 297, 6, 0, 300, 0, 
	301, 0, 302, 0, 303, 0, 304, 0, 
	305, 0, 306, 0, 307, 0, 308, 0, 
	309, 0, 310, 0, 311, 0, 312, 0, 
	313, 0, 23, 0, 0, 0, 0, 0, 
	314, 315, 316, 315, 315, 318, 317, 314, 
	6, 319, 11, 319, 0, 320, 321, 320, 
	0, 324, 323, 325, 326, 323, 322, 0, 
	328, 329, 327, 0, 328, 327, 324, 330, 
	328, 329, 330, 327, 331, 332, 333, 334, 
	324, 335, 336, 337, 338, 339, 340, 341, 
	335, 0, 342, 47, 46, 343, 47, 46, 
	344, 47, 46, 65, 47, 46, 345, 47, 
	46, 346, 47, 46, 347, 47, 46, 348, 
	47, 46, 47, 65, 46, 349, 350, 351, 
	47, 46, 65, 47, 46, 352, 47, 46, 
	353, 47, 46, 354, 355, 47, 46, 65, 
	47, 46, 65, 47, 46, 356, 47, 46, 
	357, 47, 46, 358, 47, 46, 65, 47, 
	46, 359, 360, 47, 46, 361, 47, 46, 
	362, 47, 46, 363, 47, 46, 364, 47, 
	46, 365, 47, 46, 366, 47, 46, 367, 
	47, 46, 368, 47, 46, 369, 47, 46, 
	370, 47, 46, 47, 371, 65, 46, 372, 
	47, 46, 373, 47, 46, 374, 47, 46, 
	375, 47, 46, 376, 47, 46, 348, 47, 
	46, 377, 47, 46, 378, 47, 46, 64, 
	47, 46, 379, 47, 46, 380, 47, 46, 
	381, 47, 46, 382, 47, 46, 383, 47, 
	46, 384, 47, 46, 385, 47, 46, 65, 
	47, 46, 47, 386, 46, 47, 387, 46, 
	47, 388, 46, 47, 389, 46, 47, 390, 
	46, 47, 391, 46, 47, 392, 46, 47, 
	393, 46, 47, 394, 46, 47, 395, 46, 
	47, 396, 46, 47, 397, 46, 47, 398, 
	46, 47, 399, 46, 47, 65, 46, 400, 
	0, 401, 0, 402, 0, 23, 0, 403, 
	0, 404, 0, 405, 0, 406, 0, 407, 
	0, 409, 408, 411, 410, 412, 413, 414, 
	411, 415, 416, 417, 416, 415, 410, 418, 
	411, 410, 419, 411, 410, 420, 411, 410, 
	421, 411, 410, 422, 411, 410, 411, 423, 
	410, 424, 411, 410, 425, 411, 410, 426, 
	411, 410, 427, 411, 410, 422, 411, 410, 
	428, 429, 411, 410, 430, 411, 410, 431, 
	411, 410, 432, 411, 410, 433, 411, 410, 
	434, 411, 410, 435, 411, 410, 436, 411, 
	410, 437, 411, 410, 438, 411, 410, 439, 
	411, 410, 411, 440, 423, 410, 441, 411, 
	410, 442, 411, 410, 443, 411, 410, 444, 
	411, 410, 445, 411, 410, 422, 411, 410, 
	422, 411, 410, 411, 446, 410, 411, 447, 
	410, 411, 448, 410, 411, 449, 410, 411, 
	450, 410, 411, 451, 410, 411, 452, 410, 
	411, 453, 410, 411, 454, 410, 411, 455, 
	410, 411, 456, 410, 411, 457, 410, 411, 
	458, 410, 411, 459, 410, 460, 0, 5, 
	0, 461, 0
];

const _lexer_trans_targs = [
	0, 2, 13, 41, 221, 12, 12, 229, 
	238, 240, 254, 255, 258, 384, 3, 332, 
	4, 5, 6, 328, 7, 8, 9, 10, 
	11, 11, 12, 239, 14, 15, 20, 24, 
	16, 17, 18, 19, 21, 22, 23, 25, 
	26, 27, 28, 29, 30, 31, 30, 31, 
	32, 273, 284, 305, 31, 12, 313, 327, 
	33, 268, 34, 35, 36, 264, 37, 38, 
	39, 40, 2, 13, 41, 221, 12, 12, 
	229, 238, 240, 254, 255, 258, 42, 207, 
	218, 43, 44, 45, 46, 47, 48, 49, 
	50, 51, 52, 53, 128, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 61, 62, 
	63, 80, 91, 105, 62, 12, 113, 127, 
	64, 75, 65, 66, 67, 71, 68, 69, 
	70, 40, 72, 73, 74, 76, 77, 78, 
	79, 81, 82, 87, 83, 84, 85, 86, 
	88, 89, 90, 92, 102, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 103, 104, 
	106, 107, 108, 109, 110, 111, 112, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 12, 129, 130, 129, 
	130, 131, 148, 163, 184, 130, 12, 192, 
	206, 132, 143, 133, 134, 135, 139, 136, 
	137, 138, 40, 140, 141, 142, 144, 145, 
	146, 147, 149, 150, 155, 159, 151, 152, 
	153, 154, 156, 157, 158, 160, 161, 162, 
	164, 181, 165, 166, 167, 168, 169, 170, 
	171, 172, 173, 174, 175, 176, 177, 178, 
	179, 180, 182, 183, 185, 186, 187, 188, 
	189, 190, 191, 193, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	12, 208, 209, 210, 211, 210, 211, 212, 
	211, 12, 213, 214, 215, 216, 217, 40, 
	219, 220, 222, 223, 224, 225, 226, 227, 
	228, 230, 231, 232, 233, 233, 233, 234, 
	233, 233, 233, 234, 235, 236, 237, 12, 
	237, 238, 12, 239, 241, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 386, 256, 257, 12, 256, 255, 257, 
	258, 259, 260, 262, 263, 261, 259, 260, 
	261, 259, 262, 2, 13, 41, 221, 263, 
	229, 238, 240, 254, 255, 258, 265, 266, 
	267, 269, 270, 271, 272, 274, 275, 280, 
	276, 277, 278, 279, 281, 282, 283, 285, 
	302, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 303, 304, 306, 307, 308, 309, 310, 
	311, 312, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 323, 324, 325, 326, 12, 
	329, 330, 331, 333, 334, 335, 336, 337, 
	338, 339, 338, 339, 340, 346, 351, 339, 
	12, 370, 341, 342, 343, 344, 345, 40, 
	347, 348, 349, 350, 352, 369, 353, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	363, 364, 365, 366, 367, 368, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 382, 383, 12, 385, 0
];

const _lexer_trans_actions = [
	39, 25, 25, 25, 25, 0, 47, 3, 
	1, 0, 25, 1, 31, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 0, 99, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 77, 77, 0, 65, 29, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 56, 56, 56, 56, 27, 115, 
	53, 50, 27, 56, 50, 59, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 77, 77, 0, 71, 29, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 50, 124, 0, 
	47, 77, 77, 77, 77, 0, 68, 29, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 50, 124, 0, 47, 77, 
	0, 74, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 107, 23, 44, 0, 
	0, 0, 33, 33, 47, 33, 80, 0, 
	0, 35, 0, 89, 89, 89, 89, 0, 
	86, 83, 37, 89, 83, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 77, 77, 77, 0, 
	62, 29, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 386;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 719 "js/lib/gherkin/lexer/ko.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */
  
/* line 726 "js/lib/gherkin/lexer/ko.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 942 "js/lib/gherkin/lexer/ko.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 981 "js/lib/gherkin/lexer/ko.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

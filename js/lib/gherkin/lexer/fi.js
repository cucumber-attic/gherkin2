
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fi.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 39, 44, 
	49, 54, 59, 63, 67, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 88, 
	93, 100, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 205, 206, 
	208, 209, 210, 212, 213, 214, 215, 216, 
	217, 218, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 248, 249, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 347, 349, 351, 353, 356, 358, 360, 
	362, 364, 366, 368, 370, 371, 372, 373, 
	374, 375, 376, 377, 391, 393, 395, 397, 
	399, 401, 403, 405, 407, 409, 411, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 440, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 477, 
	478, 479, 480, 481, 482, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 520, 522, 524, 526, 528, 530, 532, 
	534, 536, 538, 540, 542, 545, 547, 549, 
	551, 553, 555, 557, 559, 561, 563, 565, 
	567, 569, 571, 573, 575, 577, 579, 581, 
	583, 585, 588, 590, 592, 594, 596, 600, 
	606, 609, 611, 617, 633, 635, 638, 640, 
	642, 645, 647, 649, 651, 654, 656, 658, 
	660, 662, 664, 666, 668, 669, 670
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 74, 
	75, 77, 78, 79, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 124, 9, 
	13, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 97, 117, 110, 117, 116, 116, 105, 
	105, 108, 109, 101, 116, 101, 116, 97, 
	97, 105, 110, 97, 105, 115, 117, 117, 
	115, 58, 10, 10, 10, 32, 35, 37, 
	64, 79, 84, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 109, 10, 105, 10, 110, 10, 
	97, 10, 105, 10, 115, 10, 117, 10, 
	117, 10, 115, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 74, 75, 77, 78, 
	79, 84, 124, 9, 13, 97, 112, 117, 
	97, 117, 107, 115, 115, 101, 116, 58, 
	10, 10, 10, 32, 35, 79, 124, 9, 
	13, 10, 109, 10, 105, 10, 110, 10, 
	97, 10, 105, 10, 115, 10, 117, 10, 
	117, 10, 115, 10, 58, 58, 97, 10, 
	10, 10, 32, 35, 37, 42, 64, 74, 
	75, 77, 78, 79, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 97, 10, 
	117, 10, 110, 10, 117, 10, 116, 10, 
	116, 10, 105, 10, 105, 10, 108, 109, 
	10, 101, 10, 116, 10, 101, 10, 116, 
	10, 97, 10, 97, 10, 105, 10, 110, 
	10, 97, 10, 105, 10, 115, 10, 117, 
	10, 117, 10, 115, 10, 58, 10, 97, 
	10, 112, 117, 10, 97, 10, 117, 10, 
	115, 10, 58, 97, 10, 105, 10, 104, 
	10, 105, 10, 111, 10, 115, 10, 116, 
	10, 97, 105, 104, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 74, 
	75, 77, 78, 79, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 97, 10, 
	117, 10, 110, 10, 117, 10, 116, 10, 
	116, 10, 105, 10, 105, 10, 108, 109, 
	10, 101, 10, 116, 10, 101, 10, 116, 
	10, 97, 10, 97, 10, 105, 10, 110, 
	10, 97, 10, 105, 10, 115, 10, 117, 
	10, 117, 10, 115, 10, 58, 10, 97, 
	10, 112, 10, 97, 115, 116, 97, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 97, 
	10, 117, 10, 110, 10, 117, 10, 116, 
	10, 116, 10, 105, 10, 105, 10, 108, 
	109, 10, 101, 10, 116, 10, 101, 10, 
	116, 10, 97, 10, 97, 10, 105, 10, 
	110, 10, 97, 10, 105, 10, 115, 10, 
	117, 10, 117, 10, 115, 10, 58, 10, 
	97, 10, 112, 10, 97, 10, 117, 10, 
	115, 10, 58, 97, 10, 105, 10, 104, 
	10, 105, 10, 111, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 124, 9, 
	13, 10, 97, 10, 112, 117, 10, 97, 
	10, 117, 10, 107, 115, 10, 115, 10, 
	101, 10, 116, 10, 58, 97, 10, 105, 
	10, 104, 10, 105, 10, 111, 10, 115, 
	10, 116, 10, 97, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 14, 1, 2, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 4, 
	3, 2, 4, 14, 2, 3, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 41, 46, 
	51, 56, 61, 65, 69, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	114, 121, 126, 128, 130, 132, 134, 136, 
	138, 140, 142, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 167, 169, 
	171, 173, 175, 177, 179, 188, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	221, 224, 227, 230, 233, 236, 239, 242, 
	245, 248, 251, 254, 257, 260, 276, 278, 
	281, 283, 285, 288, 290, 292, 294, 296, 
	298, 300, 307, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 342, 344, 
	358, 361, 364, 367, 370, 373, 376, 379, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	431, 434, 437, 440, 443, 446, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 483, 486, 489, 492, 496, 499, 502, 
	505, 508, 511, 514, 517, 519, 521, 523, 
	525, 527, 529, 531, 545, 548, 551, 554, 
	557, 560, 563, 566, 569, 572, 575, 578, 
	581, 584, 587, 590, 593, 596, 599, 602, 
	605, 608, 611, 614, 618, 621, 624, 627, 
	630, 633, 636, 639, 642, 645, 648, 651, 
	654, 657, 660, 663, 666, 669, 672, 674, 
	676, 678, 680, 682, 684, 698, 701, 704, 
	707, 710, 713, 716, 719, 722, 725, 728, 
	731, 734, 737, 740, 743, 746, 749, 752, 
	755, 758, 761, 764, 767, 771, 774, 777, 
	780, 783, 786, 789, 792, 795, 798, 801, 
	804, 807, 810, 813, 816, 819, 822, 825, 
	828, 831, 835, 838, 841, 844, 847, 851, 
	857, 861, 864, 870, 886, 889, 893, 896, 
	899, 903, 906, 909, 912, 916, 919, 922, 
	925, 928, 931, 934, 937, 939, 941
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 18, 17, 17, 
	0, 21, 20, 22, 20, 19, 25, 24, 
	26, 24, 23, 25, 24, 27, 24, 23, 
	25, 24, 28, 24, 23, 30, 29, 29, 
	0, 2, 31, 31, 0, 33, 34, 32, 
	2, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	0, 50, 52, 53, 51, 0, 0, 0, 
	0, 54, 55, 56, 55, 55, 58, 57, 
	54, 2, 59, 7, 59, 0, 60, 0, 
	61, 0, 60, 0, 62, 0, 63, 0, 
	64, 0, 65, 0, 61, 0, 66, 67, 
	0, 68, 0, 69, 0, 70, 0, 71, 
	0, 72, 0, 61, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 83, 
	82, 85, 84, 85, 86, 87, 88, 87, 
	89, 90, 86, 84, 85, 91, 84, 85, 
	92, 84, 85, 93, 84, 85, 94, 84, 
	85, 95, 84, 85, 96, 84, 85, 97, 
	84, 85, 98, 84, 85, 99, 84, 85, 
	100, 84, 85, 101, 84, 85, 102, 84, 
	85, 103, 84, 85, 104, 84, 85, 105, 
	84, 85, 106, 84, 85, 107, 84, 85, 
	108, 84, 85, 109, 84, 85, 110, 84, 
	85, 111, 84, 85, 112, 84, 85, 113, 
	84, 85, 114, 84, 116, 115, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 115, 0, 129, 0, 130, 131, 
	0, 132, 0, 133, 0, 134, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	141, 140, 143, 142, 143, 144, 145, 146, 
	145, 144, 142, 143, 147, 142, 143, 148, 
	142, 143, 149, 142, 143, 150, 142, 143, 
	151, 142, 143, 152, 142, 143, 153, 142, 
	143, 154, 142, 143, 155, 142, 143, 156, 
	142, 157, 158, 0, 160, 159, 162, 161, 
	162, 163, 164, 165, 166, 164, 167, 168, 
	169, 170, 171, 172, 163, 161, 162, 173, 
	161, 162, 174, 161, 162, 175, 161, 162, 
	176, 161, 162, 177, 161, 162, 178, 161, 
	162, 179, 161, 162, 180, 161, 162, 181, 
	161, 162, 182, 161, 162, 183, 161, 162, 
	184, 161, 162, 185, 161, 162, 186, 161, 
	162, 187, 161, 162, 188, 161, 162, 189, 
	161, 162, 188, 161, 162, 190, 161, 162, 
	191, 161, 162, 192, 161, 162, 193, 161, 
	162, 189, 161, 162, 194, 195, 161, 162, 
	196, 161, 162, 197, 161, 162, 198, 161, 
	162, 199, 161, 162, 200, 161, 162, 189, 
	161, 162, 201, 161, 162, 202, 161, 162, 
	203, 161, 162, 204, 161, 162, 205, 161, 
	162, 206, 161, 162, 207, 161, 162, 208, 
	161, 162, 187, 161, 162, 209, 161, 162, 
	210, 211, 161, 162, 212, 161, 162, 213, 
	161, 162, 214, 161, 162, 187, 215, 161, 
	162, 216, 161, 162, 217, 161, 162, 218, 
	161, 162, 208, 161, 162, 219, 161, 162, 
	220, 161, 162, 208, 161, 221, 0, 222, 
	0, 223, 0, 224, 0, 225, 0, 227, 
	226, 229, 228, 229, 230, 231, 232, 233, 
	231, 234, 235, 236, 237, 238, 239, 230, 
	228, 229, 240, 228, 229, 241, 228, 229, 
	242, 228, 229, 243, 228, 229, 244, 228, 
	229, 245, 228, 229, 246, 228, 229, 247, 
	228, 229, 248, 228, 229, 249, 228, 229, 
	250, 228, 229, 251, 228, 229, 252, 228, 
	229, 253, 228, 229, 254, 228, 229, 255, 
	228, 229, 256, 228, 229, 255, 228, 229, 
	257, 228, 229, 258, 228, 229, 259, 228, 
	229, 260, 228, 229, 256, 228, 229, 261, 
	262, 228, 229, 263, 228, 229, 264, 228, 
	229, 265, 228, 229, 266, 228, 229, 267, 
	228, 229, 256, 228, 229, 268, 228, 229, 
	269, 228, 229, 270, 228, 229, 271, 228, 
	229, 272, 228, 229, 273, 228, 229, 274, 
	228, 229, 275, 228, 229, 254, 228, 229, 
	276, 228, 229, 277, 228, 229, 273, 228, 
	278, 0, 279, 0, 280, 0, 281, 0, 
	283, 282, 285, 284, 285, 286, 287, 288, 
	289, 287, 290, 291, 292, 293, 294, 295, 
	286, 284, 285, 296, 284, 285, 297, 284, 
	285, 298, 284, 285, 299, 284, 285, 300, 
	284, 285, 301, 284, 285, 302, 284, 285, 
	303, 284, 285, 304, 284, 285, 305, 284, 
	285, 306, 284, 285, 307, 284, 285, 308, 
	284, 285, 309, 284, 285, 310, 284, 285, 
	311, 284, 285, 312, 284, 285, 311, 284, 
	285, 313, 284, 285, 314, 284, 285, 315, 
	284, 285, 316, 284, 285, 312, 284, 285, 
	317, 318, 284, 285, 319, 284, 285, 320, 
	284, 285, 321, 284, 285, 322, 284, 285, 
	323, 284, 285, 312, 284, 285, 324, 284, 
	285, 325, 284, 285, 326, 284, 285, 327, 
	284, 285, 328, 284, 285, 329, 284, 285, 
	330, 284, 285, 331, 284, 285, 310, 284, 
	285, 332, 284, 285, 333, 284, 285, 334, 
	284, 285, 335, 284, 285, 336, 284, 285, 
	310, 337, 284, 285, 338, 284, 285, 339, 
	284, 285, 340, 284, 285, 331, 284, 341, 
	342, 341, 0, 345, 344, 346, 347, 344, 
	343, 0, 349, 350, 348, 0, 349, 348, 
	345, 351, 349, 350, 351, 348, 345, 352, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 363, 364, 352, 0, 85, 365, 
	84, 85, 366, 367, 84, 85, 368, 84, 
	85, 369, 84, 85, 370, 371, 84, 85, 
	372, 84, 85, 373, 84, 85, 113, 84, 
	85, 114, 374, 84, 85, 375, 84, 85, 
	376, 84, 85, 377, 84, 85, 113, 84, 
	85, 378, 84, 85, 379, 84, 85, 113, 
	84, 380, 0, 1, 0, 381, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 35, 37, 40, 42, 86, 270, 292, 
	4, 5, 6, 7, 7, 7, 8, 7, 
	7, 7, 8, 9, 10, 11, 2, 11, 
	12, 2, 13, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	294, 29, 30, 30, 2, 13, 32, 33, 
	2, 32, 31, 33, 28, 36, 38, 39, 
	34, 41, 43, 49, 44, 45, 46, 47, 
	48, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 59, 60, 60, 2, 
	61, 75, 276, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 74, 
	2, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 2, 2, 3, 12, 14, 
	28, 31, 34, 35, 37, 40, 42, 86, 
	270, 87, 88, 214, 89, 90, 91, 108, 
	92, 93, 94, 95, 96, 97, 96, 97, 
	97, 2, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 85, 109, 164, 110, 
	111, 110, 111, 111, 2, 112, 126, 127, 
	128, 130, 133, 135, 151, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 2, 85, 126, 129, 131, 132, 
	127, 134, 136, 142, 137, 138, 139, 140, 
	141, 143, 144, 145, 146, 147, 148, 149, 
	150, 152, 153, 161, 154, 155, 156, 157, 
	158, 159, 160, 162, 163, 165, 166, 167, 
	168, 169, 170, 171, 170, 171, 171, 2, 
	172, 186, 187, 188, 190, 193, 195, 211, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 184, 185, 2, 85, 186, 
	189, 191, 192, 187, 194, 196, 202, 197, 
	198, 199, 200, 201, 203, 204, 205, 206, 
	207, 208, 209, 210, 212, 213, 215, 216, 
	217, 218, 219, 220, 219, 220, 220, 2, 
	221, 235, 236, 237, 239, 242, 244, 260, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 2, 85, 235, 
	238, 240, 241, 236, 243, 245, 251, 246, 
	247, 248, 249, 250, 252, 253, 254, 255, 
	256, 257, 258, 259, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	274, 275, 273, 271, 272, 273, 271, 274, 
	275, 3, 12, 14, 28, 31, 34, 35, 
	37, 40, 42, 86, 270, 277, 278, 289, 
	279, 280, 281, 284, 282, 283, 285, 286, 
	287, 288, 290, 291, 293, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 31, 0, 
	0, 0, 47, 5, 41, 119, 41, 0, 
	29, 111, 29, 29, 0, 7, 95, 0, 
	0, 103, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 0, 99, 19, 0, 23, 
	107, 23, 44, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 62, 
	29, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 27, 115, 53, 50, 27, 
	56, 50, 56, 56, 56, 56, 56, 56, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 74, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 50, 
	124, 0, 47, 0, 68, 29, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 71, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 65, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 33, 
	33, 47, 33, 80, 0, 0, 35, 0, 
	0, 86, 83, 37, 89, 83, 89, 89, 
	89, 89, 89, 89, 92, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 294;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 585 "js/lib/gherkin/lexer/fi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */
  
/* line 592 "js/lib/gherkin/lexer/fi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 808 "js/lib/gherkin/lexer/fi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 847 "js/lib/gherkin/lexer/fi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fi.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

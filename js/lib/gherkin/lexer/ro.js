
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ro.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 23, 25, 
	43, 44, 45, 46, 50, 55, 60, 65, 
	70, 74, 78, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 100, 107, 112, 113, 114, 
	115, 116, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 145, 147, 
	149, 151, 169, 170, 174, 175, 176, 177, 
	178, 179, 180, 181, 184, 185, 186, 187, 
	188, 189, 190, 191, 192, 193, 200, 202, 
	204, 206, 210, 212, 214, 216, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 236, 
	237, 238, 239, 242, 243, 244, 245, 246, 
	247, 248, 249, 250, 251, 252, 253, 254, 
	255, 256, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 331, 333, 335, 337, 339, 341, 343, 
	345, 347, 349, 351, 353, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 383, 385, 387, 389, 391, 392, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 467, 469, 471, 473, 475, 477, 479, 
	481, 483, 485, 487, 492, 494, 496, 498, 
	500, 502, 504, 506, 510, 512, 514, 516, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 575, 577, 579, 581, 583, 584, 
	585, 586, 587, 588, 589, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 600, 601, 
	602, 603, 604, 619, 621, 623, 625, 627, 
	629, 631, 633, 635, 637, 639, 641, 643, 
	645, 647, 649, 651, 653, 655, 657, 659, 
	661, 663, 666, 668, 670, 672, 674, 679, 
	681, 683, 685, 687, 689, 691, 693, 697, 
	699, 701, 703, 707, 709, 711, 713, 715, 
	717, 719, 721, 723, 725, 727, 729, 731, 
	733, 736, 738, 740, 742, 744, 746, 748, 
	752, 758, 761, 763, 769, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 828, 830, 832, 834, 836, 841, 843, 
	845, 847, 849, 851, 853, 855, 859, 861, 
	863, 865, 869, 871, 873, 875, 877, 879, 
	881, 883, 885, 887, 889, 891, 893, 895, 
	899, 901, 903, 905, 907, 909, 911, 913, 
	915, 917, 919, 921, 923, 926, 928, 930, 
	932, 934, 935, 936
];

const _lexer_trans_keys = [
	-59, -56, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 83, 124, 
	239, 9, 13, -98, 105, 32, 10, 10, 
	13, -59, -56, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 83, 
	124, 9, 13, -104, 34, 34, 10, 32, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	116, 117, 110, 99, -61, 97, 111, -94, 
	110, 100, 110, 116, 101, 120, 116, 58, 
	10, 10, -59, -56, 10, 32, 35, 37, 
	42, 64, 65, 67, 68, 70, 83, 9, 
	13, -98, 10, 10, 105, 10, 32, -59, 
	-56, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 70, 83, 124, 9, 
	13, 97, -59, -56, 114, 116, -93, 105, 
	32, 102, 105, 105, -101, 32, 101, 105, 
	120, 101, 109, 112, 108, 101, 58, 10, 
	10, 10, 32, 35, 70, 124, 9, 13, 
	10, 117, 10, 110, 10, 99, -59, -56, 
	10, 116, -93, 10, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, 10, 97, 10, 116, 10, 101, 
	10, 58, -101, 10, 117, 110, 99, -59, 
	-56, 116, -93, 105, 111, 110, 97, 108, 
	105, 116, 97, 116, 101, 58, 10, 10, 
	10, 32, 35, 37, 64, 67, 69, 70, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	111, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 58, 10, 120, 10, 
	101, 10, 109, 10, 112, 10, 108, 10, 
	101, 10, 117, 10, 110, 10, 99, -59, 
	-56, 10, 116, -93, 10, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, -101, 
	10, 10, 99, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 114, 10, 117, 10, 99, 10, 116, 
	10, 117, 10, 114, -60, 10, 97, -125, 
	10, 10, 32, 10, 115, 10, 99, -101, 
	99, 105, 116, 101, 110, 97, 114, 105, 
	117, 58, 10, 10, -59, -56, 10, 32, 
	35, 37, 42, 64, 65, 67, 68, 70, 
	83, 9, 13, -98, 10, 10, 105, 10, 
	32, -104, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	116, 10, 117, 10, 110, 10, 99, -61, 
	10, 97, 111, -94, 10, 10, 110, 10, 
	100, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 58, 10, 97, -59, 
	-56, 10, 114, 116, -93, 10, 10, 105, 
	10, 32, 10, 102, 10, 105, 10, 105, 
	-101, 10, 10, 32, 101, 105, 10, 117, 
	10, 110, 10, 99, -59, -56, 10, 116, 
	-93, 10, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	10, 97, 10, 116, 10, 101, -101, 10, 
	10, 99, 105, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 114, 10, 117, 10, 99, 10, 116, 
	10, 117, 10, 114, -60, 10, 97, -125, 
	10, 10, 32, 10, 115, 10, 99, 114, 
	117, 99, 116, 117, 114, -60, 97, -125, 
	32, 115, 99, 101, 110, 97, 114, 105, 
	117, 58, 10, 10, -59, -56, 10, 32, 
	35, 37, 42, 64, 65, 67, 68, 70, 
	83, 9, 13, -98, 10, 10, 105, 10, 
	32, -104, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	116, 10, 117, 10, 110, 10, 99, -61, 
	10, 97, -94, 10, 10, 110, 10, 100, 
	10, 97, -59, -56, 10, 114, 116, -93, 
	10, 10, 105, 10, 32, 10, 102, 10, 
	105, 10, 105, -101, 10, 10, 32, 101, 
	105, 10, 117, 10, 110, 10, 99, -59, 
	-56, 10, 116, -93, 10, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 58, -101, 10, 10, 99, 105, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 117, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -59, -56, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 83, 
	124, 9, 13, -104, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 116, 10, 117, 10, 110, 10, 
	99, -61, 10, 97, -94, 10, 10, 110, 
	10, 100, 10, 97, -59, -56, 10, 114, 
	116, -93, 10, 10, 105, 10, 32, 10, 
	102, 10, 105, 10, 105, -101, 10, 10, 
	32, 101, 105, 10, 117, 10, 110, 10, 
	99, -59, -56, 10, 116, -93, 10, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, 10, 97, 10, 
	116, 10, 101, 10, 58, -101, 10, 10, 
	99, 105, 116, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	114, 10, 117, 10, 99, 10, 116, 10, 
	117, 10, 114, -60, 10, 97, -125, 10, 
	10, 32, 10, 115, 10, 99, 187, 191, 
	0
];

const _lexer_single_lengths = [
	0, 17, 1, 1, 1, 1, 2, 16, 
	1, 1, 1, 2, 3, 3, 3, 3, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 5, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 16, 1, 4, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 1, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 5, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 5, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	4, 3, 2, 4, 16, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 27, 30, 
	48, 50, 52, 54, 58, 63, 68, 73, 
	78, 82, 86, 89, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	115, 117, 119, 124, 131, 136, 138, 140, 
	142, 144, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 185, 188, 
	191, 194, 212, 214, 219, 221, 223, 225, 
	227, 229, 231, 233, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 262, 265, 
	268, 271, 276, 279, 282, 285, 288, 291, 
	294, 297, 300, 303, 306, 309, 312, 315, 
	317, 319, 321, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 364, 367, 370, 373, 376, 379, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	430, 433, 436, 439, 442, 445, 448, 451, 
	454, 459, 462, 465, 468, 471, 474, 477, 
	480, 483, 486, 489, 492, 496, 499, 502, 
	505, 508, 511, 514, 517, 520, 523, 526, 
	529, 532, 536, 539, 542, 545, 548, 550, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 587, 590, 593, 596, 599, 602, 
	605, 608, 611, 614, 617, 620, 623, 626, 
	629, 632, 635, 638, 641, 644, 647, 650, 
	653, 658, 661, 664, 667, 670, 673, 676, 
	679, 682, 685, 688, 694, 697, 700, 703, 
	706, 709, 712, 715, 720, 723, 726, 729, 
	734, 737, 740, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 775, 778, 781, 
	784, 787, 790, 793, 796, 799, 802, 805, 
	808, 811, 815, 818, 821, 824, 827, 829, 
	831, 833, 835, 837, 839, 842, 844, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 866, 868, 883, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 931, 934, 937, 940, 943, 
	946, 949, 953, 956, 959, 962, 965, 971, 
	974, 977, 980, 983, 986, 989, 992, 997, 
	1000, 1003, 1006, 1011, 1014, 1017, 1020, 1023, 
	1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 
	1050, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 
	1076, 1082, 1086, 1089, 1095, 1113, 1116, 1119, 
	1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 
	1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 
	1170, 1174, 1177, 1180, 1183, 1186, 1192, 1195, 
	1198, 1201, 1204, 1207, 1210, 1213, 1218, 1221, 
	1224, 1227, 1232, 1235, 1238, 1241, 1244, 1247, 
	1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 
	1276, 1279, 1282, 1285, 1288, 1291, 1294, 1297, 
	1300, 1303, 1306, 1309, 1312, 1316, 1319, 1322, 
	1325, 1328, 1330, 1332
];

const _lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 3, 0, 18, 0, 19, 0, 20, 
	0, 0, 21, 23, 24, 22, 1, 2, 
	4, 3, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 3, 0, 
	18, 0, 25, 0, 26, 0, 27, 26, 
	26, 0, 30, 29, 31, 29, 28, 34, 
	33, 35, 33, 32, 34, 33, 36, 33, 
	32, 34, 33, 37, 33, 32, 39, 38, 
	38, 0, 4, 40, 40, 0, 42, 43, 
	41, 4, 0, 44, 0, 45, 0, 46, 
	0, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 52, 0, 53, 0, 54, 
	0, 55, 0, 56, 0, 57, 0, 0, 
	0, 0, 0, 58, 59, 60, 59, 59, 
	62, 61, 58, 4, 63, 9, 63, 0, 
	64, 0, 65, 0, 66, 0, 18, 0, 
	67, 68, 69, 0, 68, 0, 70, 0, 
	19, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 78, 77, 
	80, 79, 81, 82, 80, 83, 84, 85, 
	86, 84, 87, 88, 89, 90, 91, 83, 
	79, 92, 80, 79, 80, 93, 79, 80, 
	94, 79, 95, 96, 98, 97, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 108, 
	109, 110, 97, 0, 111, 0, 112, 113, 
	19, 114, 0, 115, 0, 116, 0, 117, 
	0, 118, 0, 119, 0, 68, 0, 115, 
	0, 117, 116, 116, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 128, 127, 130, 129, 130, 
	131, 132, 133, 132, 131, 129, 130, 134, 
	129, 130, 135, 129, 130, 136, 129, 137, 
	138, 130, 139, 129, 139, 130, 129, 130, 
	140, 129, 130, 141, 129, 130, 142, 129, 
	130, 143, 129, 130, 144, 129, 130, 145, 
	129, 130, 146, 129, 130, 147, 129, 130, 
	148, 129, 130, 149, 129, 130, 150, 129, 
	139, 130, 129, 151, 0, 152, 0, 153, 
	0, 154, 155, 156, 0, 156, 0, 157, 
	0, 158, 0, 159, 0, 160, 0, 161, 
	0, 162, 0, 163, 0, 164, 0, 165, 
	0, 166, 0, 167, 0, 169, 168, 171, 
	170, 171, 172, 173, 174, 173, 175, 176, 
	177, 178, 172, 170, 171, 179, 170, 171, 
	180, 170, 171, 181, 170, 171, 182, 170, 
	171, 183, 170, 171, 184, 170, 171, 185, 
	170, 171, 186, 170, 171, 187, 170, 171, 
	188, 170, 171, 189, 170, 171, 190, 170, 
	171, 191, 170, 171, 192, 170, 171, 193, 
	170, 171, 194, 170, 171, 195, 170, 171, 
	196, 170, 171, 197, 170, 171, 198, 170, 
	171, 199, 170, 171, 200, 170, 171, 201, 
	170, 171, 202, 170, 171, 203, 170, 171, 
	204, 170, 171, 198, 170, 171, 205, 170, 
	171, 206, 170, 171, 207, 170, 208, 209, 
	171, 210, 170, 210, 171, 170, 171, 211, 
	170, 171, 212, 170, 171, 213, 170, 171, 
	214, 170, 171, 215, 170, 171, 216, 170, 
	171, 217, 170, 171, 218, 170, 171, 204, 
	170, 210, 171, 170, 171, 219, 220, 170, 
	171, 221, 170, 171, 222, 170, 171, 223, 
	170, 171, 224, 170, 171, 225, 170, 171, 
	198, 170, 171, 226, 170, 171, 227, 170, 
	171, 228, 170, 171, 229, 170, 171, 230, 
	170, 171, 231, 170, 232, 171, 233, 170, 
	233, 171, 170, 171, 234, 170, 171, 235, 
	170, 171, 219, 170, 156, 0, 236, 19, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	246, 245, 248, 247, 249, 250, 248, 251, 
	252, 253, 254, 252, 255, 256, 257, 258, 
	259, 251, 247, 260, 248, 247, 248, 261, 
	247, 248, 262, 247, 260, 248, 247, 248, 
	263, 247, 248, 264, 247, 248, 265, 247, 
	248, 266, 247, 248, 267, 247, 248, 268, 
	247, 248, 269, 247, 248, 270, 247, 248, 
	271, 247, 248, 272, 247, 248, 273, 247, 
	248, 274, 247, 248, 275, 247, 248, 276, 
	247, 248, 277, 247, 248, 278, 247, 248, 
	279, 247, 248, 260, 247, 280, 248, 281, 
	282, 247, 281, 248, 247, 248, 283, 247, 
	248, 261, 247, 248, 284, 247, 248, 285, 
	247, 248, 286, 247, 248, 287, 247, 248, 
	288, 247, 248, 262, 247, 248, 289, 247, 
	290, 291, 248, 261, 292, 247, 293, 248, 
	247, 248, 294, 247, 248, 295, 247, 248, 
	296, 247, 248, 297, 247, 248, 281, 247, 
	293, 248, 247, 248, 295, 294, 294, 247, 
	248, 298, 247, 248, 299, 247, 248, 300, 
	247, 301, 302, 248, 303, 247, 303, 248, 
	247, 248, 304, 247, 248, 305, 247, 248, 
	306, 247, 248, 307, 247, 248, 308, 247, 
	248, 309, 247, 248, 310, 247, 248, 311, 
	247, 248, 312, 247, 248, 288, 247, 303, 
	248, 247, 248, 313, 261, 314, 247, 248, 
	315, 247, 248, 316, 247, 248, 317, 247, 
	248, 318, 247, 248, 319, 247, 248, 288, 
	247, 248, 320, 247, 248, 321, 247, 248, 
	322, 247, 248, 323, 247, 248, 324, 247, 
	248, 325, 247, 326, 248, 327, 247, 327, 
	248, 247, 248, 328, 247, 248, 329, 247, 
	248, 313, 247, 330, 0, 331, 0, 332, 
	0, 333, 0, 334, 0, 335, 0, 336, 
	337, 0, 337, 0, 338, 0, 339, 0, 
	340, 0, 341, 0, 342, 0, 343, 0, 
	344, 0, 345, 0, 346, 0, 347, 0, 
	349, 348, 351, 350, 352, 353, 351, 354, 
	355, 356, 357, 355, 358, 359, 360, 361, 
	362, 354, 350, 363, 351, 350, 351, 364, 
	350, 351, 365, 350, 363, 351, 350, 351, 
	366, 350, 351, 367, 350, 351, 368, 350, 
	351, 369, 350, 351, 370, 350, 351, 371, 
	350, 351, 372, 350, 351, 373, 350, 351, 
	374, 350, 351, 375, 350, 351, 376, 350, 
	351, 377, 350, 351, 378, 350, 351, 379, 
	350, 351, 380, 350, 351, 381, 350, 351, 
	382, 350, 351, 363, 350, 383, 351, 384, 
	350, 384, 351, 350, 351, 385, 350, 351, 
	364, 350, 351, 386, 350, 387, 388, 351, 
	364, 389, 350, 390, 351, 350, 351, 391, 
	350, 351, 392, 350, 351, 393, 350, 351, 
	394, 350, 351, 384, 350, 390, 351, 350, 
	351, 392, 391, 391, 350, 351, 395, 350, 
	351, 396, 350, 351, 397, 350, 398, 399, 
	351, 400, 350, 400, 351, 350, 351, 401, 
	350, 351, 402, 350, 351, 403, 350, 351, 
	404, 350, 351, 405, 350, 351, 406, 350, 
	351, 407, 350, 351, 408, 350, 351, 409, 
	350, 351, 410, 350, 351, 365, 350, 400, 
	351, 350, 351, 411, 364, 350, 351, 412, 
	350, 351, 413, 350, 351, 414, 350, 351, 
	415, 350, 351, 416, 350, 351, 410, 350, 
	417, 418, 417, 0, 421, 420, 422, 423, 
	420, 419, 0, 425, 426, 424, 0, 425, 
	424, 421, 427, 425, 426, 427, 424, 428, 
	429, 421, 430, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 442, 430, 
	0, 92, 80, 79, 80, 443, 79, 80, 
	444, 79, 80, 445, 79, 80, 446, 79, 
	80, 447, 79, 80, 448, 79, 80, 449, 
	79, 80, 450, 79, 80, 451, 79, 80, 
	452, 79, 80, 453, 79, 80, 454, 79, 
	80, 455, 79, 80, 456, 79, 80, 457, 
	79, 80, 458, 79, 80, 459, 79, 80, 
	92, 79, 460, 80, 461, 79, 461, 80, 
	79, 80, 462, 79, 80, 93, 79, 80, 
	463, 79, 464, 465, 80, 93, 466, 79, 
	467, 80, 79, 80, 468, 79, 80, 469, 
	79, 80, 470, 79, 80, 471, 79, 80, 
	461, 79, 467, 80, 79, 80, 469, 468, 
	468, 79, 80, 472, 79, 80, 473, 79, 
	80, 474, 79, 475, 476, 80, 477, 79, 
	477, 80, 79, 80, 478, 79, 80, 479, 
	79, 80, 480, 79, 80, 481, 79, 80, 
	482, 79, 80, 483, 79, 80, 484, 79, 
	80, 485, 79, 80, 486, 79, 80, 487, 
	79, 80, 94, 79, 477, 80, 79, 80, 
	488, 93, 489, 79, 80, 490, 79, 80, 
	491, 79, 80, 492, 79, 80, 493, 79, 
	80, 494, 79, 80, 487, 79, 80, 495, 
	79, 80, 496, 79, 80, 497, 79, 80, 
	498, 79, 80, 499, 79, 80, 500, 79, 
	501, 80, 502, 79, 502, 80, 79, 80, 
	503, 79, 80, 504, 79, 80, 488, 79, 
	505, 0, 3, 0, 506, 0
];

const _lexer_trans_targs = [
	0, 2, 8, 7, 7, 9, 18, 20, 
	4, 34, 37, 41, 58, 68, 95, 175, 
	343, 417, 3, 4, 5, 6, 6, 7, 
	19, 10, 11, 12, 13, 13, 13, 14, 
	13, 13, 13, 14, 15, 16, 17, 7, 
	17, 18, 7, 19, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 419, 35, 36, 7, 35, 34, 36, 
	38, 39, 40, 42, 43, 45, 44, 46, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 54, 349, 53, 7, 350, 56, 364, 
	368, 372, 382, 399, 55, 56, 57, 2, 
	8, 7, 7, 9, 18, 20, 4, 34, 
	37, 41, 58, 68, 95, 175, 343, 59, 
	60, 66, 67, 61, 62, 63, 64, 65, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 76, 77, 77, 7, 78, 79, 80, 
	81, 82, 94, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 93, 57, 96, 
	97, 98, 99, 174, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 111, 
	112, 113, 112, 113, 113, 7, 114, 128, 
	135, 141, 156, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	7, 129, 130, 131, 132, 133, 134, 57, 
	136, 137, 138, 139, 140, 142, 143, 144, 
	145, 155, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 157, 163, 158, 159, 160, 
	161, 162, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 176, 262, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 184, 
	185, 186, 189, 185, 7, 190, 188, 204, 
	208, 218, 228, 244, 187, 188, 57, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 7, 205, 206, 207, 
	209, 210, 212, 211, 213, 214, 215, 216, 
	217, 219, 220, 226, 227, 221, 222, 223, 
	224, 225, 229, 230, 231, 232, 243, 233, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 245, 251, 246, 247, 248, 249, 250, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 261, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	277, 278, 279, 280, 281, 282, 281, 282, 
	283, 286, 282, 7, 287, 285, 301, 305, 
	309, 319, 336, 284, 285, 57, 288, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 300, 7, 302, 303, 304, 306, 
	307, 308, 310, 311, 317, 318, 312, 313, 
	314, 315, 316, 320, 321, 322, 323, 335, 
	324, 325, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 337, 338, 339, 340, 341, 
	342, 343, 344, 345, 347, 348, 346, 344, 
	345, 346, 344, 347, 2, 8, 348, 9, 
	18, 20, 4, 34, 37, 41, 58, 68, 
	95, 175, 343, 351, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	7, 365, 366, 367, 369, 370, 371, 373, 
	374, 380, 381, 375, 376, 377, 378, 379, 
	383, 384, 385, 386, 398, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	400, 406, 401, 402, 403, 404, 405, 407, 
	408, 409, 410, 411, 412, 413, 414, 415, 
	416, 418, 0
];

const _lexer_trans_actions = [
	39, 25, 25, 0, 47, 3, 1, 0, 
	25, 1, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 0, 50, 0, 99, 
	19, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 107, 23, 44, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 77, 0, 65, 29, 77, 77, 
	77, 77, 77, 77, 0, 0, 11, 56, 
	56, 27, 115, 53, 50, 27, 56, 50, 
	56, 56, 56, 56, 56, 56, 59, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 0, 74, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 77, 0, 68, 29, 77, 77, 
	77, 77, 77, 77, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 0, 71, 29, 77, 77, 77, 
	77, 77, 77, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 33, 33, 47, 33, 80, 
	0, 0, 35, 0, 89, 89, 0, 86, 
	83, 37, 89, 83, 89, 89, 89, 89, 
	89, 89, 92, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 419;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 780 "js/lib/gherkin/lexer/ro.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */
  
/* line 787 "js/lib/gherkin/lexer/ro.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1003 "js/lib/gherkin/lexer/ro.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1042 "js/lib/gherkin/lexer/ro.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/tr.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 74, 
	93, 94, 95, 99, 104, 109, 114, 119, 
	123, 127, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 148, 153, 160, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 210, 212, 214, 
	216, 218, 220, 222, 224, 226, 228, 230, 
	232, 234, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 282, 284, 286, 288, 290, 292, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 342, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 353, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	383, 385, 387, 389, 391, 393, 395, 397, 
	399, 401, 403, 405, 407, 409, 411, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 485, 487, 489, 491, 493, 
	494, 495, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 
	540, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	653, 655, 657, 658, 662, 668, 671, 673, 
	679, 698, 699, 700, 701, 702, 703, 704, 
	705, 706, 716, 718, 721, 723, 725, 727, 
	729, 731, 733, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 802, 804, 806, 808, 
	810, 812, 814, 816, 818, 820, 821, 822
];

const _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 79, 83, 86, 
	124, 239, 9, 13, -106, 114, 122, 110, 
	101, 107, 108, 101, 114, 58, 10, 10, 
	-61, 10, 32, 35, 124, 9, 13, -106, 
	10, 10, 122, 10, 101, 10, 108, 10, 
	108, 10, 105, 10, 107, 10, 58, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 124, 
	9, 13, -61, 10, 32, 34, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 79, 
	83, 86, 124, 9, 13, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 109, 97, 105, 
	121, 101, 108, 105, 109, 32, 107, 105, 
	-60, -97, 101, 114, 97, 107, 97, 116, 
	101, -61, -89, 109, 105, -59, -97, 58, 
	10, 10, -61, 10, 32, 35, 37, 42, 
	64, 65, 68, 69, 70, 79, 83, 86, 
	9, 13, -106, 10, 10, 122, 10, 101, 
	10, 108, 10, 108, 10, 105, 10, 107, 
	10, 58, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 109, 10, 97, 10, 105, 10, 121, 
	10, 101, 10, 108, 10, 105, 10, 109, 
	10, 32, 10, 107, 10, 105, -60, 10, 
	-97, 10, 10, 101, 10, 114, 10, 97, 
	10, 107, 10, 97, 10, 116, 10, 32, 
	10, 122, 10, 97, 10, 109, 10, 97, 
	10, 110, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 121, 10, 111, 10, 32, 
	58, 10, 116, 10, 97, 10, 115, 10, 
	108, 10, 97, -60, 10, -97, 10, -60, 
	10, -79, 10, 10, 101, 32, 122, 97, 
	109, 97, 110, 101, 110, 97, 114, 121, 
	111, 32, 58, 116, 97, 115, 108, 97, 
	-60, -97, -60, -79, 58, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	69, 70, 79, 83, 86, 9, 13, -106, 
	10, 10, 122, 10, 101, 10, 108, 10, 
	108, 10, 105, 10, 107, 10, 58, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 109, 10, 
	97, 10, 105, 10, 121, 10, 101, 10, 
	108, 10, 105, 10, 109, 10, 32, 10, 
	107, 10, 105, -60, 10, -97, 10, 10, 
	101, 10, 114, 10, 97, 10, 107, 10, 
	97, 10, 116, 10, 32, 10, 122, 10, 
	97, 10, 109, 10, 97, 10, 110, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	121, 10, 111, 10, 101, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	69, 70, 71, 79, 83, 86, 9, 13, 
	-106, 10, 10, 122, 10, 101, 10, 108, 
	10, 108, 10, 105, 10, 107, 10, 58, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 109, 
	10, 97, 10, 105, 10, 121, 10, 101, 
	10, 108, 10, 105, 10, 109, 10, 32, 
	10, 107, 10, 105, -60, 10, -97, 10, 
	10, 101, 10, 114, 10, 97, 10, 107, 
	10, 97, 10, 116, 10, 101, -61, 10, 
	-89, 10, 10, 109, 10, 105, -59, 10, 
	-97, 10, 10, 32, 10, 122, 10, 97, 
	10, 109, 10, 97, 10, 110, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 121, 
	10, 111, 10, 32, 58, 10, 116, 10, 
	97, 10, 115, 10, 108, 10, 97, -60, 
	10, -97, 10, -60, 10, -79, 10, 10, 
	101, 101, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 124, 
	9, 13, 101, 108, 108, 105, 107, 58, 
	10, 10, -61, 10, 32, 35, 37, 64, 
	71, 83, 9, 13, -106, 10, 10, 114, 
	122, 10, 110, 10, 101, 10, 107, 10, 
	108, 10, 101, 10, 114, 10, 58, 10, 
	101, 10, 108, 10, 108, 10, 105, 10, 
	107, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 101, -61, 
	10, -89, 10, 10, 109, 10, 105, -59, 
	10, -97, 10, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 121, 10, 111, 10, 
	32, 58, 10, 116, 10, 97, 10, 115, 
	10, 108, 10, 97, -60, 10, -97, 10, 
	-60, 10, -79, 10, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 17, 17, 
	1, 1, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 3, 5, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 15, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 4, 3, 2, 4, 
	17, 1, 1, 1, 1, 1, 1, 1, 
	1, 8, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 22, 25, 27, 29, 31, 
	33, 35, 37, 39, 41, 43, 50, 53, 
	56, 59, 62, 65, 68, 71, 74, 93, 
	112, 114, 116, 120, 125, 130, 135, 140, 
	144, 148, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 188, 193, 200, 205, 
	207, 209, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 279, 282, 285, 
	288, 291, 294, 297, 300, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 348, 351, 354, 357, 
	360, 363, 366, 369, 372, 375, 378, 381, 
	384, 387, 390, 393, 396, 399, 402, 405, 
	408, 411, 414, 417, 420, 423, 426, 429, 
	432, 435, 438, 441, 445, 448, 451, 454, 
	457, 460, 463, 466, 469, 472, 475, 477, 
	479, 481, 483, 485, 487, 489, 491, 493, 
	495, 497, 499, 502, 504, 506, 508, 510, 
	512, 514, 516, 518, 520, 522, 524, 526, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 635, 
	638, 641, 644, 647, 650, 653, 656, 659, 
	662, 665, 668, 671, 674, 677, 680, 683, 
	686, 689, 692, 695, 698, 701, 704, 707, 
	709, 711, 728, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 896, 899, 902, 905, 908, 911, 
	915, 918, 921, 924, 927, 930, 933, 936, 
	939, 942, 945, 947, 951, 957, 961, 964, 
	970, 989, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1015, 1018, 1022, 1025, 1028, 1031, 
	1034, 1037, 1040, 1043, 1046, 1049, 1052, 1055, 
	1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 
	1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 
	1130, 1133, 1136, 1139, 1143, 1146, 1149, 1152, 
	1155, 1158, 1161, 1164, 1167, 1170, 1172, 1174
];

const _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 2, 0, 19, 0, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 30, 
	29, 32, 31, 33, 32, 34, 35, 35, 
	34, 31, 36, 32, 31, 32, 37, 31, 
	32, 38, 31, 32, 39, 31, 32, 40, 
	31, 32, 41, 31, 32, 42, 31, 32, 
	43, 31, 44, 46, 45, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 45, 0, 1, 3, 2, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 2, 0, 
	61, 0, 62, 0, 63, 62, 62, 0, 
	66, 65, 67, 65, 64, 70, 69, 71, 
	69, 68, 70, 69, 72, 69, 68, 70, 
	69, 73, 69, 68, 75, 74, 74, 0, 
	3, 76, 76, 0, 78, 79, 77, 3, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 94, 0, 0, 
	95, 97, 98, 96, 0, 0, 0, 0, 
	99, 100, 101, 100, 100, 103, 102, 99, 
	3, 104, 8, 104, 0, 105, 0, 106, 
	0, 107, 0, 108, 0, 109, 0, 110, 
	0, 111, 0, 112, 0, 113, 0, 114, 
	0, 106, 0, 115, 0, 116, 0, 117, 
	0, 112, 0, 118, 0, 119, 0, 120, 
	0, 106, 0, 121, 0, 122, 0, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 130, 129, 132, 131, 133, 
	132, 134, 135, 136, 137, 135, 138, 139, 
	140, 141, 142, 143, 144, 134, 131, 145, 
	132, 131, 132, 146, 131, 132, 147, 131, 
	132, 148, 131, 132, 149, 131, 132, 150, 
	131, 132, 151, 131, 132, 152, 131, 132, 
	153, 131, 132, 154, 131, 132, 155, 131, 
	132, 156, 131, 132, 157, 131, 132, 158, 
	131, 132, 159, 131, 132, 160, 131, 132, 
	161, 131, 132, 162, 131, 132, 163, 131, 
	132, 164, 131, 132, 165, 131, 132, 166, 
	131, 132, 152, 131, 132, 167, 131, 132, 
	168, 131, 132, 169, 131, 132, 170, 131, 
	132, 171, 131, 132, 172, 131, 132, 173, 
	131, 132, 174, 131, 132, 175, 131, 132, 
	176, 131, 132, 168, 131, 177, 132, 131, 
	178, 132, 131, 132, 179, 131, 132, 174, 
	131, 132, 180, 131, 132, 181, 131, 132, 
	182, 131, 132, 168, 131, 132, 183, 131, 
	132, 184, 131, 132, 185, 131, 132, 186, 
	131, 132, 187, 131, 132, 168, 131, 132, 
	188, 131, 132, 189, 131, 132, 190, 131, 
	132, 191, 131, 132, 192, 131, 132, 193, 
	131, 132, 194, 152, 131, 132, 195, 131, 
	132, 196, 131, 132, 197, 131, 132, 198, 
	131, 132, 199, 131, 200, 132, 131, 201, 
	132, 131, 202, 132, 131, 151, 132, 131, 
	132, 168, 131, 203, 0, 204, 0, 205, 
	0, 206, 0, 207, 0, 106, 0, 208, 
	0, 209, 0, 210, 0, 211, 0, 212, 
	0, 213, 0, 214, 215, 0, 216, 0, 
	217, 0, 218, 0, 219, 0, 220, 0, 
	221, 0, 222, 0, 223, 0, 224, 0, 
	225, 0, 227, 226, 229, 228, 230, 229, 
	231, 232, 233, 234, 232, 235, 236, 237, 
	238, 239, 240, 241, 231, 228, 242, 229, 
	228, 229, 243, 228, 229, 244, 228, 229, 
	245, 228, 229, 246, 228, 229, 247, 228, 
	229, 248, 228, 229, 249, 228, 229, 250, 
	228, 229, 251, 228, 229, 252, 228, 229, 
	253, 228, 229, 254, 228, 229, 255, 228, 
	229, 256, 228, 229, 257, 228, 229, 258, 
	228, 229, 259, 228, 229, 260, 228, 229, 
	261, 228, 229, 262, 228, 229, 263, 228, 
	229, 249, 228, 229, 264, 228, 229, 265, 
	228, 229, 266, 228, 229, 267, 228, 229, 
	268, 228, 229, 269, 228, 229, 270, 228, 
	229, 271, 228, 229, 272, 228, 229, 273, 
	228, 229, 265, 228, 274, 229, 228, 275, 
	229, 228, 229, 276, 228, 229, 271, 228, 
	229, 277, 228, 229, 278, 228, 229, 279, 
	228, 229, 265, 228, 229, 280, 228, 229, 
	281, 228, 229, 282, 228, 229, 283, 228, 
	229, 284, 228, 229, 265, 228, 229, 285, 
	228, 229, 286, 228, 229, 287, 228, 229, 
	288, 228, 229, 289, 228, 229, 248, 228, 
	229, 265, 228, 291, 290, 293, 292, 294, 
	293, 295, 296, 297, 298, 296, 299, 300, 
	301, 302, 303, 304, 305, 306, 295, 292, 
	307, 293, 292, 293, 308, 292, 293, 309, 
	292, 293, 310, 292, 293, 311, 292, 293, 
	312, 292, 293, 313, 292, 293, 314, 292, 
	293, 315, 292, 293, 316, 292, 293, 317, 
	292, 293, 318, 292, 293, 319, 292, 293, 
	320, 292, 293, 321, 292, 293, 322, 292, 
	293, 323, 292, 293, 324, 292, 293, 325, 
	292, 293, 326, 292, 293, 327, 292, 293, 
	328, 292, 293, 314, 292, 293, 329, 292, 
	293, 330, 292, 293, 331, 292, 293, 332, 
	292, 293, 333, 292, 293, 334, 292, 293, 
	335, 292, 293, 336, 292, 293, 337, 292, 
	293, 338, 292, 293, 330, 292, 339, 293, 
	292, 340, 293, 292, 293, 341, 292, 293, 
	336, 292, 293, 342, 292, 293, 343, 292, 
	293, 344, 292, 293, 330, 292, 293, 345, 
	292, 346, 293, 292, 347, 293, 292, 293, 
	348, 292, 293, 349, 292, 350, 293, 292, 
	313, 293, 292, 293, 351, 292, 293, 352, 
	292, 293, 353, 292, 293, 354, 292, 293, 
	355, 292, 293, 330, 292, 293, 356, 292, 
	293, 357, 292, 293, 358, 292, 293, 359, 
	292, 293, 360, 292, 293, 361, 292, 293, 
	362, 314, 292, 293, 363, 292, 293, 364, 
	292, 293, 365, 292, 293, 366, 292, 293, 
	367, 292, 368, 293, 292, 369, 293, 292, 
	370, 293, 292, 313, 293, 292, 293, 330, 
	292, 106, 0, 371, 372, 371, 0, 375, 
	374, 376, 377, 374, 373, 0, 379, 380, 
	378, 0, 379, 378, 375, 381, 379, 380, 
	381, 378, 382, 375, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 383, 0, 398, 0, 399, 
	0, 400, 0, 401, 0, 402, 0, 403, 
	0, 405, 404, 407, 406, 408, 407, 409, 
	410, 411, 410, 412, 413, 409, 406, 414, 
	407, 406, 407, 415, 416, 406, 407, 417, 
	406, 407, 418, 406, 407, 419, 406, 407, 
	420, 406, 407, 421, 406, 407, 422, 406, 
	407, 423, 406, 407, 424, 406, 407, 425, 
	406, 407, 426, 406, 407, 427, 406, 407, 
	422, 406, 407, 428, 406, 407, 429, 406, 
	407, 430, 406, 407, 431, 406, 407, 432, 
	406, 407, 433, 406, 407, 434, 406, 407, 
	435, 406, 407, 436, 406, 407, 437, 406, 
	407, 438, 406, 407, 439, 406, 407, 440, 
	406, 407, 441, 406, 407, 442, 406, 443, 
	407, 406, 444, 407, 406, 407, 445, 406, 
	407, 446, 406, 447, 407, 406, 422, 407, 
	406, 407, 448, 406, 407, 449, 406, 407, 
	450, 406, 407, 451, 406, 407, 452, 406, 
	407, 453, 406, 407, 454, 423, 406, 407, 
	455, 406, 407, 456, 406, 407, 457, 406, 
	407, 458, 406, 407, 459, 406, 460, 407, 
	406, 461, 407, 406, 462, 407, 406, 422, 
	407, 406, 463, 0, 2, 0, 464, 0
];

const _lexer_trans_targs = [
	0, 2, 23, 23, 24, 33, 35, 49, 
	52, 55, 57, 66, 70, 74, 150, 156, 
	306, 307, 373, 3, 4, 313, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 12, 
	13, 14, 13, 23, 15, 16, 17, 18, 
	19, 20, 21, 22, 2, 23, 23, 24, 
	33, 35, 49, 52, 55, 57, 66, 70, 
	74, 150, 156, 306, 307, 25, 26, 27, 
	28, 28, 28, 29, 28, 28, 28, 29, 
	30, 31, 32, 23, 32, 33, 23, 34, 
	36, 37, 38, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 375, 50, 51, 
	51, 23, 34, 53, 54, 23, 53, 52, 
	54, 56, 49, 58, 59, 60, 61, 62, 
	63, 64, 65, 67, 68, 69, 71, 72, 
	73, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 83, 84, 85, 84, 23, 
	93, 107, 108, 110, 119, 123, 127, 133, 
	149, 86, 87, 88, 89, 90, 91, 92, 
	22, 94, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 23, 109, 
	107, 111, 112, 113, 114, 115, 116, 117, 
	118, 120, 121, 122, 124, 125, 126, 128, 
	129, 130, 131, 132, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 151, 152, 153, 154, 155, 
	157, 158, 159, 160, 161, 162, 163, 231, 
	164, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 174, 175, 176, 175, 
	23, 184, 198, 199, 201, 210, 214, 218, 
	224, 230, 177, 178, 179, 180, 181, 182, 
	183, 22, 185, 186, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 23, 
	200, 198, 202, 203, 204, 205, 206, 207, 
	208, 209, 211, 212, 213, 215, 216, 217, 
	219, 220, 221, 222, 223, 225, 226, 227, 
	228, 229, 232, 233, 232, 233, 234, 233, 
	23, 242, 256, 257, 259, 268, 272, 276, 
	283, 289, 305, 235, 236, 237, 238, 239, 
	240, 241, 22, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 252, 253, 254, 255, 
	23, 258, 256, 260, 261, 262, 263, 264, 
	265, 266, 267, 269, 270, 271, 273, 274, 
	275, 277, 278, 279, 280, 281, 282, 284, 
	285, 286, 287, 288, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 304, 307, 308, 309, 311, 312, 
	310, 308, 309, 310, 308, 311, 2, 312, 
	24, 33, 35, 49, 52, 55, 57, 66, 
	70, 74, 150, 156, 306, 307, 314, 315, 
	316, 317, 318, 319, 320, 321, 320, 321, 
	322, 321, 23, 336, 350, 357, 323, 324, 
	331, 325, 326, 327, 328, 329, 330, 22, 
	332, 333, 334, 335, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 347, 348, 
	349, 23, 351, 352, 353, 354, 355, 356, 
	358, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 374, 
	0
];

const _lexer_trans_actions = [
	39, 25, 0, 47, 3, 1, 0, 25, 
	1, 25, 25, 25, 25, 25, 25, 25, 
	25, 31, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 17, 56, 27, 115, 53, 
	50, 27, 56, 50, 56, 56, 56, 56, 
	56, 56, 56, 56, 59, 0, 0, 47, 
	5, 41, 119, 41, 0, 29, 111, 29, 
	29, 0, 7, 95, 0, 0, 103, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	0, 99, 19, 0, 23, 107, 23, 44, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 77, 0, 65, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 0, 
	71, 29, 77, 77, 77, 77, 77, 77, 
	77, 77, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 0, 
	68, 29, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 33, 47, 
	33, 80, 0, 0, 35, 0, 89, 0, 
	86, 83, 37, 89, 83, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 0, 62, 29, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 375;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 705 "js/lib/gherkin/lexer/tr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */
  
/* line 712 "js/lib/gherkin/lexer/tr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 928 "js/lib/gherkin/lexer/tr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 967 "js/lib/gherkin/lexer/tr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

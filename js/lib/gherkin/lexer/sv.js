
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sv.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 43, 48, 
	53, 58, 63, 67, 71, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 92, 
	97, 104, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 215, 217, 219, 221, 223, 225, 227, 
	229, 231, 233, 235, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 315, 318, 320, 322, 324, 
	326, 328, 330, 332, 335, 337, 339, 341, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 363, 365, 367, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 481, 483, 485, 486, 
	487, 488, 489, 490, 491, 492, 493, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	525, 526, 527, 529, 530, 531, 532, 533, 
	534, 535, 536, 538, 539, 540, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 666, 668, 670, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	690, 692, 694, 696, 697, 698, 699, 703, 
	709, 712, 714, 720, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 766, 768, 770, 772, 774, 776, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	794, 795
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 71, 77, 78, 
	79, 83, 124, 9, 13, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 98, 115, 116, 
	114, 97, 107, 116, 32, 83, 99, 101, 
	110, 97, 114, 105, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 69, 71, 
	77, 78, 79, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 69, 71, 77, 
	78, 79, 83, 124, 9, 13, 97, 107, 
	103, 114, 117, 110, 100, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 69, 
	71, 77, 78, 79, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 98, 10, 
	115, 10, 116, 10, 114, 10, 97, 10, 
	107, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 10, 
	103, 10, 101, 10, 110, 10, 115, 10, 
	107, 10, 97, 10, 112, 10, 105, 10, 
	118, 10, 101, 10, 116, 10, 101, 10, 
	110, -61, 10, -92, 10, 10, 114, 10, 
	99, 10, 104, -61, 10, 99, -91, 10, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 58, 109, 10, 
	97, 10, 108, 10, 108, 103, 120, 101, 
	110, 115, 107, 97, 112, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 66, 69, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	98, 10, 115, 10, 116, 10, 114, 10, 
	97, 10, 107, 10, 116, 10, 32, 10, 
	83, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 10, 97, 10, 107, 10, 103, 10, 
	114, 10, 117, 10, 110, 10, 100, 10, 
	103, 120, 10, 101, 10, 110, 10, 115, 
	10, 107, 10, 97, 10, 112, 10, 101, 
	10, 109, 10, 112, 10, 101, 10, 108, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	109, 10, 97, 10, 108, 101, 109, 112, 
	101, 108, 58, 10, 10, 10, 32, 35, 
	69, 124, 9, 13, 10, 103, 10, 101, 
	10, 110, 10, 115, 10, 107, 10, 97, 
	10, 112, 10, 58, 105, 118, 101, 116, 
	101, 110, -61, -92, 114, 99, 104, -61, 
	99, -91, 101, 110, 97, 114, 105, 111, 
	58, 109, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 66, 69, 71, 77, 78, 
	79, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 98, 10, 115, 10, 116, 
	10, 114, 10, 97, 10, 107, 10, 116, 
	10, 32, 10, 83, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 58, 10, 97, 10, 107, 
	10, 103, 10, 114, 10, 117, 10, 110, 
	10, 100, 10, 103, 10, 101, 10, 110, 
	10, 115, 10, 107, 10, 97, 10, 112, 
	10, 105, 10, 118, 10, 101, 10, 116, 
	10, 101, 10, 110, -61, 10, -92, 10, 
	10, 114, 10, 99, 10, 104, -61, 10, 
	99, -91, 10, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 109, 10, 97, 10, 108, 10, 108, 
	97, 108, 108, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	9, 13, 10, 103, 10, 101, 10, 110, 
	10, 115, 10, 107, 10, 97, 10, 112, 
	10, 58, 10, 105, 10, 118, 10, 101, 
	10, 116, 10, 101, 10, 110, -61, 10, 
	-92, 10, 10, 114, 10, 99, 10, 104, 
	-61, 10, 99, -91, 10, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 1, 1, 1, 2, 4, 
	3, 2, 4, 16, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 45, 50, 
	55, 60, 65, 69, 73, 76, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	118, 125, 130, 132, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 168, 182, 185, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 280, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 343, 346, 
	349, 352, 355, 358, 361, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 412, 415, 418, 
	421, 424, 427, 430, 434, 437, 440, 443, 
	446, 449, 452, 455, 459, 462, 465, 468, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 500, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 618, 621, 624, 627, 630, 633, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	663, 666, 669, 672, 676, 679, 682, 684, 
	686, 688, 690, 692, 694, 696, 698, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 754, 756, 758, 760, 762, 
	764, 766, 768, 771, 773, 775, 791, 794, 
	797, 800, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 830, 833, 836, 839, 842, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 875, 878, 881, 884, 887, 890, 
	893, 896, 899, 902, 905, 908, 911, 914, 
	917, 920, 923, 926, 929, 932, 935, 938, 
	941, 944, 947, 950, 953, 956, 959, 962, 
	966, 969, 972, 975, 978, 981, 984, 987, 
	991, 994, 997, 1000, 1002, 1004, 1006, 1010, 
	1016, 1020, 1023, 1029, 1047, 1050, 1053, 1056, 
	1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 
	1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1131, 1133
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 20, 19, 19, 0, 23, 22, 24, 
	22, 21, 27, 26, 28, 26, 25, 27, 
	26, 29, 26, 25, 27, 26, 30, 26, 
	25, 32, 31, 31, 0, 2, 33, 33, 
	0, 35, 36, 34, 2, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 0, 52, 54, 55, 
	53, 0, 0, 0, 0, 56, 57, 58, 
	57, 57, 60, 59, 56, 2, 61, 7, 
	61, 0, 62, 0, 63, 0, 64, 0, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 80, 79, 82, 81, 
	82, 83, 84, 85, 86, 84, 87, 88, 
	89, 90, 91, 92, 83, 81, 82, 93, 
	81, 82, 94, 81, 82, 95, 81, 82, 
	96, 81, 82, 97, 81, 82, 98, 81, 
	82, 99, 81, 82, 100, 81, 82, 101, 
	81, 82, 102, 81, 82, 103, 81, 82, 
	104, 81, 82, 105, 81, 82, 106, 81, 
	82, 107, 81, 109, 108, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 108, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 133, 132, 135, 
	134, 135, 136, 137, 138, 139, 137, 140, 
	141, 142, 143, 144, 145, 146, 136, 134, 
	135, 147, 134, 135, 148, 134, 135, 149, 
	134, 135, 150, 134, 135, 151, 134, 135, 
	152, 134, 135, 153, 134, 135, 154, 134, 
	135, 155, 134, 135, 156, 134, 135, 157, 
	134, 135, 158, 134, 135, 159, 134, 135, 
	160, 134, 135, 161, 134, 135, 162, 134, 
	135, 163, 134, 135, 164, 134, 135, 165, 
	134, 135, 166, 134, 135, 167, 134, 135, 
	168, 134, 135, 169, 134, 135, 170, 134, 
	135, 171, 134, 135, 172, 134, 135, 173, 
	134, 135, 174, 134, 135, 175, 134, 135, 
	176, 134, 135, 177, 134, 135, 161, 134, 
	135, 178, 134, 135, 179, 134, 135, 180, 
	134, 135, 181, 134, 135, 182, 134, 135, 
	183, 134, 135, 177, 134, 135, 184, 134, 
	135, 185, 134, 135, 186, 134, 135, 187, 
	134, 135, 188, 134, 135, 187, 134, 189, 
	135, 134, 190, 135, 134, 135, 187, 134, 
	135, 191, 134, 135, 187, 134, 192, 135, 
	193, 134, 187, 135, 134, 135, 194, 134, 
	135, 195, 134, 135, 196, 134, 135, 197, 
	134, 135, 198, 134, 135, 199, 134, 135, 
	161, 200, 134, 135, 201, 134, 135, 202, 
	134, 135, 177, 134, 203, 204, 0, 205, 
	0, 206, 0, 207, 0, 208, 0, 209, 
	0, 210, 0, 211, 0, 213, 212, 215, 
	214, 215, 216, 217, 218, 217, 219, 220, 
	221, 222, 216, 214, 215, 223, 214, 215, 
	224, 214, 215, 225, 214, 215, 226, 214, 
	215, 227, 214, 215, 228, 214, 215, 229, 
	214, 215, 230, 214, 215, 231, 214, 215, 
	232, 214, 215, 233, 214, 215, 234, 214, 
	215, 235, 214, 215, 236, 214, 215, 237, 
	214, 215, 238, 214, 215, 239, 214, 215, 
	240, 214, 215, 241, 214, 215, 242, 214, 
	215, 243, 214, 215, 244, 214, 215, 245, 
	214, 215, 246, 214, 215, 247, 214, 215, 
	248, 214, 215, 249, 214, 215, 250, 214, 
	215, 251, 214, 215, 252, 214, 215, 253, 
	214, 215, 254, 214, 215, 255, 214, 215, 
	256, 214, 215, 257, 214, 215, 258, 214, 
	215, 259, 214, 215, 252, 214, 215, 260, 
	261, 214, 215, 262, 214, 215, 263, 214, 
	215, 264, 214, 215, 265, 214, 215, 266, 
	214, 215, 252, 214, 215, 267, 214, 215, 
	268, 214, 215, 269, 214, 215, 270, 214, 
	215, 252, 214, 215, 271, 214, 215, 272, 
	214, 215, 273, 214, 215, 274, 214, 215, 
	275, 214, 215, 276, 214, 215, 277, 214, 
	215, 253, 278, 214, 215, 279, 214, 215, 
	270, 214, 280, 0, 281, 0, 282, 0, 
	283, 0, 284, 0, 285, 0, 287, 286, 
	289, 288, 289, 290, 291, 292, 291, 290, 
	288, 289, 293, 288, 289, 294, 288, 289, 
	295, 288, 289, 296, 288, 289, 297, 288, 
	289, 298, 288, 289, 299, 288, 289, 300, 
	288, 301, 0, 302, 0, 303, 0, 304, 
	0, 305, 0, 304, 0, 306, 0, 307, 
	0, 304, 0, 308, 0, 304, 0, 309, 
	310, 0, 304, 0, 311, 0, 312, 0, 
	313, 0, 314, 0, 315, 0, 316, 0, 
	317, 318, 0, 320, 319, 322, 321, 322, 
	323, 324, 325, 326, 324, 327, 328, 329, 
	330, 331, 332, 333, 334, 323, 321, 322, 
	335, 321, 322, 336, 321, 322, 337, 321, 
	322, 338, 321, 322, 339, 321, 322, 340, 
	321, 322, 341, 321, 322, 342, 321, 322, 
	343, 321, 322, 344, 321, 322, 345, 321, 
	322, 346, 321, 322, 347, 321, 322, 348, 
	321, 322, 349, 321, 322, 350, 321, 322, 
	351, 321, 322, 352, 321, 322, 353, 321, 
	322, 354, 321, 322, 355, 321, 322, 356, 
	321, 322, 357, 321, 322, 358, 321, 322, 
	359, 321, 322, 360, 321, 322, 361, 321, 
	322, 362, 321, 322, 363, 321, 322, 364, 
	321, 322, 365, 321, 322, 349, 321, 322, 
	366, 321, 322, 367, 321, 322, 368, 321, 
	322, 369, 321, 322, 370, 321, 322, 371, 
	321, 322, 365, 321, 322, 372, 321, 322, 
	373, 321, 322, 374, 321, 322, 375, 321, 
	322, 376, 321, 322, 377, 321, 322, 365, 
	321, 322, 378, 321, 322, 379, 321, 322, 
	380, 321, 322, 381, 321, 322, 382, 321, 
	322, 381, 321, 383, 322, 321, 384, 322, 
	321, 322, 381, 321, 322, 385, 321, 322, 
	381, 321, 386, 322, 387, 321, 381, 322, 
	321, 322, 388, 321, 322, 389, 321, 322, 
	390, 321, 322, 391, 321, 322, 392, 321, 
	322, 393, 321, 322, 349, 394, 321, 322, 
	395, 321, 322, 396, 321, 322, 365, 321, 
	397, 0, 398, 0, 77, 0, 399, 400, 
	399, 0, 403, 402, 404, 405, 402, 401, 
	0, 407, 408, 406, 0, 407, 406, 403, 
	409, 407, 408, 409, 406, 403, 410, 411, 
	412, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 422, 423, 424, 410, 0, 82, 
	425, 81, 82, 426, 81, 82, 427, 81, 
	82, 428, 81, 82, 429, 81, 82, 430, 
	81, 82, 431, 81, 82, 107, 81, 82, 
	432, 81, 82, 433, 81, 82, 434, 81, 
	82, 435, 81, 82, 436, 81, 82, 435, 
	81, 437, 82, 81, 438, 82, 81, 82, 
	435, 81, 82, 439, 81, 82, 435, 81, 
	440, 82, 441, 81, 435, 82, 81, 82, 
	442, 81, 82, 443, 81, 82, 444, 81, 
	82, 445, 81, 82, 446, 81, 82, 431, 
	81, 447, 0, 1, 0, 448, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 70, 143, 231, 235, 237, 240, 242, 
	326, 359, 4, 5, 6, 7, 7, 7, 
	8, 7, 7, 7, 8, 9, 10, 11, 
	2, 11, 12, 2, 13, 15, 16, 17, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 361, 29, 30, 30, 2, 13, 
	32, 33, 2, 32, 31, 33, 35, 36, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	53, 52, 53, 53, 2, 54, 68, 332, 
	340, 344, 346, 349, 351, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 2, 69, 2, 2, 3, 12, 
	14, 28, 31, 34, 70, 143, 231, 235, 
	237, 240, 242, 326, 71, 72, 73, 74, 
	75, 76, 77, 78, 79, 80, 79, 80, 
	80, 2, 81, 95, 96, 113, 120, 124, 
	126, 129, 131, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	2, 69, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 114, 115, 116, 117, 118, 119, 
	121, 122, 123, 95, 125, 127, 128, 130, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 144, 214, 145, 146, 147, 
	148, 149, 150, 151, 152, 153, 152, 153, 
	153, 2, 154, 168, 185, 192, 204, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 166, 167, 2, 169, 170, 171, 
	172, 173, 174, 175, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 69, 186, 187, 
	188, 189, 190, 191, 193, 199, 194, 195, 
	196, 197, 198, 200, 201, 202, 203, 205, 
	206, 207, 208, 209, 210, 211, 212, 213, 
	215, 216, 217, 218, 219, 220, 221, 222, 
	221, 222, 222, 2, 223, 224, 225, 226, 
	227, 228, 229, 230, 69, 232, 233, 234, 
	28, 236, 238, 239, 241, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 323, 252, 
	253, 252, 253, 253, 2, 254, 268, 269, 
	286, 293, 300, 304, 306, 309, 311, 255, 
	256, 257, 258, 259, 260, 261, 262, 263, 
	264, 265, 266, 267, 2, 69, 270, 271, 
	272, 273, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 287, 288, 
	289, 290, 291, 292, 294, 295, 296, 297, 
	298, 299, 301, 302, 303, 268, 305, 307, 
	308, 310, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 324, 325, 326, 
	327, 328, 330, 331, 329, 327, 328, 329, 
	327, 330, 331, 3, 12, 14, 28, 31, 
	34, 70, 143, 231, 235, 237, 240, 242, 
	326, 333, 334, 335, 336, 337, 338, 339, 
	341, 342, 343, 68, 345, 347, 348, 350, 
	352, 353, 354, 355, 356, 357, 358, 360, 
	0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 23, 107, 23, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 0, 71, 29, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 27, 115, 53, 50, 
	27, 56, 50, 56, 56, 56, 56, 56, 
	56, 56, 56, 59, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 65, 29, 77, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 62, 29, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 74, 77, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 0, 68, 29, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 33, 33, 47, 33, 80, 0, 0, 
	35, 0, 0, 86, 83, 37, 89, 83, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39
];

const lexer_start = 1;
const lexer_first_final = 361;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 688 "js/lib/gherkin/lexer/sv.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */
  
/* line 695 "js/lib/gherkin/lexer/sv.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 911 "js/lib/gherkin/lexer/sv.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 950 "js/lib/gherkin/lexer/sv.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sv.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

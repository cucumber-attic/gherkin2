
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */



/* line 11 "js/lib/gherkin/lexer/de.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 43, 48, 
	53, 58, 63, 67, 71, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 92, 
	97, 104, 109, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 139, 141, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 163, 165, 167, 
	169, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	319, 322, 324, 326, 328, 330, 332, 334, 
	336, 338, 340, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 353, 
	354, 355, 356, 357, 358, 359, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 398, 400, 402, 404, 407, 409, 
	411, 413, 415, 417, 419, 421, 423, 425, 
	427, 429, 431, 433, 435, 437, 439, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	475, 477, 479, 481, 483, 485, 487, 489, 
	491, 493, 495, 498, 500, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 521, 
	522, 523, 524, 525, 526, 527, 529, 530, 
	531, 546, 548, 550, 552, 554, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 579, 581, 583, 585, 587, 589, 591, 
	593, 595, 597, 599, 601, 603, 605, 607, 
	609, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 631, 633, 636, 638, 640, 
	642, 644, 646, 648, 650, 652, 654, 656, 
	658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 708, 709, 710, 711, 712, 713, 714, 
	715, 716, 717, 718, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 766, 768, 770, 772, 
	774, 776, 778, 780, 782, 784, 786, 788, 
	790, 792, 794, 796, 798, 800, 802, 804, 
	806, 808, 810, 812, 814, 816, 818, 820, 
	822, 824, 826, 828, 830, 832, 834, 836, 
	838, 840, 842, 844, 846, 848, 850, 852, 
	854, 856, 858, 860, 861, 862, 863, 867, 
	873, 876, 878, 884, 902, 903, 904
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 83, 85, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 70, 71, 83, 
	85, 87, 124, 9, 13, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 98, 110, 101, 
	114, 103, 101, 110, 111, 109, 109, 101, 
	110, 101, 105, 115, 112, 105, 101, 108, 
	101, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 117, 10, 110, 10, 
	107, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	116, -61, 10, -92, 10, 10, 116, 10, 
	58, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 70, 71, 83, 85, 87, 
	124, 9, 13, 97, 110, 117, 110, 107, 
	116, 105, 111, 110, 97, 108, 105, 116, 
	-61, -92, 116, 58, 10, 10, 10, 32, 
	35, 37, 64, 66, 70, 71, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 101, 10, 
	105, 10, 115, 10, 112, 10, 105, 10, 
	101, 10, 108, 10, 101, 10, 58, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -92, 
	10, 10, 116, 10, 114, 10, 117, 10, 
	110, 10, 100, 10, 108, 10, 97, 10, 
	103, 10, 122, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 103, 10, 114, 10, 117, 10, 110, 
	10, 100, 10, 114, 10, 105, 10, 115, 
	10, 115, 101, 114, 103, 101, 98, 101, 
	110, 32, 115, 101, 105, 117, 110, 100, 
	108, 97, 103, 101, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 68, 70, 
	71, 83, 85, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 98, 110, 10, 
	101, 10, 114, 10, 103, 10, 101, 10, 
	110, 10, 111, 10, 109, 10, 109, 10, 
	101, 10, 110, 10, 97, 10, 110, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -92, 
	10, 10, 116, 10, 58, 10, 101, 10, 
	103, 10, 101, 10, 98, 10, 101, 10, 
	110, 10, 32, 10, 115, 10, 101, 10, 
	105, 10, 122, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 103, 10, 114, 10, 117, 10, 110, 
	10, 100, 10, 114, 10, 105, 10, 115, 
	10, 115, 10, 110, 10, 100, 10, 101, 
	122, 101, 110, 97, 114, 105, 111, 58, 
	103, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 68, 70, 71, 83, 85, 87, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 98, 110, 10, 101, 10, 114, 10, 
	103, 10, 101, 10, 110, 10, 111, 10, 
	109, 10, 109, 10, 101, 10, 110, 10, 
	97, 10, 110, 10, 117, 10, 110, 10, 
	107, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	116, -61, 10, -92, 10, 10, 116, 10, 
	58, 10, 101, 114, 10, 103, 10, 101, 
	10, 98, 10, 101, 10, 110, 10, 32, 
	10, 115, 10, 101, 10, 105, 10, 117, 
	10, 110, 10, 100, 10, 108, 10, 97, 
	10, 103, 10, 101, 10, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 58, 103, 10, 114, 10, 
	117, 10, 110, 10, 100, 10, 114, 10, 
	105, 10, 115, 10, 115, 10, 110, 10, 
	100, 10, 101, 114, 117, 110, 100, 114, 
	105, 115, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 68, 70, 71, 
	83, 85, 87, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 98, 110, 10, 101, 
	10, 114, 10, 103, 10, 101, 10, 110, 
	10, 111, 10, 109, 10, 109, 10, 101, 
	10, 110, 10, 97, 10, 110, 10, 117, 
	10, 110, 10, 107, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -61, 10, -92, 10, 
	10, 116, 10, 58, 10, 101, 10, 103, 
	10, 101, 10, 98, 10, 101, 10, 110, 
	10, 32, 10, 115, 10, 101, 10, 105, 
	10, 122, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 110, 
	10, 100, 10, 101, 110, 100, 101, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 70, 71, 
	83, 85, 87, 124, 9, 13, 187, 191, 
	0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	16, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 2, 4, 
	3, 2, 4, 16, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 45, 50, 
	55, 60, 65, 69, 73, 76, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	118, 125, 130, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 173, 
	175, 182, 185, 188, 191, 194, 197, 200, 
	203, 206, 209, 212, 215, 218, 221, 224, 
	227, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 294, 297, 300, 
	303, 306, 309, 312, 315, 318, 321, 324, 
	327, 330, 333, 336, 339, 342, 345, 348, 
	351, 354, 357, 360, 363, 366, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 480, 482, 484, 486, 488, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 514, 516, 531, 534, 
	537, 540, 543, 546, 549, 552, 555, 558, 
	561, 564, 567, 570, 573, 576, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 679, 
	682, 685, 688, 691, 694, 697, 700, 703, 
	706, 709, 712, 716, 719, 722, 725, 728, 
	731, 734, 737, 740, 743, 746, 749, 751, 
	753, 755, 757, 759, 761, 763, 766, 768, 
	770, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 834, 837, 840, 843, 846, 849, 852, 
	855, 858, 861, 864, 867, 870, 873, 876, 
	879, 882, 885, 888, 891, 894, 897, 900, 
	903, 906, 909, 912, 915, 919, 922, 925, 
	928, 931, 934, 937, 940, 943, 946, 949, 
	952, 955, 958, 961, 964, 967, 970, 973, 
	976, 979, 982, 985, 988, 992, 995, 998, 
	1001, 1004, 1007, 1010, 1013, 1016, 1019, 1022, 
	1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 
	1041, 1043, 1045, 1047, 1062, 1065, 1068, 1071, 
	1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 
	1098, 1101, 1104, 1107, 1111, 1114, 1117, 1120, 
	1123, 1126, 1129, 1132, 1135, 1138, 1141, 1144, 
	1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 
	1171, 1174, 1177, 1180, 1183, 1186, 1189, 1192, 
	1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1254, 1256, 1258, 1262, 
	1268, 1272, 1275, 1281, 1299, 1301, 1303
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 20, 19, 19, 0, 23, 22, 24, 
	22, 21, 27, 26, 28, 26, 25, 27, 
	26, 29, 26, 25, 27, 26, 30, 26, 
	25, 32, 31, 31, 0, 2, 33, 33, 
	0, 35, 36, 34, 2, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 0, 52, 54, 55, 
	53, 0, 0, 0, 0, 56, 57, 58, 
	57, 57, 60, 59, 56, 2, 61, 7, 
	61, 0, 62, 63, 0, 64, 0, 65, 
	0, 66, 0, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 65, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 79, 0, 80, 
	0, 81, 0, 83, 82, 85, 84, 85, 
	86, 87, 88, 87, 86, 84, 85, 89, 
	84, 85, 90, 84, 85, 91, 84, 85, 
	92, 84, 85, 93, 84, 85, 94, 84, 
	85, 95, 84, 85, 96, 84, 85, 97, 
	84, 85, 98, 84, 85, 99, 84, 100, 
	85, 84, 101, 85, 84, 85, 102, 84, 
	85, 103, 84, 105, 104, 106, 107, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 104, 0, 120, 0, 72, 
	0, 121, 0, 122, 0, 123, 0, 124, 
	0, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	0, 133, 0, 134, 0, 135, 0, 137, 
	136, 139, 138, 139, 140, 141, 142, 141, 
	143, 144, 145, 146, 140, 138, 139, 147, 
	138, 139, 148, 138, 139, 149, 138, 139, 
	150, 138, 139, 151, 138, 139, 152, 138, 
	139, 153, 138, 139, 154, 138, 139, 155, 
	138, 139, 156, 138, 139, 157, 138, 139, 
	158, 138, 139, 159, 138, 139, 160, 138, 
	139, 161, 138, 139, 162, 138, 139, 163, 
	138, 139, 164, 138, 139, 165, 138, 139, 
	166, 138, 139, 167, 138, 139, 168, 138, 
	139, 169, 138, 139, 170, 138, 139, 171, 
	138, 139, 172, 138, 139, 173, 138, 139, 
	174, 138, 139, 175, 138, 139, 176, 138, 
	139, 177, 138, 139, 178, 138, 139, 179, 
	138, 139, 180, 138, 181, 139, 138, 182, 
	139, 138, 139, 168, 138, 139, 183, 138, 
	139, 184, 138, 139, 185, 138, 139, 186, 
	138, 139, 187, 138, 139, 188, 138, 139, 
	167, 138, 139, 189, 138, 139, 190, 138, 
	139, 191, 138, 139, 192, 138, 139, 193, 
	138, 139, 194, 138, 139, 195, 138, 139, 
	169, 196, 138, 139, 197, 138, 139, 198, 
	138, 139, 199, 138, 139, 200, 138, 139, 
	201, 138, 139, 202, 138, 139, 203, 138, 
	139, 168, 138, 204, 205, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 65, 0, 
	214, 0, 215, 0, 216, 0, 217, 0, 
	218, 0, 219, 0, 220, 0, 221, 0, 
	223, 222, 225, 224, 225, 226, 227, 228, 
	229, 227, 230, 231, 232, 233, 234, 235, 
	236, 226, 224, 225, 237, 224, 225, 238, 
	224, 225, 239, 224, 225, 240, 224, 225, 
	241, 224, 225, 242, 224, 225, 243, 224, 
	225, 244, 224, 225, 245, 224, 225, 246, 
	224, 225, 247, 224, 225, 248, 224, 225, 
	249, 224, 225, 250, 224, 225, 251, 224, 
	225, 252, 253, 224, 225, 254, 224, 225, 
	255, 224, 225, 256, 224, 225, 257, 224, 
	225, 258, 224, 225, 259, 224, 225, 260, 
	224, 225, 261, 224, 225, 262, 224, 225, 
	255, 224, 225, 263, 224, 225, 262, 224, 
	225, 264, 224, 225, 265, 224, 225, 266, 
	224, 225, 267, 224, 225, 268, 224, 225, 
	269, 224, 225, 270, 224, 225, 271, 224, 
	225, 272, 224, 225, 273, 224, 225, 274, 
	224, 275, 225, 224, 276, 225, 224, 225, 
	277, 224, 225, 251, 224, 225, 278, 224, 
	225, 279, 224, 225, 280, 224, 225, 281, 
	224, 225, 282, 224, 225, 283, 224, 225, 
	284, 224, 225, 285, 224, 225, 286, 224, 
	225, 255, 224, 225, 287, 224, 225, 288, 
	224, 225, 289, 224, 225, 290, 224, 225, 
	291, 224, 225, 292, 224, 225, 293, 224, 
	225, 251, 294, 224, 225, 295, 224, 225, 
	296, 224, 225, 297, 224, 225, 298, 224, 
	225, 299, 224, 225, 300, 224, 225, 301, 
	224, 225, 277, 224, 225, 302, 224, 225, 
	255, 224, 225, 263, 224, 303, 0, 304, 
	0, 305, 0, 306, 0, 307, 0, 308, 
	0, 309, 0, 310, 311, 0, 313, 312, 
	315, 314, 315, 316, 317, 318, 319, 317, 
	320, 321, 322, 323, 324, 325, 326, 316, 
	314, 315, 327, 314, 315, 328, 314, 315, 
	329, 314, 315, 330, 314, 315, 331, 314, 
	315, 332, 314, 315, 333, 314, 315, 334, 
	314, 315, 335, 314, 315, 336, 314, 315, 
	337, 314, 315, 338, 314, 315, 339, 314, 
	315, 340, 314, 315, 341, 314, 315, 342, 
	343, 314, 315, 344, 314, 315, 345, 314, 
	315, 346, 314, 315, 347, 314, 315, 348, 
	314, 315, 349, 314, 315, 350, 314, 315, 
	351, 314, 315, 352, 314, 315, 345, 314, 
	315, 353, 314, 315, 352, 314, 315, 354, 
	314, 315, 355, 314, 315, 356, 314, 315, 
	357, 314, 315, 358, 314, 315, 359, 314, 
	315, 360, 314, 315, 361, 314, 315, 362, 
	314, 315, 363, 314, 315, 364, 314, 365, 
	315, 314, 366, 315, 314, 315, 367, 314, 
	315, 341, 314, 315, 368, 369, 314, 315, 
	370, 314, 315, 371, 314, 315, 372, 314, 
	315, 373, 314, 315, 374, 314, 315, 375, 
	314, 315, 376, 314, 315, 377, 314, 315, 
	345, 314, 315, 378, 314, 315, 379, 314, 
	315, 380, 314, 315, 381, 314, 315, 382, 
	314, 315, 383, 314, 315, 367, 314, 315, 
	384, 314, 315, 385, 314, 315, 386, 314, 
	315, 387, 314, 315, 388, 314, 315, 389, 
	314, 315, 390, 314, 315, 341, 391, 314, 
	315, 392, 314, 315, 393, 314, 315, 394, 
	314, 315, 395, 314, 315, 396, 314, 315, 
	397, 314, 315, 398, 314, 315, 367, 314, 
	315, 399, 314, 315, 345, 314, 315, 353, 
	314, 400, 0, 401, 0, 402, 0, 403, 
	0, 404, 0, 405, 0, 406, 0, 407, 
	0, 408, 0, 410, 409, 412, 411, 412, 
	413, 414, 415, 416, 414, 417, 418, 419, 
	420, 421, 422, 423, 413, 411, 412, 424, 
	411, 412, 425, 411, 412, 426, 411, 412, 
	427, 411, 412, 428, 411, 412, 429, 411, 
	412, 430, 411, 412, 431, 411, 412, 432, 
	411, 412, 433, 411, 412, 434, 411, 412, 
	435, 411, 412, 436, 411, 412, 437, 411, 
	412, 438, 411, 412, 439, 440, 411, 412, 
	441, 411, 412, 442, 411, 412, 443, 411, 
	412, 444, 411, 412, 445, 411, 412, 446, 
	411, 412, 447, 411, 412, 448, 411, 412, 
	449, 411, 412, 442, 411, 412, 450, 411, 
	412, 449, 411, 412, 451, 411, 412, 452, 
	411, 412, 453, 411, 412, 454, 411, 412, 
	455, 411, 412, 456, 411, 412, 457, 411, 
	412, 458, 411, 412, 459, 411, 412, 460, 
	411, 412, 461, 411, 462, 412, 411, 463, 
	412, 411, 412, 464, 411, 412, 438, 411, 
	412, 465, 411, 412, 466, 411, 412, 467, 
	411, 412, 468, 411, 412, 469, 411, 412, 
	470, 411, 412, 471, 411, 412, 472, 411, 
	412, 473, 411, 412, 442, 411, 412, 474, 
	411, 412, 475, 411, 412, 476, 411, 412, 
	477, 411, 412, 478, 411, 412, 479, 411, 
	412, 464, 411, 412, 480, 411, 412, 442, 
	411, 412, 450, 411, 481, 0, 65, 0, 
	120, 0, 482, 483, 482, 0, 486, 485, 
	487, 488, 485, 484, 0, 490, 491, 489, 
	0, 490, 489, 486, 492, 490, 491, 492, 
	489, 486, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	507, 493, 0, 508, 0, 1, 0, 509, 
	0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 45, 73, 75, 153, 246, 411, 413, 
	414, 420, 4, 5, 6, 7, 7, 7, 
	8, 7, 7, 7, 8, 9, 10, 11, 
	2, 11, 12, 2, 13, 15, 16, 17, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 422, 29, 30, 30, 2, 13, 
	32, 33, 2, 32, 31, 33, 35, 37, 
	36, 28, 38, 39, 40, 41, 42, 43, 
	44, 46, 47, 48, 49, 50, 51, 52, 
	53, 54, 55, 56, 55, 56, 56, 2, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	2, 2, 3, 12, 14, 28, 31, 34, 
	45, 73, 75, 153, 246, 411, 413, 414, 
	74, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 91, 92, 92, 2, 93, 107, 
	116, 130, 137, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	2, 108, 109, 110, 111, 112, 113, 114, 
	115, 72, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 131, 
	132, 133, 134, 135, 136, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 154, 163, 155, 156, 
	157, 158, 159, 160, 161, 162, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	172, 173, 173, 2, 174, 188, 189, 200, 
	202, 217, 227, 243, 245, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 2, 72, 190, 192, 191, 188, 
	193, 194, 195, 196, 197, 198, 199, 201, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 228, 
	229, 230, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 244, 247, 
	248, 249, 250, 251, 252, 253, 254, 336, 
	255, 256, 255, 256, 256, 2, 257, 271, 
	272, 283, 285, 300, 317, 333, 335, 258, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 2, 72, 273, 275, 
	274, 271, 276, 277, 278, 279, 280, 281, 
	282, 284, 286, 287, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 299, 
	301, 310, 302, 303, 304, 305, 306, 307, 
	308, 309, 311, 312, 313, 314, 315, 316, 
	318, 319, 320, 321, 322, 323, 324, 325, 
	326, 327, 328, 329, 330, 331, 332, 334, 
	337, 338, 339, 340, 341, 342, 343, 344, 
	345, 346, 347, 346, 347, 347, 2, 348, 
	362, 363, 374, 376, 391, 401, 408, 410, 
	349, 350, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 2, 72, 364, 
	366, 365, 362, 367, 368, 369, 370, 371, 
	372, 373, 375, 377, 378, 379, 380, 381, 
	382, 383, 384, 385, 386, 387, 388, 389, 
	390, 392, 393, 394, 395, 396, 397, 398, 
	399, 400, 402, 403, 404, 405, 406, 407, 
	409, 412, 414, 415, 416, 418, 419, 417, 
	415, 416, 417, 415, 418, 419, 3, 12, 
	14, 28, 31, 34, 45, 73, 75, 153, 
	246, 411, 413, 414, 421, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 23, 107, 23, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 74, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	27, 115, 53, 50, 27, 56, 50, 56, 
	56, 56, 56, 56, 56, 56, 56, 59, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 65, 29, 77, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 11, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 68, 29, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 71, 29, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 33, 33, 47, 33, 
	80, 0, 0, 35, 0, 0, 86, 83, 
	37, 89, 83, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 422;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 773 "js/lib/gherkin/lexer/de.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */
  
/* line 780 "js/lib/gherkin/lexer/de.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 996 "js/lib/gherkin/lexer/de.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1035 "js/lib/gherkin/lexer/de.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/de.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

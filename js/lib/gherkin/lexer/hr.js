
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hr.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 43, 48, 
	53, 58, 63, 67, 71, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 92, 
	97, 104, 109, 110, 111, 113, 114, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 167, 169, 
	187, 188, 189, 190, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 307, 309, 311, 313, 315, 
	317, 319, 322, 324, 326, 328, 329, 330, 
	331, 332, 333, 334, 335, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 361, 
	363, 365, 367, 369, 371, 373, 375, 377, 
	379, 381, 383, 385, 387, 389, 391, 393, 
	395, 398, 400, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 424, 426, 428, 
	430, 432, 435, 437, 439, 441, 443, 445, 
	447, 449, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 497, 499, 501, 503, 506, 508, 510, 
	512, 514, 516, 518, 520, 522, 524, 526, 
	528, 530, 532, 533, 534, 535, 536, 537, 
	538, 540, 541, 542, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 576, 578, 580, 
	582, 584, 586, 588, 590, 592, 595, 597, 
	600, 602, 604, 606, 608, 610, 612, 614, 
	616, 618, 621, 623, 625, 627, 629, 632, 
	634, 636, 638, 640, 642, 644, 646, 648, 
	650, 652, 654, 657, 659, 661, 663, 665, 
	667, 669, 671, 673, 675, 677, 679, 681, 
	685, 686, 687, 688, 689, 690, 691, 692, 
	695, 699, 705, 708, 710, 716, 734, 736, 
	738, 740, 742, 745, 747, 749, 751, 754, 
	756, 758, 760, 762, 764, 766, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 801, 803, 
	805, 809, 810, 811
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 75, 77, 79, 80, 83, 90, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 73, 75, 77, 79, 80, 
	83, 90, 124, 9, 13, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 108, 105, 97, 
	111, 100, 32, 97, 110, 99, 101, 112, 
	116, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 73, 75, 77, 79, 83, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	65, 73, 75, 77, 79, 80, 83, 90, 
	124, 9, 13, 111, 103, 117, -60, 99, 
	-121, 110, 111, 115, 116, 58, 10, 10, 
	10, 32, 35, 37, 64, 75, 77, 79, 
	80, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 99, 10, 101, 
	10, 112, 10, 116, 10, 58, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 110, 10, 111, 10, 115, 10, 
	115, 10, 111, 10, 98, 10, 105, 10, 
	110, 10, 97, 10, 111, 114, 10, 122, 
	10, 97, 10, 100, 10, 105, 10, 109, 
	10, 106, 10, 101, 10, 114, 10, 105, 
	10, 99, 107, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 106, 10, 
	58, 105, 10, 105, 10, 99, 110, 115, 
	100, 97, 111, 98, 105, 110, 97, 111, 
	114, 122, 97, 100, 105, 110, 97, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 73, 75, 77, 79, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 97, 111, 10, 100, 
	10, 32, 97, 10, 110, 10, 99, 10, 
	101, 10, 112, 10, 116, 10, 58, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 10, 111, 10, 115, 
	10, 110, 115, 10, 100, 10, 97, 10, 
	111, 10, 98, 10, 105, 10, 110, 10, 
	97, 10, 99, 107, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 106, 
	10, 105, 10, 99, 10, 97, 10, 100, 
	10, 97, 10, 110, 10, 32, 105, 111, 
	105, 109, 106, 101, 114, 105, 58, 10, 
	10, 10, 32, 35, 77, 79, 124, 9, 
	13, 10, 111, 10, 103, 10, 117, -60, 
	10, 99, -121, 10, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 115, 
	10, 111, 10, 98, 10, 105, 10, 110, 
	10, 97, 99, 107, 101, 110, 97, 114, 
	105, 106, 58, 105, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 73, 75, 77, 
	79, 80, 83, 90, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 108, 10, 105, 
	10, 97, 111, 10, 100, 10, 32, 97, 
	10, 110, 10, 99, 10, 101, 10, 112, 
	10, 116, 10, 58, 10, 111, 10, 103, 
	10, 117, -60, 10, 99, -121, 10, 10, 
	110, 10, 111, 10, 115, 10, 110, 115, 
	10, 100, 10, 97, 10, 111, 10, 98, 
	10, 105, 10, 110, 10, 97, 10, 111, 
	10, 122, 10, 97, 10, 100, 10, 99, 
	107, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 105, 10, 
	99, 10, 97, 10, 100, 10, 97, 10, 
	110, 10, 32, 105, 111, 105, 99, 97, 
	97, 100, 97, 110, 32, 105, 111, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 73, 75, 77, 79, 
	80, 83, 90, 124, 9, 13, 10, 108, 
	10, 105, 10, 97, 10, 100, 10, 32, 
	97, 10, 111, 10, 103, 10, 117, -60, 
	10, 99, -121, 10, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 110, 
	115, 10, 100, 10, 97, 10, 111, 10, 
	98, 10, 105, 10, 110, 10, 97, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 97, 10, 
	100, 10, 97, 10, 110, 10, 32, 105, 
	111, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 2, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 16, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	2, 4, 3, 2, 4, 16, 2, 2, 
	2, 2, 3, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 45, 50, 
	55, 60, 65, 69, 73, 76, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	118, 125, 130, 132, 134, 137, 139, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	173, 176, 179, 182, 185, 188, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	236, 238, 240, 242, 245, 247, 249, 251, 
	253, 255, 257, 259, 261, 273, 276, 279, 
	282, 285, 288, 291, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 339, 342, 345, 349, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 383, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 414, 417, 420, 423, 426, 
	429, 432, 436, 439, 442, 445, 447, 449, 
	451, 453, 455, 457, 459, 462, 464, 466, 
	468, 470, 472, 474, 476, 478, 480, 495, 
	498, 501, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 543, 
	546, 550, 553, 557, 560, 563, 566, 569, 
	572, 575, 578, 581, 584, 588, 591, 594, 
	597, 600, 604, 607, 610, 613, 616, 619, 
	622, 625, 629, 632, 635, 638, 641, 644, 
	647, 650, 653, 656, 659, 662, 665, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 696, 699, 702, 705, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 750, 752, 754, 756, 758, 
	760, 763, 765, 767, 783, 786, 789, 792, 
	795, 798, 801, 804, 807, 810, 813, 816, 
	819, 822, 825, 828, 831, 834, 838, 841, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 876, 879, 882, 885, 888, 892, 
	895, 898, 901, 904, 907, 910, 913, 916, 
	919, 922, 925, 929, 932, 935, 938, 941, 
	944, 947, 950, 953, 956, 959, 962, 965, 
	970, 972, 974, 976, 978, 980, 982, 984, 
	988, 992, 998, 1002, 1005, 1011, 1029, 1032, 
	1035, 1038, 1041, 1045, 1048, 1051, 1054, 1058, 
	1061, 1064, 1067, 1070, 1073, 1076, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 
	1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 
	1134, 1139, 1141, 1143
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 6, 9, 10, 11, 12, 
	13, 14, 15, 1, 0, 17, 0, 18, 
	0, 19, 18, 18, 0, 22, 21, 23, 
	21, 20, 26, 25, 27, 25, 24, 26, 
	25, 28, 25, 24, 26, 25, 29, 25, 
	24, 31, 30, 30, 0, 2, 32, 32, 
	0, 34, 35, 33, 2, 0, 36, 0, 
	37, 0, 38, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 0, 51, 53, 54, 
	52, 0, 0, 0, 0, 55, 56, 57, 
	56, 56, 59, 58, 55, 2, 60, 7, 
	60, 0, 61, 0, 62, 0, 63, 64, 
	0, 65, 0, 50, 62, 0, 66, 0, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 73, 72, 75, 74, 75, 76, 
	77, 78, 79, 77, 80, 79, 81, 82, 
	83, 84, 85, 76, 74, 75, 86, 74, 
	75, 87, 74, 75, 88, 74, 75, 89, 
	74, 75, 90, 74, 75, 91, 74, 75, 
	92, 74, 75, 93, 74, 75, 94, 74, 
	75, 95, 74, 75, 96, 74, 75, 97, 
	74, 75, 98, 74, 75, 99, 74, 75, 
	100, 74, 102, 101, 103, 104, 105, 106, 
	107, 108, 106, 109, 110, 111, 112, 113, 
	114, 115, 101, 0, 116, 0, 117, 0, 
	118, 0, 119, 120, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 127, 126, 129, 128, 129, 130, 131, 
	132, 131, 133, 134, 135, 136, 137, 130, 
	128, 129, 138, 128, 129, 139, 128, 129, 
	140, 128, 129, 141, 128, 129, 142, 128, 
	129, 143, 128, 129, 144, 128, 129, 145, 
	128, 129, 146, 128, 129, 147, 128, 129, 
	148, 128, 129, 149, 128, 129, 150, 128, 
	129, 151, 128, 129, 152, 128, 129, 153, 
	128, 129, 154, 128, 129, 155, 128, 129, 
	156, 128, 129, 157, 128, 129, 158, 128, 
	129, 159, 128, 129, 160, 128, 129, 161, 
	128, 162, 129, 163, 128, 163, 129, 128, 
	129, 164, 128, 129, 165, 128, 129, 156, 
	128, 129, 166, 128, 129, 167, 128, 129, 
	168, 128, 129, 169, 128, 129, 170, 128, 
	129, 157, 128, 129, 171, 172, 128, 129, 
	173, 128, 129, 174, 128, 129, 168, 128, 
	129, 175, 128, 129, 176, 128, 129, 177, 
	128, 129, 178, 128, 129, 179, 128, 129, 
	157, 128, 129, 180, 181, 128, 129, 182, 
	128, 129, 183, 128, 129, 184, 128, 129, 
	185, 128, 129, 186, 128, 129, 187, 128, 
	129, 158, 157, 128, 129, 188, 128, 129, 
	170, 128, 189, 190, 0, 191, 0, 62, 
	0, 192, 0, 193, 0, 194, 0, 195, 
	0, 124, 0, 196, 197, 0, 198, 0, 
	199, 0, 200, 0, 201, 0, 202, 0, 
	203, 0, 204, 0, 206, 205, 208, 207, 
	208, 209, 210, 211, 212, 210, 213, 212, 
	214, 215, 216, 217, 218, 209, 207, 208, 
	219, 207, 208, 220, 207, 208, 221, 207, 
	208, 222, 207, 208, 223, 207, 208, 224, 
	207, 208, 225, 207, 208, 226, 207, 208, 
	227, 207, 208, 228, 207, 208, 229, 207, 
	208, 230, 207, 208, 231, 207, 208, 232, 
	207, 208, 233, 207, 208, 234, 207, 208, 
	235, 207, 208, 236, 237, 207, 208, 238, 
	207, 208, 233, 235, 207, 208, 239, 207, 
	208, 240, 207, 208, 241, 207, 208, 242, 
	207, 208, 243, 207, 208, 233, 207, 208, 
	244, 207, 208, 245, 207, 208, 246, 207, 
	247, 208, 248, 207, 248, 208, 207, 208, 
	249, 207, 208, 250, 207, 208, 242, 207, 
	208, 251, 252, 207, 208, 253, 207, 208, 
	235, 207, 208, 254, 207, 208, 255, 207, 
	208, 256, 207, 208, 257, 207, 208, 243, 
	207, 208, 258, 259, 207, 208, 260, 207, 
	208, 261, 207, 208, 262, 207, 208, 263, 
	207, 208, 264, 207, 208, 243, 207, 208, 
	265, 207, 208, 257, 207, 208, 266, 207, 
	208, 267, 207, 208, 268, 207, 208, 269, 
	207, 208, 233, 235, 235, 207, 270, 0, 
	271, 0, 272, 0, 273, 0, 274, 0, 
	275, 0, 276, 0, 278, 277, 280, 279, 
	280, 281, 282, 283, 284, 282, 281, 279, 
	280, 285, 279, 280, 286, 279, 280, 287, 
	279, 288, 280, 289, 279, 289, 280, 279, 
	280, 290, 279, 280, 291, 279, 280, 292, 
	279, 280, 293, 279, 280, 294, 279, 280, 
	295, 279, 280, 296, 279, 280, 297, 279, 
	280, 298, 279, 280, 299, 279, 280, 293, 
	279, 300, 301, 0, 302, 0, 303, 0, 
	304, 0, 305, 0, 306, 0, 307, 0, 
	308, 275, 0, 310, 309, 312, 311, 312, 
	313, 314, 315, 316, 314, 317, 316, 318, 
	319, 320, 321, 322, 323, 313, 311, 312, 
	324, 311, 312, 325, 311, 312, 326, 311, 
	312, 327, 311, 312, 328, 311, 312, 329, 
	311, 312, 330, 311, 312, 331, 311, 312, 
	332, 311, 312, 333, 311, 312, 334, 311, 
	312, 335, 311, 312, 336, 311, 312, 337, 
	311, 312, 338, 311, 312, 339, 311, 312, 
	340, 311, 312, 341, 342, 311, 312, 343, 
	311, 312, 338, 340, 311, 312, 344, 311, 
	312, 345, 311, 312, 346, 311, 312, 347, 
	311, 312, 348, 311, 312, 338, 311, 312, 
	349, 311, 312, 350, 311, 312, 351, 311, 
	352, 312, 353, 311, 353, 312, 311, 312, 
	354, 311, 312, 355, 311, 312, 347, 311, 
	312, 356, 357, 311, 312, 358, 311, 312, 
	340, 311, 312, 359, 311, 312, 360, 311, 
	312, 361, 311, 312, 362, 311, 312, 348, 
	311, 312, 363, 311, 312, 364, 311, 312, 
	365, 311, 312, 360, 311, 312, 366, 367, 
	311, 312, 368, 311, 312, 369, 311, 312, 
	370, 311, 312, 371, 311, 312, 372, 311, 
	312, 348, 311, 312, 373, 311, 312, 362, 
	311, 312, 374, 311, 312, 375, 311, 312, 
	376, 311, 312, 377, 311, 312, 338, 340, 
	340, 311, 378, 0, 379, 0, 70, 0, 
	380, 0, 381, 0, 382, 0, 383, 0, 
	50, 62, 62, 0, 384, 385, 384, 0, 
	388, 387, 389, 390, 387, 386, 0, 392, 
	393, 391, 0, 392, 391, 388, 394, 392, 
	393, 394, 391, 388, 395, 396, 397, 398, 
	399, 400, 401, 399, 402, 403, 404, 405, 
	406, 407, 408, 395, 0, 75, 409, 74, 
	75, 410, 74, 75, 411, 74, 75, 412, 
	74, 75, 100, 410, 74, 75, 413, 74, 
	75, 414, 74, 75, 415, 74, 416, 75, 
	417, 74, 417, 75, 74, 75, 418, 74, 
	75, 419, 74, 75, 420, 74, 75, 421, 
	74, 75, 100, 74, 75, 422, 423, 74, 
	75, 424, 74, 75, 410, 74, 75, 425, 
	74, 75, 426, 74, 75, 427, 74, 75, 
	428, 74, 75, 421, 74, 75, 429, 74, 
	75, 430, 74, 75, 431, 74, 75, 432, 
	74, 75, 433, 74, 75, 434, 74, 75, 
	421, 74, 75, 435, 74, 75, 436, 74, 
	75, 437, 74, 75, 438, 74, 75, 100, 
	410, 410, 74, 439, 0, 1, 0, 440, 
	0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 36, 64, 132, 140, 233, 307, 312, 
	353, 4, 5, 6, 7, 7, 7, 8, 
	7, 7, 7, 8, 9, 10, 11, 2, 
	11, 12, 2, 13, 15, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 355, 29, 30, 30, 2, 13, 32, 
	33, 2, 32, 31, 33, 35, 28, 37, 
	39, 38, 40, 41, 42, 43, 44, 45, 
	46, 47, 46, 47, 47, 2, 48, 62, 
	318, 320, 323, 333, 341, 348, 49, 50, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	59, 60, 61, 2, 63, 2, 2, 3, 
	12, 14, 28, 31, 34, 36, 64, 132, 
	140, 233, 307, 312, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	75, 76, 76, 2, 77, 91, 98, 106, 
	112, 122, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 2, 
	92, 93, 94, 95, 96, 97, 63, 99, 
	100, 101, 102, 103, 104, 105, 107, 108, 
	109, 110, 111, 113, 116, 114, 115, 117, 
	118, 119, 120, 121, 123, 130, 124, 125, 
	126, 127, 128, 129, 131, 133, 135, 134, 
	136, 137, 138, 139, 141, 207, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 149, 
	150, 150, 2, 151, 165, 166, 168, 177, 
	185, 193, 202, 152, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	2, 63, 167, 165, 169, 171, 170, 172, 
	173, 174, 175, 176, 178, 179, 180, 181, 
	182, 183, 184, 186, 188, 187, 189, 190, 
	191, 192, 194, 200, 195, 196, 197, 198, 
	199, 201, 203, 204, 205, 206, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 215, 
	216, 216, 2, 217, 227, 218, 219, 220, 
	221, 222, 223, 224, 225, 226, 63, 228, 
	229, 230, 231, 232, 234, 304, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 242, 
	243, 243, 2, 244, 258, 259, 261, 270, 
	278, 286, 290, 299, 245, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 255, 256, 
	257, 2, 63, 260, 258, 262, 264, 263, 
	265, 266, 267, 268, 269, 271, 272, 273, 
	274, 275, 276, 277, 279, 281, 280, 282, 
	283, 284, 285, 287, 288, 289, 291, 297, 
	292, 293, 294, 295, 296, 298, 300, 301, 
	302, 303, 305, 306, 308, 309, 310, 311, 
	312, 313, 314, 316, 317, 315, 313, 314, 
	315, 313, 316, 317, 3, 12, 14, 28, 
	31, 34, 36, 64, 132, 140, 233, 307, 
	312, 319, 62, 321, 322, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 334, 336, 
	335, 337, 338, 339, 340, 342, 343, 344, 
	345, 346, 347, 349, 350, 351, 352, 354, 
	0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 31, 
	0, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 0, 99, 19, 0, 
	23, 107, 23, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 71, 29, 77, 
	77, 77, 77, 77, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 27, 115, 53, 
	50, 27, 56, 50, 56, 56, 56, 56, 
	56, 56, 56, 59, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 62, 29, 77, 77, 77, 
	77, 77, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 9, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 65, 29, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 68, 29, 77, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 33, 47, 33, 80, 0, 
	0, 35, 0, 0, 86, 83, 37, 89, 
	83, 89, 89, 89, 89, 89, 89, 89, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 355;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 685 "js/lib/gherkin/lexer/hr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
  
/* line 692 "js/lib/gherkin/lexer/hr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 908 "js/lib/gherkin/lexer/hr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 947 "js/lib/gherkin/lexer/hr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

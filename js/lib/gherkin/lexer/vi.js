
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/vi.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 41, 46, 
	51, 56, 61, 65, 69, 71, 72, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 90, 
	95, 102, 107, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 136, 138, 140, 142, 144, 146, 148, 
	150, 152, 154, 156, 158, 160, 162, 164, 
	166, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 205, 207, 209, 211, 213, 215, 217, 
	219, 221, 223, 225, 227, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 241, 242, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 326, 328, 330, 
	332, 334, 336, 338, 340, 342, 344, 346, 
	349, 351, 353, 355, 358, 360, 362, 364, 
	366, 368, 370, 372, 374, 376, 378, 380, 
	382, 384, 386, 388, 390, 392, 394, 397, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	416, 418, 420, 422, 423, 424, 425, 427, 
	428, 429, 430, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 455, 457, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	475, 477, 479, 481, 483, 485, 487, 489, 
	491, 493, 495, 497, 499, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 539, 
	542, 544, 546, 548, 550, 552, 554, 556, 
	558, 560, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 582, 583, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 601, 603, 
	604, 605, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 635, 637, 639, 
	641, 643, 645, 647, 649, 651, 653, 655, 
	657, 659, 661, 663, 665, 667, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 710, 712, 714, 716, 718, 720, 
	722, 724, 726, 728, 730, 732, 734, 736, 
	738, 741, 743, 745, 747, 749, 751, 753, 
	755, 757, 759, 761, 763, 765, 767, 769, 
	772, 774, 776, 778, 780, 782, 784, 785, 
	786, 787, 788, 792, 798, 801, 803, 809, 
	826, 828, 830, 832, 834, 836, 838, 840, 
	843, 845, 847, 849, 851, 853, 855, 857, 
	859, 861, 863, 865, 868, 870, 872, 874, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 911, 913, 916, 919, 921, 923, 925, 
	927, 929, 931, 933, 935, 937, 939, 940, 
	941, 942, 943, 944, 945
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	67, 68, 75, 78, 84, 86, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 66, 67, 68, 75, 78, 84, 86, 
	124, 9, 13, 34, 34, 10, 32, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, -31, 105, -69, -111, 105, 
	32, 99, -31, -70, -93, 110, 104, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 67, 75, 78, 84, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	34, 35, 37, 42, 64, 66, 67, 68, 
	75, 78, 84, 86, 124, 9, 13, 104, 
	111, -31, -69, -81, 32, 108, 105, -31, 
	-69, -121, 117, 58, 10, 10, 10, 32, 
	35, 84, 124, 9, 13, -61, 10, -83, 
	10, 10, 110, 10, 104, 10, 32, 10, 
	110, -60, 10, -125, 10, 10, 110, 10, 
	103, 10, 58, -31, 104, -69, -117, 99, 
	104, 32, 98, -31, -70, -93, 110, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 67, 75, 78, 84, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, -31, 10, 
	105, -69, 10, -111, 10, 10, 105, 10, 
	32, 10, 99, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 104, 10, 58, -31, 
	10, -70, 10, -65, 10, 10, 116, 10, 
	104, 10, 111, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 105, 117, 10, 110, 10, 
	103, 10, 32, 10, 107, 116, -31, 10, 
	-61, 10, -84, 10, 10, 110, 10, 104, 
	10, 32, 10, 104, 10, 117, -31, 10, 
	-69, 10, -111, 10, 10, 110, 10, 103, 
	10, 104, -58, 10, -80, 10, 10, 110, 
	10, 103, -61, 10, 104, -84, -83, 10, 
	10, 110, 10, 104, 10, 32, 10, 110, 
	-60, 10, -125, 10, -61, 10, -84, 10, 
	-61, 10, -96, 10, 105, 117, 110, 103, 
	32, 107, 116, -31, -69, -117, 99, 104, 
	32, 98, -31, -70, -93, 110, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 66, 
	67, 75, 78, 84, 86, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 105, -31, 
	10, -70, 10, -65, 10, 10, 116, 10, 
	104, 10, 111, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 58, 10, 105, 10, 104, 
	-58, 10, -80, 10, 10, 110, 10, 103, 
	-61, 10, 104, -84, -83, 10, 10, 110, 
	10, 104, 10, 32, 10, 104, 10, 117, 
	-31, 10, -69, 10, -111, 10, 10, 110, 
	10, 103, 10, 110, 10, 104, 10, 32, 
	10, 110, -60, 10, -125, 10, -61, 10, 
	-84, 10, -61, 10, -96, 10, -61, -84, 
	110, 104, 32, 104, 117, -31, -69, -111, 
	110, 103, 104, -58, -80, 110, 103, -61, 
	104, -84, -83, 110, 104, 32, 104, 117, 
	-31, -69, -111, 110, 103, 110, 104, 32, 
	110, -60, -125, 110, 103, 58, 10, 10, 
	10, 32, 35, 37, 64, 66, 68, 75, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -31, 
	10, -69, 10, -111, 10, 10, 105, 10, 
	32, 10, 99, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 104, 10, 58, -31, 
	10, -69, 10, -81, 10, 10, 32, 10, 
	108, 10, 105, -31, 10, -69, 10, -121, 
	10, 10, 117, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 117, 10, 110, 10, 103, 
	10, 32, 10, 107, 116, -31, 10, -61, 
	10, -84, 10, 10, 110, 10, 104, 10, 
	32, 10, 104, 10, 117, -31, 10, -69, 
	10, -111, 10, 10, 110, 10, 103, -61, 
	10, -84, -83, 10, 10, 110, 10, 104, 
	10, 32, 10, 110, -60, 10, -125, 10, 
	-61, -84, -61, -96, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	66, 67, 68, 75, 78, 84, 86, 124, 
	9, 13, 10, 105, -31, 10, -70, 10, 
	-65, 10, 10, 116, 10, 104, 10, 111, 
	-31, 10, 104, -69, 10, -117, 10, 10, 
	99, 10, 104, 10, 32, 10, 98, -31, 
	10, -70, 10, -93, 10, 10, 110, 10, 
	58, 10, 105, 117, 10, 110, 10, 103, 
	10, 32, 10, 107, 116, -31, 10, -61, 
	10, -84, 10, 10, 110, 10, 104, 10, 
	32, 10, 104, 10, 117, -31, 10, -69, 
	10, -111, 10, 10, 110, 10, 103, 10, 
	104, -58, 10, -80, 10, 10, 110, 10, 
	103, -61, 10, 104, -84, -83, 10, 10, 
	110, 10, 104, 10, 32, 10, 110, -60, 
	10, -125, 10, -61, 10, -84, 10, -61, 
	10, -96, 10, -31, -70, -65, 116, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	15, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 15, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 43, 48, 
	53, 58, 63, 67, 71, 74, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	116, 123, 128, 131, 133, 135, 137, 139, 
	141, 143, 145, 147, 149, 151, 153, 155, 
	157, 171, 174, 177, 180, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	263, 270, 273, 276, 279, 282, 285, 288, 
	291, 294, 297, 300, 303, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 346, 349, 352, 355, 358, 
	361, 364, 367, 370, 373, 376, 379, 382, 
	385, 388, 391, 395, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 477, 480, 
	484, 487, 490, 493, 497, 500, 503, 506, 
	509, 512, 515, 518, 521, 524, 527, 530, 
	533, 536, 539, 542, 545, 548, 551, 555, 
	559, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 594, 596, 598, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 643, 646, 
	649, 652, 655, 658, 661, 664, 667, 670, 
	673, 676, 679, 682, 685, 688, 691, 694, 
	697, 700, 703, 706, 709, 713, 716, 719, 
	722, 725, 728, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 768, 
	772, 775, 778, 781, 784, 787, 790, 793, 
	796, 799, 802, 805, 808, 811, 814, 817, 
	820, 823, 826, 829, 832, 834, 836, 838, 
	840, 842, 844, 846, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 866, 869, 872, 
	874, 876, 878, 880, 882, 884, 886, 888, 
	890, 892, 894, 896, 898, 900, 902, 904, 
	906, 908, 910, 912, 914, 925, 928, 931, 
	934, 937, 940, 943, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 
	1030, 1033, 1037, 1040, 1043, 1046, 1049, 1052, 
	1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 
	1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 
	1129, 1132, 1135, 1138, 1141, 1144, 1147, 1149, 
	1151, 1153, 1155, 1159, 1165, 1169, 1172, 1178, 
	1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1257, 1260, 1263, 1266, 
	1270, 1273, 1276, 1279, 1282, 1285, 1288, 1291, 
	1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 
	1318, 1321, 1324, 1328, 1332, 1335, 1338, 1341, 
	1344, 1347, 1350, 1353, 1356, 1359, 1362, 1364, 
	1366, 1368, 1370, 1372, 1374
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 19, 
	18, 18, 0, 22, 21, 23, 21, 20, 
	26, 25, 27, 25, 24, 26, 25, 28, 
	25, 24, 26, 25, 29, 25, 24, 31, 
	30, 30, 0, 2, 32, 32, 0, 34, 
	35, 33, 2, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 0, 51, 53, 54, 52, 0, 
	0, 0, 0, 55, 56, 57, 56, 56, 
	59, 58, 55, 2, 60, 7, 60, 0, 
	61, 62, 0, 63, 0, 64, 0, 65, 
	0, 66, 0, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 75, 74, 77, 76, 77, 78, 79, 
	80, 81, 79, 82, 83, 84, 85, 86, 
	87, 78, 76, 77, 88, 76, 77, 89, 
	76, 77, 90, 76, 77, 91, 76, 77, 
	92, 76, 77, 93, 76, 77, 94, 76, 
	77, 95, 76, 77, 96, 76, 77, 97, 
	76, 77, 98, 76, 77, 99, 76, 77, 
	100, 76, 77, 101, 76, 77, 102, 76, 
	104, 103, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 103, 
	0, 118, 0, 119, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 132, 131, 134, 133, 134, 
	135, 136, 137, 136, 135, 133, 138, 134, 
	133, 139, 134, 133, 134, 140, 133, 134, 
	141, 133, 134, 142, 133, 134, 143, 133, 
	144, 134, 133, 145, 134, 133, 134, 146, 
	133, 134, 147, 133, 134, 148, 133, 149, 
	150, 0, 151, 0, 152, 0, 153, 0, 
	154, 0, 155, 0, 156, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 161, 0, 
	163, 162, 165, 164, 165, 166, 167, 168, 
	169, 167, 170, 171, 172, 173, 174, 175, 
	166, 164, 165, 176, 164, 165, 177, 164, 
	165, 178, 164, 165, 179, 164, 165, 180, 
	164, 165, 181, 164, 165, 182, 164, 165, 
	183, 164, 165, 184, 164, 165, 185, 164, 
	165, 186, 164, 165, 187, 164, 165, 188, 
	164, 165, 189, 164, 165, 190, 164, 191, 
	165, 192, 164, 193, 165, 164, 194, 165, 
	164, 165, 195, 164, 165, 196, 164, 165, 
	197, 164, 198, 165, 164, 199, 165, 164, 
	200, 165, 164, 165, 201, 164, 165, 202, 
	164, 165, 190, 164, 203, 165, 164, 204, 
	165, 164, 205, 165, 164, 165, 206, 164, 
	165, 207, 164, 165, 206, 164, 208, 165, 
	209, 164, 210, 165, 164, 211, 165, 164, 
	165, 212, 164, 165, 213, 164, 165, 214, 
	164, 165, 215, 164, 216, 165, 164, 217, 
	165, 164, 218, 165, 164, 165, 202, 164, 
	165, 206, 219, 164, 165, 220, 164, 165, 
	221, 164, 165, 222, 164, 165, 223, 224, 
	164, 208, 165, 164, 225, 165, 164, 226, 
	165, 164, 165, 227, 164, 165, 228, 164, 
	165, 229, 164, 165, 230, 164, 165, 231, 
	164, 232, 165, 164, 233, 165, 164, 234, 
	165, 164, 165, 235, 164, 165, 202, 164, 
	165, 236, 164, 237, 165, 164, 238, 165, 
	164, 165, 239, 164, 165, 206, 164, 240, 
	165, 241, 164, 226, 242, 165, 164, 165, 
	243, 164, 165, 244, 164, 165, 245, 164, 
	165, 246, 164, 247, 165, 164, 234, 165, 
	164, 248, 165, 164, 206, 165, 164, 249, 
	165, 164, 206, 165, 164, 119, 250, 0, 
	251, 0, 252, 0, 253, 0, 254, 255, 
	0, 256, 0, 257, 0, 258, 0, 259, 
	0, 260, 0, 261, 0, 262, 0, 263, 
	0, 264, 0, 265, 0, 266, 0, 267, 
	0, 269, 268, 271, 270, 271, 272, 273, 
	274, 275, 273, 276, 277, 278, 279, 280, 
	281, 272, 270, 271, 282, 270, 271, 283, 
	270, 271, 284, 270, 271, 285, 270, 271, 
	286, 270, 271, 287, 270, 271, 288, 270, 
	271, 289, 270, 271, 290, 270, 271, 291, 
	270, 271, 292, 270, 271, 293, 270, 271, 
	294, 270, 271, 295, 270, 271, 296, 270, 
	271, 297, 270, 298, 271, 270, 299, 271, 
	270, 300, 271, 270, 271, 301, 270, 271, 
	302, 270, 271, 301, 270, 303, 271, 304, 
	270, 305, 271, 270, 306, 271, 270, 271, 
	307, 270, 271, 308, 270, 271, 309, 270, 
	271, 310, 270, 311, 271, 270, 312, 271, 
	270, 313, 271, 270, 271, 314, 270, 271, 
	296, 270, 271, 301, 270, 271, 315, 270, 
	316, 271, 270, 317, 271, 270, 271, 318, 
	270, 271, 301, 270, 319, 271, 320, 270, 
	321, 322, 271, 270, 271, 323, 270, 271, 
	324, 270, 271, 325, 270, 271, 326, 270, 
	271, 327, 270, 328, 271, 270, 329, 271, 
	270, 330, 271, 270, 271, 331, 270, 271, 
	314, 270, 271, 332, 270, 271, 333, 270, 
	271, 334, 270, 271, 335, 270, 336, 271, 
	270, 330, 271, 270, 337, 271, 270, 301, 
	271, 270, 338, 271, 270, 301, 271, 270, 
	339, 0, 340, 0, 341, 0, 342, 0, 
	343, 0, 344, 0, 345, 0, 346, 0, 
	347, 0, 348, 0, 349, 0, 266, 0, 
	350, 0, 351, 0, 352, 0, 353, 0, 
	119, 0, 354, 355, 0, 356, 357, 0, 
	358, 0, 359, 0, 360, 0, 361, 0, 
	362, 0, 363, 0, 364, 0, 365, 0, 
	366, 0, 160, 0, 367, 0, 368, 0, 
	369, 0, 370, 0, 371, 0, 372, 0, 
	373, 0, 374, 0, 375, 0, 377, 376, 
	379, 378, 379, 380, 381, 382, 381, 383, 
	384, 385, 386, 380, 378, 379, 387, 378, 
	379, 388, 378, 379, 389, 378, 379, 390, 
	378, 379, 391, 378, 379, 392, 378, 379, 
	393, 378, 379, 394, 378, 379, 395, 378, 
	379, 396, 378, 379, 397, 378, 379, 398, 
	378, 379, 399, 378, 379, 400, 378, 401, 
	379, 378, 402, 379, 378, 403, 379, 378, 
	379, 404, 378, 379, 405, 378, 379, 406, 
	378, 407, 379, 378, 408, 379, 378, 409, 
	379, 378, 379, 410, 378, 379, 411, 378, 
	379, 412, 378, 413, 379, 378, 414, 379, 
	378, 415, 379, 378, 379, 416, 378, 379, 
	417, 378, 379, 418, 378, 419, 379, 378, 
	420, 379, 378, 421, 379, 378, 379, 411, 
	378, 422, 379, 423, 378, 424, 379, 378, 
	425, 379, 378, 379, 426, 378, 379, 427, 
	378, 379, 428, 378, 379, 429, 378, 430, 
	379, 378, 431, 379, 378, 432, 379, 378, 
	379, 411, 378, 379, 433, 378, 379, 434, 
	378, 379, 435, 378, 379, 436, 378, 379, 
	437, 438, 378, 422, 379, 378, 439, 379, 
	378, 440, 379, 378, 379, 441, 378, 379, 
	442, 378, 379, 443, 378, 379, 444, 378, 
	379, 445, 378, 446, 379, 378, 447, 379, 
	378, 448, 379, 378, 379, 449, 378, 379, 
	411, 378, 450, 379, 378, 440, 451, 379, 
	378, 379, 452, 378, 379, 453, 378, 379, 
	454, 378, 379, 455, 378, 456, 379, 378, 
	448, 379, 378, 457, 0, 119, 0, 458, 
	0, 119, 0, 459, 460, 459, 0, 463, 
	462, 464, 465, 462, 461, 0, 467, 468, 
	466, 0, 467, 466, 463, 469, 467, 468, 
	469, 466, 463, 470, 471, 472, 473, 474, 
	475, 476, 477, 478, 479, 480, 481, 482, 
	483, 470, 0, 77, 484, 76, 485, 77, 
	76, 486, 77, 76, 487, 77, 76, 77, 
	488, 76, 77, 489, 76, 77, 488, 76, 
	490, 77, 491, 76, 492, 77, 76, 493, 
	77, 76, 77, 494, 76, 77, 495, 76, 
	77, 496, 76, 77, 497, 76, 498, 77, 
	76, 499, 77, 76, 500, 77, 76, 77, 
	501, 76, 77, 102, 76, 77, 488, 502, 
	76, 77, 503, 76, 77, 504, 76, 77, 
	505, 76, 77, 506, 507, 76, 490, 77, 
	76, 508, 77, 76, 509, 77, 76, 77, 
	510, 76, 77, 511, 76, 77, 512, 76, 
	77, 513, 76, 77, 514, 76, 515, 77, 
	76, 516, 77, 76, 517, 77, 76, 77, 
	518, 76, 77, 501, 76, 77, 519, 76, 
	520, 77, 76, 521, 77, 76, 77, 522, 
	76, 77, 488, 76, 523, 77, 524, 76, 
	509, 525, 77, 76, 77, 526, 76, 77, 
	527, 76, 77, 528, 76, 77, 529, 76, 
	530, 77, 76, 517, 77, 76, 531, 77, 
	76, 488, 77, 76, 532, 77, 76, 488, 
	77, 76, 533, 0, 534, 0, 535, 0, 
	119, 0, 536, 0, 1, 0, 537, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 65, 67, 92, 280, 285, 384, 386, 
	450, 4, 5, 6, 7, 7, 7, 8, 
	7, 7, 7, 8, 9, 10, 11, 2, 
	11, 12, 2, 13, 15, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 452, 29, 30, 30, 2, 13, 32, 
	33, 2, 32, 31, 33, 35, 446, 36, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 47, 48, 48, 2, 
	49, 63, 392, 397, 399, 429, 434, 444, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 2, 64, 2, 
	2, 3, 12, 14, 28, 31, 34, 65, 
	67, 92, 280, 285, 384, 386, 66, 28, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 79, 80, 80, 
	2, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 64, 93, 186, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 105, 106, 106, 2, 
	107, 121, 122, 138, 140, 169, 174, 184, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 2, 64, 123, 
	134, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 135, 136, 137, 121, 139, 
	141, 151, 142, 143, 144, 145, 146, 147, 
	148, 149, 150, 152, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 170, 171, 172, 173, 
	175, 182, 176, 177, 178, 179, 180, 181, 
	183, 185, 187, 188, 189, 190, 191, 268, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 204, 205, 
	205, 2, 206, 220, 221, 226, 228, 241, 
	246, 266, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 218, 219, 2, 
	64, 222, 223, 224, 225, 220, 227, 229, 
	240, 230, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 242, 243, 244, 245, 247, 
	264, 248, 258, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 259, 260, 261, 262, 
	263, 265, 267, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 281, 282, 
	283, 284, 286, 382, 287, 297, 288, 289, 
	290, 291, 292, 293, 294, 295, 296, 298, 
	299, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 307, 308, 308, 2, 309, 323, 
	335, 345, 374, 310, 311, 312, 313, 314, 
	315, 316, 317, 318, 319, 320, 321, 322, 
	2, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 334, 64, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 356, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 368, 369, 370, 371, 
	372, 373, 375, 376, 377, 378, 379, 380, 
	381, 383, 385, 386, 387, 388, 390, 391, 
	389, 387, 388, 389, 387, 390, 391, 3, 
	12, 14, 28, 31, 34, 65, 67, 92, 
	280, 285, 384, 386, 393, 394, 395, 396, 
	63, 398, 400, 411, 401, 402, 403, 404, 
	405, 406, 407, 408, 409, 410, 412, 413, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	422, 423, 424, 425, 426, 427, 428, 430, 
	431, 432, 433, 435, 442, 436, 437, 438, 
	439, 440, 441, 443, 445, 447, 448, 449, 
	451, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 31, 
	0, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 0, 99, 19, 0, 
	23, 107, 23, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 65, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 11, 27, 
	115, 53, 50, 27, 56, 50, 56, 56, 
	56, 56, 56, 56, 56, 59, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 0, 
	74, 77, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 68, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 71, 29, 77, 77, 77, 77, 77, 
	77, 77, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 33, 47, 
	33, 80, 0, 0, 35, 0, 0, 86, 
	83, 37, 89, 83, 89, 89, 89, 89, 
	89, 89, 89, 92, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 452;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 814 "js/lib/gherkin/lexer/vi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
  
/* line 821 "js/lib/gherkin/lexer/vi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1037 "js/lib/gherkin/lexer/vi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1076 "js/lib/gherkin/lexer/vi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

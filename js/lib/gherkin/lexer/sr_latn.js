
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_latn.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 45, 50, 
	55, 60, 65, 69, 73, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 94, 
	99, 106, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 142, 144, 146, 
	148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 178, 
	180, 182, 184, 186, 188, 190, 192, 194, 
	196, 198, 217, 219, 220, 222, 223, 225, 
	226, 227, 228, 229, 230, 231, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	317, 319, 321, 323, 326, 328, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 374, 376, 378, 381, 383, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 433, 435, 437, 439, 
	441, 443, 445, 447, 449, 451, 453, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	474, 476, 479, 481, 483, 485, 487, 489, 
	491, 493, 496, 498, 501, 503, 505, 507, 
	509, 511, 513, 515, 517, 519, 521, 523, 
	525, 529, 531, 533, 535, 537, 539, 541, 
	543, 545, 547, 549, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 582, 584, 586, 589, 591, 
	593, 594, 595, 596, 598, 599, 601, 602, 
	603, 605, 606, 607, 608, 609, 610, 611, 
	612, 614, 615, 616, 617, 618, 619, 620, 
	621, 622, 623, 625, 626, 627, 644, 646, 
	648, 650, 652, 654, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 684, 686, 688, 690, 692, 694, 
	696, 698, 700, 702, 704, 706, 709, 711, 
	714, 716, 719, 721, 723, 725, 727, 729, 
	731, 733, 736, 738, 741, 743, 745, 748, 
	750, 752, 754, 756, 758, 760, 763, 765, 
	767, 769, 771, 773, 775, 777, 781, 783, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 811, 813, 815, 
	817, 819, 821, 823, 825, 827, 829, 831, 
	834, 836, 838, 841, 843, 845, 846, 847, 
	848, 857, 859, 861, 863, 865, 867, 869, 
	871, 873, 875, 877, 879, 881, 883, 885, 
	887, 889, 891, 894, 896, 898, 900, 902, 
	904, 906, 908, 911, 912, 913, 914, 915, 
	916, 918, 919, 920, 921, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	942, 943, 944, 946, 947, 948, 952, 958, 
	961, 963, 969, 988, 990, 992, 995, 997, 
	999, 1001, 1003, 1005, 1007, 1009, 1012, 1014, 
	1016, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 
	1051, 1055, 1057, 1059, 1061, 1063, 1065, 1068, 
	1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 
	1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 
	1102, 1104, 1106, 1107, 1108
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 73, 75, 77, 
	79, 80, 83, 90, 124, 9, 13, 34, 
	34, 10, 32, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	105, 117, 110, 107, 99, 105, 111, 110, 
	97, 108, 110, 111, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 64, 70, 75, 
	77, 79, 80, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 65, 70, 73, 
	75, 77, 79, 80, 83, 90, 124, 9, 
	13, 97, 111, 100, 32, 97, 110, 99, 
	116, 101, 112, 116, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 70, 73, 
	75, 77, 79, 80, 83, 90, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 108, 
	10, 105, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 97, 
	10, 100, 10, 32, 97, 10, 111, 10, 
	103, 10, 117, -60, 10, 99, -121, 10, 
	10, 110, 115, 10, 100, 10, 97, 10, 
	111, 10, 98, 10, 105, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 109, 10, 
	101, 10, 114, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 97, 10, 100, 116, 10, 97, 
	10, 116, 10, 101, 111, 10, 97, 10, 
	116, 101, 107, 115, 116, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	97, 111, 10, 100, 10, 32, 97, 10, 
	110, 10, 99, 10, 101, 10, 112, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 115, 10, 100, 10, 
	97, 10, 111, 10, 98, 10, 105, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 114, 10, 99, 107, 
	116, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 105, 10, 
	99, 10, 114, 10, 117, 10, 107, 10, 
	116, 10, 117, 10, 114, 10, 97, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	106, 10, 97, 10, 100, 116, 10, 97, 
	10, 116, 10, 101, 111, 10, 97, 10, 
	116, 111, 103, 117, -60, 99, -121, 110, 
	115, 100, 97, 110, 111, 111, 118, 97, 
	98, 105, 110, 97, 111, 114, 122, 97, 
	100, 105, 110, 105, 109, 101, 114, 58, 
	105, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 70, 73, 75, 77, 79, 80, 
	83, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 10, 105, 10, 117, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 110, 10, 111, 10, 115, 10, 116, 
	10, 58, 10, 97, 111, 10, 100, 10, 
	32, 97, 10, 110, 10, 99, 116, 10, 
	101, 10, 112, 10, 101, 10, 107, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 115, 10, 100, 10, 
	97, 10, 110, 111, 10, 111, 10, 118, 
	10, 97, 10, 98, 10, 105, 10, 110, 
	10, 111, 114, 10, 122, 10, 97, 10, 
	100, 10, 105, 10, 109, 10, 101, 10, 
	114, 10, 99, 107, 116, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 105, 10, 99, 10, 114, 10, 
	117, 10, 107, 10, 116, 10, 117, 10, 
	114, 10, 97, 10, 32, 10, 115, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 97, 10, 
	100, 116, 10, 97, 10, 116, 10, 101, 
	111, 10, 97, 10, 116, 58, 10, 10, 
	10, 32, 35, 70, 77, 79, 124, 9, 
	13, 10, 117, 10, 110, 10, 107, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 110, 10, 111, 10, 
	115, 10, 116, 10, 58, 10, 111, 10, 
	103, 10, 117, -60, 10, 99, -121, 10, 
	10, 115, 10, 111, 10, 98, 10, 105, 
	10, 110, 10, 97, 99, 107, 116, 101, 
	110, 97, 114, 105, 106, 111, 105, 58, 
	105, 99, 97, 114, 117, 107, 116, 117, 
	114, 97, 32, 115, 99, 101, 110, 97, 
	114, 105, 106, 97, 100, 116, 97, 116, 
	101, 111, 97, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 70, 73, 75, 77, 79, 80, 83, 
	90, 124, 9, 13, 10, 111, 10, 110, 
	10, 99, 116, 10, 101, 10, 112, 10, 
	101, 10, 107, 10, 111, 10, 103, 10, 
	117, -60, 10, 99, -121, 10, 10, 115, 
	10, 110, 111, 10, 111, 10, 118, 10, 
	97, 10, 98, 10, 105, 10, 110, 10, 
	111, 114, 10, 122, 10, 97, 10, 100, 
	10, 105, 10, 109, 10, 101, 10, 114, 
	10, 58, 105, 10, 99, 107, 116, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 106, 111, 10, 105, 10, 105, 
	10, 99, 10, 114, 10, 117, 10, 107, 
	10, 116, 10, 117, 10, 114, 10, 97, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 106, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 17, 2, 1, 2, 1, 2, 1, 
	1, 1, 1, 1, 1, 15, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 3, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 3, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 15, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 3, 2, 2, 
	1, 1, 1, 2, 1, 2, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 15, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 3, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 3, 2, 2, 1, 1, 1, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 2, 1, 1, 2, 4, 3, 
	2, 4, 17, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	4, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 47, 52, 
	57, 62, 67, 71, 75, 78, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	120, 127, 132, 134, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 181, 184, 187, 
	190, 193, 196, 199, 202, 205, 208, 211, 
	214, 217, 220, 223, 226, 229, 232, 235, 
	238, 241, 244, 247, 250, 253, 256, 259, 
	262, 265, 284, 287, 289, 292, 294, 297, 
	299, 301, 303, 305, 307, 309, 326, 329, 
	332, 335, 338, 341, 344, 347, 350, 353, 
	356, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 413, 416, 419, 422, 425, 
	429, 432, 435, 438, 442, 445, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 497, 500, 
	503, 506, 509, 513, 516, 519, 523, 526, 
	529, 531, 533, 535, 537, 539, 541, 543, 
	560, 563, 566, 569, 572, 575, 578, 581, 
	584, 587, 590, 593, 596, 599, 602, 605, 
	608, 611, 614, 617, 620, 623, 626, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	657, 660, 664, 667, 670, 673, 676, 679, 
	682, 685, 689, 692, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 737, 740, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 773, 776, 779, 
	782, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 816, 819, 822, 826, 829, 
	832, 834, 836, 838, 841, 843, 846, 848, 
	850, 853, 855, 857, 859, 861, 863, 865, 
	867, 870, 872, 874, 876, 878, 880, 882, 
	884, 886, 888, 891, 893, 895, 912, 915, 
	918, 921, 924, 927, 930, 933, 936, 939, 
	942, 945, 948, 951, 954, 957, 960, 963, 
	966, 969, 972, 975, 978, 981, 984, 987, 
	990, 993, 996, 999, 1002, 1005, 1009, 1012, 
	1016, 1019, 1023, 1026, 1029, 1032, 1035, 1038, 
	1041, 1044, 1048, 1051, 1055, 1058, 1061, 1065, 
	1068, 1071, 1074, 1077, 1080, 1083, 1087, 1090, 
	1093, 1096, 1099, 1102, 1105, 1108, 1113, 1116, 
	1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 
	1192, 1195, 1198, 1202, 1205, 1208, 1210, 1212, 
	1214, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 
	1268, 1271, 1274, 1278, 1281, 1284, 1287, 1290, 
	1293, 1296, 1299, 1303, 1305, 1307, 1309, 1311, 
	1313, 1316, 1318, 1320, 1322, 1324, 1326, 1328, 
	1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 
	1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 
	1363, 1365, 1367, 1370, 1372, 1374, 1378, 1384, 
	1388, 1391, 1397, 1416, 1419, 1422, 1426, 1429, 
	1432, 1435, 1438, 1441, 1444, 1447, 1451, 1454, 
	1457, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1483, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 
	1508, 1513, 1516, 1519, 1522, 1525, 1528, 1532, 
	1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556, 
	1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 
	1583, 1586, 1589, 1591, 1593
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 6, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 6, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 20, 19, 19, 0, 23, 
	22, 24, 22, 21, 27, 26, 28, 26, 
	25, 27, 26, 29, 26, 25, 27, 26, 
	30, 26, 25, 32, 31, 31, 0, 2, 
	33, 33, 0, 35, 36, 34, 2, 0, 
	37, 0, 38, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 0, 52, 
	54, 55, 53, 0, 0, 0, 0, 56, 
	57, 58, 57, 57, 60, 59, 56, 2, 
	61, 7, 61, 0, 62, 0, 63, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	72, 0, 73, 0, 74, 0, 75, 0, 
	76, 0, 77, 0, 79, 78, 81, 80, 
	81, 82, 83, 84, 83, 85, 86, 87, 
	88, 89, 90, 82, 80, 81, 91, 80, 
	81, 92, 80, 81, 93, 80, 81, 94, 
	80, 81, 95, 80, 81, 96, 80, 81, 
	97, 80, 81, 98, 80, 81, 99, 80, 
	81, 100, 80, 81, 101, 80, 81, 102, 
	80, 81, 103, 80, 81, 104, 80, 81, 
	105, 80, 81, 106, 80, 81, 107, 80, 
	81, 108, 80, 81, 109, 80, 81, 110, 
	80, 81, 111, 80, 81, 112, 80, 81, 
	113, 80, 81, 114, 80, 81, 115, 80, 
	81, 116, 80, 81, 117, 80, 81, 118, 
	80, 120, 119, 121, 122, 123, 124, 125, 
	126, 127, 124, 128, 129, 130, 131, 132, 
	133, 134, 119, 0, 135, 136, 0, 137, 
	0, 51, 63, 0, 138, 0, 139, 140, 
	0, 141, 0, 142, 0, 143, 0, 144, 
	0, 146, 145, 148, 147, 148, 149, 150, 
	151, 152, 150, 153, 154, 152, 155, 156, 
	157, 158, 159, 160, 149, 147, 148, 161, 
	147, 148, 162, 147, 148, 163, 147, 148, 
	164, 147, 148, 165, 147, 148, 166, 147, 
	148, 167, 147, 148, 168, 147, 148, 169, 
	147, 148, 170, 147, 148, 171, 147, 148, 
	172, 147, 148, 173, 147, 148, 174, 147, 
	148, 175, 147, 148, 176, 147, 148, 177, 
	147, 148, 178, 147, 148, 179, 147, 148, 
	180, 147, 148, 181, 147, 148, 182, 147, 
	148, 183, 147, 148, 184, 147, 148, 185, 
	147, 148, 186, 147, 148, 187, 147, 148, 
	188, 147, 148, 189, 147, 148, 190, 147, 
	148, 175, 147, 148, 191, 147, 148, 192, 
	147, 148, 175, 177, 147, 148, 193, 147, 
	148, 194, 147, 148, 195, 147, 196, 148, 
	186, 147, 186, 148, 147, 148, 197, 198, 
	147, 148, 199, 147, 148, 177, 147, 148, 
	200, 147, 148, 201, 147, 148, 202, 147, 
	148, 203, 147, 148, 190, 147, 148, 204, 
	147, 148, 205, 147, 148, 206, 147, 148, 
	207, 147, 148, 190, 147, 148, 208, 147, 
	148, 209, 147, 148, 210, 147, 148, 211, 
	147, 148, 212, 147, 148, 213, 147, 148, 
	190, 147, 148, 214, 147, 148, 215, 216, 
	147, 148, 217, 147, 148, 218, 147, 148, 
	177, 177, 147, 148, 219, 147, 148, 176, 
	147, 220, 0, 221, 0, 222, 0, 223, 
	0, 224, 0, 226, 225, 228, 227, 228, 
	229, 230, 231, 232, 230, 233, 234, 232, 
	235, 236, 237, 238, 239, 240, 229, 227, 
	228, 241, 227, 228, 242, 227, 228, 243, 
	227, 228, 244, 227, 228, 245, 227, 228, 
	246, 227, 228, 247, 227, 228, 248, 227, 
	228, 249, 227, 228, 250, 227, 228, 251, 
	227, 228, 252, 227, 228, 253, 227, 228, 
	254, 227, 228, 255, 227, 228, 256, 227, 
	228, 257, 227, 228, 258, 227, 228, 259, 
	227, 228, 260, 227, 228, 261, 227, 228, 
	262, 227, 228, 263, 227, 228, 264, 227, 
	228, 265, 227, 228, 266, 227, 228, 267, 
	227, 228, 268, 227, 228, 269, 227, 228, 
	270, 227, 228, 255, 227, 228, 271, 272, 
	227, 228, 273, 227, 228, 255, 257, 227, 
	228, 274, 227, 228, 275, 227, 228, 276, 
	227, 228, 269, 227, 228, 277, 227, 228, 
	278, 227, 228, 279, 227, 280, 228, 266, 
	227, 266, 228, 227, 228, 281, 282, 227, 
	228, 283, 227, 228, 257, 227, 228, 284, 
	227, 228, 285, 227, 228, 286, 227, 228, 
	287, 227, 228, 270, 227, 228, 288, 227, 
	228, 289, 227, 228, 290, 227, 228, 291, 
	227, 228, 270, 227, 228, 292, 293, 294, 
	227, 228, 295, 227, 228, 296, 227, 228, 
	297, 227, 228, 298, 227, 228, 299, 227, 
	228, 270, 227, 228, 300, 227, 228, 287, 
	227, 228, 301, 227, 228, 302, 227, 228, 
	303, 227, 228, 304, 227, 228, 305, 227, 
	228, 306, 227, 228, 307, 227, 228, 308, 
	227, 228, 309, 227, 228, 310, 227, 228, 
	311, 227, 228, 312, 227, 228, 313, 227, 
	228, 314, 227, 228, 315, 227, 228, 287, 
	227, 228, 316, 227, 228, 317, 318, 227, 
	228, 319, 227, 228, 320, 227, 228, 257, 
	257, 227, 228, 321, 227, 228, 256, 227, 
	322, 0, 323, 0, 324, 0, 325, 72, 
	0, 72, 0, 326, 327, 0, 328, 0, 
	63, 0, 329, 330, 0, 331, 0, 332, 
	0, 223, 0, 333, 0, 334, 0, 335, 
	0, 76, 0, 336, 337, 0, 338, 0, 
	339, 0, 340, 0, 341, 0, 332, 0, 
	342, 0, 343, 0, 344, 0, 345, 0, 
	346, 347, 0, 349, 348, 351, 350, 351, 
	352, 353, 354, 355, 353, 356, 357, 355, 
	358, 359, 360, 361, 362, 363, 352, 350, 
	351, 364, 350, 351, 365, 350, 351, 366, 
	350, 351, 367, 350, 351, 368, 350, 351, 
	369, 350, 351, 370, 350, 351, 371, 350, 
	351, 372, 350, 351, 373, 350, 351, 374, 
	350, 351, 375, 350, 351, 376, 350, 351, 
	377, 350, 351, 378, 350, 351, 379, 350, 
	351, 380, 350, 351, 381, 350, 351, 382, 
	350, 351, 383, 350, 351, 384, 350, 351, 
	385, 350, 351, 386, 350, 351, 387, 350, 
	351, 388, 350, 351, 389, 350, 351, 390, 
	350, 351, 391, 350, 351, 392, 350, 351, 
	393, 350, 351, 378, 350, 351, 394, 395, 
	350, 351, 396, 350, 351, 378, 380, 350, 
	351, 397, 350, 351, 398, 399, 350, 351, 
	400, 350, 351, 392, 350, 351, 401, 350, 
	351, 391, 350, 351, 402, 350, 351, 403, 
	350, 351, 404, 350, 405, 351, 389, 350, 
	389, 351, 350, 351, 406, 407, 350, 351, 
	408, 350, 351, 380, 350, 351, 409, 410, 
	350, 351, 411, 350, 351, 412, 350, 351, 
	393, 350, 351, 413, 350, 351, 414, 350, 
	351, 412, 350, 351, 415, 416, 350, 351, 
	417, 350, 351, 418, 350, 351, 413, 350, 
	351, 419, 350, 351, 420, 350, 351, 421, 
	350, 351, 393, 350, 351, 422, 423, 424, 
	350, 351, 425, 350, 351, 426, 350, 351, 
	427, 350, 351, 428, 350, 351, 429, 350, 
	351, 393, 350, 351, 430, 350, 351, 412, 
	350, 351, 431, 350, 351, 432, 350, 351, 
	433, 350, 351, 434, 350, 351, 435, 350, 
	351, 436, 350, 351, 437, 350, 351, 438, 
	350, 351, 439, 350, 351, 440, 350, 351, 
	441, 350, 351, 442, 350, 351, 443, 350, 
	351, 444, 350, 351, 445, 350, 351, 412, 
	350, 351, 446, 350, 351, 447, 448, 350, 
	351, 449, 350, 351, 450, 350, 351, 380, 
	380, 350, 351, 451, 350, 351, 379, 350, 
	452, 0, 454, 453, 456, 455, 456, 457, 
	458, 459, 460, 461, 458, 457, 455, 456, 
	462, 455, 456, 463, 455, 456, 464, 455, 
	456, 465, 455, 456, 466, 455, 456, 467, 
	455, 456, 468, 455, 456, 469, 455, 456, 
	470, 455, 456, 471, 455, 456, 472, 455, 
	456, 473, 455, 456, 474, 455, 456, 475, 
	455, 456, 476, 455, 456, 477, 455, 456, 
	478, 455, 479, 456, 470, 455, 470, 456, 
	455, 456, 480, 455, 456, 481, 455, 456, 
	482, 455, 456, 483, 455, 456, 484, 455, 
	456, 474, 455, 485, 486, 487, 0, 488, 
	0, 489, 0, 490, 0, 491, 0, 492, 
	0, 493, 494, 0, 347, 0, 346, 0, 
	495, 0, 496, 0, 143, 0, 497, 0, 
	498, 0, 499, 0, 500, 0, 501, 0, 
	502, 0, 503, 0, 504, 0, 505, 0, 
	506, 0, 507, 0, 508, 0, 509, 0, 
	510, 0, 511, 0, 496, 0, 512, 0, 
	513, 514, 0, 515, 0, 516, 0, 63, 
	63, 0, 517, 0, 62, 0, 518, 519, 
	518, 0, 522, 521, 523, 524, 521, 520, 
	0, 526, 527, 525, 0, 526, 525, 522, 
	528, 526, 527, 528, 525, 522, 529, 530, 
	531, 532, 533, 534, 535, 536, 533, 537, 
	538, 539, 540, 541, 542, 543, 529, 0, 
	81, 544, 80, 81, 545, 80, 81, 546, 
	547, 80, 81, 548, 80, 81, 116, 80, 
	81, 549, 80, 81, 115, 80, 81, 550, 
	80, 81, 551, 80, 81, 552, 80, 553, 
	81, 113, 80, 113, 81, 80, 81, 554, 
	80, 81, 555, 556, 80, 81, 557, 80, 
	81, 558, 80, 81, 117, 80, 81, 559, 
	80, 81, 560, 80, 81, 558, 80, 81, 
	561, 562, 80, 81, 563, 80, 81, 564, 
	80, 81, 559, 80, 81, 565, 80, 81, 
	566, 80, 81, 567, 80, 81, 568, 80, 
	81, 118, 117, 80, 81, 569, 570, 571, 
	80, 81, 572, 80, 81, 573, 80, 81, 
	574, 80, 81, 575, 80, 81, 576, 80, 
	81, 577, 117, 80, 81, 117, 80, 81, 
	578, 80, 81, 558, 80, 81, 579, 80, 
	81, 580, 80, 81, 581, 80, 81, 582, 
	80, 81, 583, 80, 81, 584, 80, 81, 
	585, 80, 81, 586, 80, 81, 587, 80, 
	81, 588, 80, 81, 589, 80, 81, 590, 
	80, 81, 591, 80, 81, 592, 80, 81, 
	593, 80, 81, 558, 80, 594, 0, 1, 
	0, 595, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 36, 82, 256, 261, 272, 410, 438, 
	445, 506, 4, 5, 6, 7, 7, 7, 
	8, 7, 7, 7, 8, 9, 10, 11, 
	2, 11, 12, 2, 13, 15, 16, 17, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 508, 29, 30, 30, 2, 13, 
	32, 33, 2, 32, 31, 33, 35, 28, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	51, 52, 52, 2, 53, 67, 451, 458, 
	463, 471, 480, 54, 55, 56, 57, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	2, 68, 69, 70, 71, 72, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 2, 
	2, 3, 12, 14, 28, 31, 34, 36, 
	82, 256, 261, 272, 410, 438, 445, 83, 
	85, 84, 86, 87, 160, 88, 89, 90, 
	91, 92, 93, 92, 93, 93, 2, 94, 
	108, 109, 111, 125, 128, 133, 141, 146, 
	153, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 2, 81, 
	110, 108, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 126, 
	127, 129, 130, 131, 132, 134, 136, 135, 
	137, 138, 139, 140, 142, 143, 144, 145, 
	147, 148, 149, 150, 151, 152, 154, 155, 
	158, 156, 157, 159, 161, 162, 163, 164, 
	165, 166, 167, 166, 167, 167, 2, 168, 
	182, 183, 185, 199, 206, 211, 219, 224, 
	249, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 2, 81, 
	184, 182, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 200, 
	202, 201, 203, 204, 205, 207, 208, 209, 
	210, 212, 214, 213, 215, 216, 217, 218, 
	220, 221, 222, 223, 225, 231, 233, 226, 
	227, 228, 229, 230, 232, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 250, 251, 254, 252, 
	253, 255, 257, 258, 259, 260, 262, 264, 
	263, 265, 268, 266, 267, 269, 270, 271, 
	273, 278, 274, 275, 276, 277, 279, 280, 
	281, 282, 283, 381, 284, 285, 284, 285, 
	285, 2, 286, 300, 301, 303, 317, 326, 
	331, 341, 349, 374, 287, 288, 289, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 2, 81, 302, 300, 304, 305, 306, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 318, 320, 319, 321, 322, 324, 
	323, 325, 327, 328, 329, 330, 332, 334, 
	333, 335, 338, 336, 337, 339, 340, 342, 
	345, 343, 344, 346, 347, 348, 350, 356, 
	358, 351, 352, 353, 354, 355, 357, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 375, 376, 
	379, 377, 378, 380, 382, 383, 384, 383, 
	384, 384, 2, 385, 399, 404, 386, 387, 
	388, 389, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 81, 400, 401, 402, 403, 
	405, 406, 407, 408, 409, 411, 419, 422, 
	412, 413, 414, 415, 416, 417, 418, 420, 
	421, 423, 424, 425, 426, 427, 428, 429, 
	430, 431, 432, 433, 434, 435, 436, 437, 
	439, 440, 443, 441, 442, 444, 445, 446, 
	447, 449, 450, 448, 446, 447, 448, 446, 
	449, 450, 3, 12, 14, 28, 31, 34, 
	36, 82, 256, 261, 272, 410, 438, 445, 
	452, 453, 454, 456, 455, 457, 459, 460, 
	461, 462, 464, 465, 468, 466, 467, 469, 
	470, 472, 475, 473, 474, 476, 477, 478, 
	479, 481, 488, 490, 482, 483, 484, 485, 
	486, 487, 489, 491, 492, 493, 494, 495, 
	496, 497, 498, 499, 500, 501, 502, 503, 
	504, 505, 507, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 23, 107, 23, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 62, 29, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 9, 27, 
	115, 53, 50, 27, 56, 50, 56, 56, 
	56, 56, 56, 56, 56, 56, 59, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 71, 29, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 65, 29, 
	77, 77, 77, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 68, 29, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 33, 47, 33, 80, 0, 0, 35, 
	0, 0, 86, 83, 37, 89, 83, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 508;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 911 "js/lib/gherkin/lexer/sr_latn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
  
/* line 918 "js/lib/gherkin/lexer/sr_latn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1134 "js/lib/gherkin/lexer/sr_latn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1173 "js/lib/gherkin/lexer/sr_latn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

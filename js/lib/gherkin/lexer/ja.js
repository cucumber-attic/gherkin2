
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ja.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 16, 19, 23, 24, 25, 26, 
	27, 29, 44, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 62, 64, 66, 68, 
	70, 72, 74, 76, 78, 80, 82, 84, 
	86, 88, 90, 92, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 120, 131, 134, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	178, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 236, 238, 240, 242, 
	244, 246, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 335, 337, 339, 
	341, 343, 344, 345, 346, 347, 348, 349, 
	350, 351, 363, 367, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 404, 406, 408, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 432, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 485, 487, 489, 492, 494, 
	496, 498, 500, 502, 505, 507, 509, 511, 
	513, 515, 517, 519, 521, 523, 525, 527, 
	529, 531, 533, 535, 537, 539, 541, 543, 
	545, 547, 549, 551, 553, 555, 557, 559, 
	561, 563, 565, 567, 569, 571, 573, 575, 
	577, 579, 581, 583, 585, 587, 589, 591, 
	593, 595, 597, 599, 601, 602, 603, 607, 
	612, 617, 622, 627, 631, 635, 637, 638, 
	639, 640, 641, 642, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 652, 653, 658, 
	665, 670, 674, 680, 683, 685, 691, 706, 
	708, 710, 712, 714, 716, 717, 718, 719, 
	720, 721, 722, 723, 724, 725, 726, 727, 
	728, 731, 732, 733, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	746, 747, 748, 749, 751, 753, 754, 755, 
	756, 757, 758, 759, 760, 761, 762, 763, 
	764, 765, 766, 767, 768, 769, 770, 771, 
	772, 784, 788, 793, 795, 797, 799, 801, 
	803, 805, 807, 809, 811, 813, 815, 817, 
	819, 821, 823, 825, 827, 829, 832, 834, 
	836, 838, 840, 842, 844, 846, 848, 850, 
	852, 854, 856, 858, 860, 862, 864, 866, 
	868, 870, 872, 874, 876, 878, 880, 882, 
	884, 886, 888, 890, 892, 894, 896, 898, 
	900, 902, 904, 906, 908, 910, 912, 914, 
	916, 918, 920, 922, 924, 926, 928, 930, 
	932, 933, 934, 935, 936, 937, 938, 939, 
	940, 941, 942, 944, 945, 946, 947, 948, 
	949, 950, 951, 964, 968, 973, 975, 977, 
	979, 981, 983, 985, 987, 989, 991, 993, 
	995, 997, 999, 1001, 1003, 1005, 1007, 1009, 
	1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 
	1028, 1030, 1033, 1036, 1038, 1040, 1042, 1044, 
	1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 
	1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 
	1078, 1080, 1082, 1084, 1086, 1088, 1090, 1093, 
	1095, 1097, 1099, 1101, 1103, 1106, 1108, 1110, 
	1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 
	1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 
	1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 
	1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 
	1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 
	1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 
	1208, 1210, 1212, 1214, 1215, 1216, 1217, 1218, 
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 
	1235, 1236, 1237
];

const _lexer_trans_keys = [
	-29, -28, -27, -26, -24, 10, 32, 34, 
	35, 37, 42, 64, 124, 239, 9, 13, 
	-127, -126, -125, -117, -105, -97, -86, -29, 
	-127, -92, 10, 10, 13, -29, -28, -27, 
	-26, -24, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -67, -66, -122, -29, 
	-127, -105, -117, 58, 10, 10, -29, -26, 
	10, 32, 35, 124, 9, 13, -125, 10, 
	-107, 10, -29, 10, -126, 10, -93, 10, 
	-29, 10, -125, 10, -68, 10, -29, 10, 
	-125, 10, -127, 10, -29, 10, -125, 10, 
	-93, 10, 10, 58, -29, -28, -27, -26, 
	-24, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -119, -115, -26, -113, -112, 
	-87, -97, -24, -125, -67, 58, 10, 10, 
	-29, -28, -26, -24, 10, 32, 35, 37, 
	64, 9, 13, -126, -125, 10, -75, -73, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -85, 10, 10, 58, -29, 10, -125, 
	10, -118, 10, -29, 10, -125, 10, -86, 
	10, -29, 10, -126, 10, -86, 10, -29, 
	10, 58, -126, -125, 10, -94, 10, -29, 
	10, -126, 10, -90, 10, -29, 10, -125, 
	10, -120, 10, -29, 10, -125, 10, -87, 
	10, -29, 10, -126, 10, -92, 10, -29, 
	10, -125, 10, -77, 10, -122, 10, -29, 
	10, -125, 10, -77, 10, -29, 10, -125, 
	10, -105, 10, -29, 10, -125, 10, -84, 
	10, -29, 10, 58, -125, 10, -68, 10, 
	-29, 10, -125, 10, -120, 10, -122, -107, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -84, 10, -29, 10, -126, 10, -93, 
	10, -29, 10, -125, 10, -68, 10, -29, 
	10, -125, 10, -127, 10, -29, 10, -125, 
	10, -93, 10, -66, 10, -117, 10, -87, 
	10, -97, 10, -24, 10, -125, 10, -67, 
	10, -125, 10, -116, 10, -26, 10, -103, 
	10, -81, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -125, 
	-116, -26, -103, -81, 58, 10, 10, -29, 
	-28, -27, -26, 10, 32, 35, 37, 42, 
	64, 9, 13, -127, -126, -125, 10, -117, 
	-105, -97, -86, 10, -29, 10, -127, 10, 
	-92, 10, -29, 10, -127, 10, -117, 10, 
	-29, 10, -127, 10, -105, 10, -29, 10, 
	-127, 10, -96, 10, -29, 10, -126, 10, 
	-119, 10, -29, 10, -127, 10, -80, 10, 
	-126, -73, 10, -29, 10, -125, 10, -118, 
	10, -29, 10, -125, 10, -86, 10, -29, 
	10, -126, 10, -86, 10, -29, 10, 58, 
	-126, -125, 10, -94, 10, -29, 10, -126, 
	10, -90, 10, -29, 10, -125, 10, -120, 
	10, -29, 10, -125, 10, -87, 10, -29, 
	10, -126, 10, -92, 10, -29, 10, -125, 
	10, -77, 10, 10, 58, -122, 10, -29, 
	10, -125, 10, -77, 10, -29, 10, -125, 
	10, -105, 10, -29, 10, -125, 10, -84, 
	10, -29, 10, 58, -125, 10, -68, 10, 
	-29, 10, -125, 10, -120, 10, -122, -107, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -84, 10, -29, 10, -126, 10, -93, 
	10, -29, 10, -125, 10, -68, 10, -29, 
	10, -125, 10, -127, 10, -29, 10, -125, 
	10, -93, 10, -67, 10, -122, 10, -119, 
	10, -115, 10, -26, 10, -113, 10, -112, 
	10, -87, 10, -97, 10, -24, 10, -125, 
	10, -67, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, -29, -28, -27, -26, -24, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -87, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, -29, -127, -117, -29, 
	-127, -96, -29, -126, -119, -29, -127, -80, 
	-126, -75, -73, -29, -125, -77, -29, -125, 
	-105, -29, -125, -85, -29, -125, -118, -29, 
	-125, -86, -29, -126, -86, -29, 58, -126, 
	-125, -94, -29, -126, -90, -29, -125, -120, 
	-29, -125, -87, -29, -126, -92, -29, -125, 
	-77, 58, 10, 10, -29, -28, -27, -26, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-127, -126, -125, 10, -117, -105, -97, -86, 
	10, -29, 10, -127, 10, -92, 10, -29, 
	10, -127, 10, -117, 10, -29, 10, -127, 
	10, -105, 10, -29, 10, -127, 10, -96, 
	10, -29, 10, -126, 10, -119, 10, -29, 
	10, -127, 10, -80, 10, -126, -73, 10, 
	-29, 10, -125, 10, -118, 10, -29, 10, 
	-125, 10, -86, 10, -29, 10, -126, 10, 
	-86, 10, 10, 58, -107, 10, -29, 10, 
	-126, 10, -93, 10, -29, 10, -125, 10, 
	-68, 10, -29, 10, -125, 10, -127, 10, 
	-29, 10, -125, 10, -93, 10, -67, 10, 
	-122, 10, -119, 10, -115, 10, -26, 10, 
	-113, 10, -112, 10, -87, 10, -97, 10, 
	-24, 10, -125, 10, -67, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -122, -29, -125, -77, 
	-29, -125, -105, -29, -125, -84, -29, 58, 
	-125, -68, -29, -125, -120, 10, 10, -29, 
	-28, -27, -26, -24, 10, 32, 35, 37, 
	42, 64, 9, 13, -127, -126, -125, 10, 
	-117, -105, -97, -86, 10, -29, 10, -127, 
	10, -92, 10, -29, 10, -127, 10, -117, 
	10, -29, 10, -127, 10, -105, 10, -29, 
	10, -127, 10, -96, 10, -29, 10, -126, 
	10, -119, 10, -29, 10, -127, 10, -80, 
	10, -126, -73, 10, -29, 10, -125, 10, 
	-118, 10, -29, 10, -125, 10, -86, 10, 
	-29, 10, -126, 10, -86, 10, -29, 10, 
	58, -126, -125, 10, -94, 10, -29, 10, 
	-126, 10, -90, 10, -29, 10, -125, 10, 
	-120, 10, -29, 10, -125, 10, -87, 10, 
	-29, 10, -126, 10, -92, 10, -29, 10, 
	-125, 10, -77, 10, 10, 58, -122, 10, 
	-29, 10, -125, 10, -77, 10, -29, 10, 
	-125, 10, -105, 10, -29, 10, -125, 10, 
	-84, 10, -29, 10, 58, -125, 10, -68, 
	10, -29, 10, -125, 10, -120, 10, -122, 
	-107, 10, -29, 10, -125, 10, -77, 10, 
	-29, 10, -125, 10, -105, 10, -29, 10, 
	-125, 10, -84, 10, -29, 10, -126, 10, 
	-93, 10, -29, 10, -125, 10, -68, 10, 
	-29, 10, -125, 10, -127, 10, -29, 10, 
	-125, 10, -93, 10, -67, 10, -122, 10, 
	-119, 10, -115, 10, -26, 10, -113, 10, 
	-112, 10, -87, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, -125, 10, -116, 10, 
	-26, 10, -103, 10, -81, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -122, -107, -29, -125, 
	-77, -29, -125, -105, -29, -125, -84, -29, 
	-126, -93, -29, -125, -68, -29, -125, -127, 
	-29, -125, -93, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 14, 3, 4, 1, 1, 1, 1, 
	2, 13, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 4, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 5, 
	3, 2, 4, 3, 2, 4, 13, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 4, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 11, 4, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 16, 20, 25, 27, 29, 31, 
	33, 36, 51, 54, 56, 58, 60, 62, 
	64, 66, 68, 70, 78, 81, 84, 87, 
	90, 93, 96, 99, 102, 105, 108, 111, 
	114, 117, 120, 123, 138, 140, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 175, 179, 183, 186, 189, 192, 
	195, 198, 201, 204, 207, 210, 213, 216, 
	219, 222, 225, 228, 231, 234, 237, 240, 
	244, 248, 251, 254, 257, 260, 263, 266, 
	269, 272, 275, 278, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 311, 314, 
	317, 320, 323, 326, 330, 333, 336, 339, 
	342, 345, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	439, 442, 445, 448, 451, 454, 457, 460, 
	463, 466, 469, 472, 475, 478, 481, 484, 
	487, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 518, 523, 529, 532, 535, 538, 
	541, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 571, 574, 577, 580, 583, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 618, 622, 625, 628, 631, 634, 637, 
	640, 643, 646, 649, 652, 655, 658, 661, 
	664, 667, 670, 673, 676, 679, 682, 685, 
	688, 691, 694, 697, 700, 703, 707, 710, 
	713, 716, 719, 722, 726, 729, 732, 735, 
	738, 741, 744, 747, 750, 753, 756, 759, 
	762, 765, 768, 771, 774, 777, 780, 783, 
	786, 789, 792, 795, 798, 801, 804, 807, 
	810, 813, 816, 819, 822, 825, 828, 831, 
	834, 837, 840, 843, 846, 849, 852, 855, 
	858, 861, 864, 867, 870, 872, 874, 878, 
	883, 888, 893, 898, 902, 906, 909, 911, 
	913, 915, 917, 919, 921, 923, 925, 927, 
	929, 931, 933, 935, 937, 939, 941, 946, 
	953, 958, 962, 968, 972, 975, 981, 996, 
	999, 1002, 1005, 1008, 1011, 1013, 1015, 1017, 
	1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 
	1035, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 
	1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 
	1069, 1071, 1073, 1075, 1078, 1081, 1083, 1085, 
	1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 
	1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 
	1119, 1131, 1136, 1142, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 
	1181, 1184, 1187, 1190, 1193, 1196, 1200, 1203, 
	1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 
	1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 
	1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 
	1278, 1281, 1284, 1287, 1290, 1293, 1296, 1299, 
	1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 
	1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 
	1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 
	1366, 1368, 1370, 1373, 1375, 1377, 1379, 1381, 
	1383, 1385, 1387, 1400, 1405, 1411, 1414, 1417, 
	1420, 1423, 1426, 1429, 1432, 1435, 1438, 1441, 
	1444, 1447, 1450, 1453, 1456, 1459, 1462, 1465, 
	1469, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 
	1493, 1496, 1500, 1504, 1507, 1510, 1513, 1516, 
	1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 
	1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 
	1567, 1570, 1573, 1576, 1579, 1582, 1585, 1589, 
	1592, 1595, 1598, 1601, 1604, 1608, 1611, 1614, 
	1617, 1620, 1623, 1626, 1629, 1632, 1635, 1638, 
	1641, 1644, 1647, 1650, 1653, 1656, 1659, 1662, 
	1665, 1668, 1671, 1674, 1677, 1680, 1683, 1686, 
	1689, 1692, 1695, 1698, 1701, 1704, 1707, 1710, 
	1713, 1716, 1719, 1722, 1725, 1728, 1731, 1734, 
	1737, 1740, 1743, 1746, 1749, 1752, 1755, 1758, 
	1761, 1764, 1767, 1770, 1772, 1774, 1776, 1778, 
	1780, 1782, 1784, 1786, 1788, 1790, 1792, 1794, 
	1796, 1798, 1800, 1802, 1804, 1806, 1808, 1810, 
	1812, 1814, 1816
];

const _lexer_indicies = [
	1, 2, 3, 4, 5, 7, 6, 8, 
	9, 10, 11, 12, 13, 14, 6, 0, 
	15, 16, 17, 0, 18, 19, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 0, 
	25, 27, 28, 26, 1, 2, 3, 4, 
	5, 7, 6, 8, 9, 10, 11, 12, 
	13, 6, 0, 29, 30, 0, 31, 0, 
	32, 0, 33, 0, 24, 0, 34, 0, 
	35, 0, 37, 36, 39, 38, 40, 41, 
	39, 42, 43, 43, 42, 38, 44, 39, 
	38, 45, 39, 38, 46, 39, 38, 47, 
	39, 38, 48, 39, 38, 49, 39, 38, 
	50, 39, 38, 51, 39, 38, 52, 39, 
	38, 53, 39, 38, 54, 39, 38, 55, 
	39, 38, 56, 39, 38, 57, 39, 38, 
	39, 58, 38, 59, 60, 61, 62, 63, 
	65, 64, 66, 67, 68, 69, 70, 71, 
	64, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 24, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	83, 82, 85, 84, 86, 87, 88, 89, 
	85, 90, 91, 92, 91, 90, 84, 93, 
	94, 85, 84, 95, 96, 85, 84, 97, 
	85, 84, 98, 85, 84, 99, 85, 84, 
	100, 85, 84, 101, 85, 84, 102, 85, 
	84, 103, 85, 84, 104, 85, 84, 105, 
	85, 84, 85, 106, 84, 107, 85, 84, 
	108, 85, 84, 109, 85, 84, 110, 85, 
	84, 111, 85, 84, 112, 85, 84, 113, 
	85, 84, 114, 85, 84, 115, 85, 84, 
	116, 85, 106, 84, 117, 118, 85, 84, 
	119, 85, 84, 120, 85, 84, 121, 85, 
	84, 122, 85, 84, 123, 85, 84, 124, 
	85, 84, 125, 85, 84, 126, 85, 84, 
	127, 85, 84, 128, 85, 84, 129, 85, 
	84, 130, 85, 84, 131, 85, 84, 132, 
	85, 84, 133, 85, 84, 105, 85, 84, 
	134, 85, 84, 135, 85, 84, 136, 85, 
	84, 137, 85, 84, 138, 85, 84, 139, 
	85, 84, 140, 85, 84, 141, 85, 84, 
	142, 85, 84, 143, 85, 84, 144, 85, 
	106, 84, 145, 85, 84, 146, 85, 84, 
	147, 85, 84, 148, 85, 84, 105, 85, 
	84, 149, 150, 85, 84, 151, 85, 84, 
	152, 85, 84, 153, 85, 84, 154, 85, 
	84, 155, 85, 84, 156, 85, 84, 157, 
	85, 84, 158, 85, 84, 105, 85, 84, 
	159, 85, 84, 160, 85, 84, 161, 85, 
	84, 162, 85, 84, 163, 85, 84, 164, 
	85, 84, 165, 85, 84, 166, 85, 84, 
	167, 85, 84, 168, 85, 84, 169, 85, 
	84, 105, 85, 84, 170, 85, 84, 105, 
	85, 84, 171, 85, 84, 172, 85, 84, 
	173, 85, 84, 174, 85, 84, 105, 85, 
	84, 175, 85, 84, 176, 85, 84, 177, 
	85, 84, 178, 85, 84, 105, 85, 84, 
	85, 179, 84, 85, 180, 84, 85, 181, 
	84, 85, 182, 84, 85, 183, 84, 85, 
	184, 84, 85, 185, 84, 85, 186, 84, 
	85, 187, 84, 85, 188, 84, 85, 189, 
	84, 85, 190, 84, 85, 191, 84, 85, 
	192, 84, 193, 0, 194, 0, 195, 0, 
	196, 0, 197, 0, 198, 0, 200, 199, 
	202, 201, 203, 204, 205, 206, 202, 207, 
	208, 209, 210, 208, 207, 201, 211, 212, 
	213, 202, 201, 214, 215, 216, 217, 202, 
	201, 218, 202, 201, 219, 202, 201, 220, 
	202, 201, 221, 202, 201, 222, 202, 201, 
	223, 202, 201, 224, 202, 201, 225, 202, 
	201, 220, 202, 201, 226, 202, 201, 227, 
	202, 201, 223, 202, 201, 228, 202, 201, 
	229, 202, 201, 230, 202, 201, 231, 202, 
	201, 232, 202, 201, 220, 202, 201, 223, 
	233, 202, 201, 234, 202, 201, 235, 202, 
	201, 236, 202, 201, 237, 202, 201, 238, 
	202, 201, 239, 202, 201, 240, 202, 201, 
	241, 202, 201, 242, 202, 201, 243, 202, 
	220, 201, 244, 245, 202, 201, 246, 202, 
	201, 247, 202, 201, 248, 202, 201, 249, 
	202, 201, 250, 202, 201, 251, 202, 201, 
	252, 202, 201, 253, 202, 201, 254, 202, 
	201, 255, 202, 201, 256, 202, 201, 257, 
	202, 201, 258, 202, 201, 259, 202, 201, 
	260, 202, 201, 261, 202, 201, 202, 220, 
	201, 262, 202, 201, 263, 202, 201, 264, 
	202, 201, 265, 202, 201, 266, 202, 201, 
	267, 202, 201, 268, 202, 201, 269, 202, 
	201, 270, 202, 201, 271, 202, 201, 272, 
	202, 220, 201, 273, 202, 201, 274, 202, 
	201, 275, 202, 201, 276, 202, 201, 261, 
	202, 201, 277, 278, 202, 201, 279, 202, 
	201, 280, 202, 201, 281, 202, 201, 282, 
	202, 201, 283, 202, 201, 284, 202, 201, 
	285, 202, 201, 286, 202, 201, 261, 202, 
	201, 287, 202, 201, 288, 202, 201, 289, 
	202, 201, 290, 202, 201, 291, 202, 201, 
	292, 202, 201, 293, 202, 201, 294, 202, 
	201, 295, 202, 201, 296, 202, 201, 297, 
	202, 201, 261, 202, 201, 298, 202, 201, 
	223, 202, 201, 299, 202, 201, 300, 202, 
	201, 301, 202, 201, 302, 202, 201, 220, 
	202, 201, 303, 202, 201, 304, 202, 201, 
	305, 202, 201, 306, 202, 201, 261, 202, 
	201, 202, 307, 201, 202, 308, 201, 202, 
	309, 201, 202, 310, 201, 202, 311, 201, 
	202, 312, 201, 202, 313, 201, 202, 314, 
	201, 202, 315, 201, 202, 316, 201, 202, 
	317, 201, 202, 318, 201, 202, 319, 201, 
	202, 320, 201, 202, 220, 201, 321, 0, 
	322, 0, 323, 322, 322, 0, 326, 325, 
	327, 325, 324, 330, 329, 331, 329, 328, 
	330, 329, 332, 329, 328, 330, 329, 333, 
	329, 328, 335, 334, 334, 0, 7, 336, 
	336, 0, 338, 339, 337, 7, 0, 340, 
	0, 341, 0, 342, 0, 343, 0, 344, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 24, 0, 0, 0, 0, 
	0, 354, 355, 356, 355, 355, 358, 357, 
	354, 7, 359, 12, 359, 0, 360, 361, 
	360, 0, 364, 363, 365, 366, 363, 362, 
	0, 368, 369, 367, 0, 368, 367, 364, 
	370, 368, 369, 370, 367, 371, 372, 373, 
	374, 375, 364, 376, 377, 378, 379, 380, 
	381, 382, 376, 0, 383, 39, 38, 384, 
	39, 38, 385, 39, 38, 386, 39, 38, 
	57, 39, 38, 387, 0, 388, 0, 31, 
	0, 389, 0, 390, 0, 31, 0, 391, 
	0, 392, 0, 393, 0, 394, 0, 395, 
	0, 24, 0, 31, 396, 397, 0, 398, 
	0, 399, 0, 400, 0, 401, 0, 402, 
	0, 403, 0, 404, 0, 405, 0, 34, 
	0, 406, 0, 407, 0, 408, 0, 409, 
	0, 410, 0, 411, 0, 412, 0, 413, 
	0, 414, 0, 415, 416, 0, 417, 418, 
	0, 419, 0, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 0, 429, 0, 430, 
	0, 431, 0, 432, 0, 433, 0, 434, 
	0, 435, 0, 437, 436, 439, 438, 440, 
	441, 442, 443, 439, 444, 445, 446, 447, 
	445, 444, 438, 448, 449, 450, 439, 438, 
	451, 452, 453, 454, 439, 438, 455, 439, 
	438, 456, 439, 438, 457, 439, 438, 458, 
	439, 438, 459, 439, 438, 460, 439, 438, 
	461, 439, 438, 462, 439, 438, 457, 439, 
	438, 463, 439, 438, 464, 439, 438, 460, 
	439, 438, 465, 439, 438, 466, 439, 438, 
	467, 439, 438, 468, 439, 438, 469, 439, 
	438, 457, 439, 438, 460, 470, 439, 438, 
	471, 439, 438, 472, 439, 438, 473, 439, 
	438, 474, 439, 438, 475, 439, 438, 476, 
	439, 438, 477, 439, 438, 478, 439, 438, 
	479, 439, 438, 439, 457, 438, 480, 439, 
	438, 481, 439, 438, 482, 439, 438, 483, 
	439, 438, 484, 439, 438, 485, 439, 438, 
	486, 439, 438, 487, 439, 438, 488, 439, 
	438, 489, 439, 438, 490, 439, 438, 491, 
	439, 438, 479, 439, 438, 492, 439, 438, 
	460, 439, 438, 493, 439, 438, 494, 439, 
	438, 495, 439, 438, 496, 439, 438, 457, 
	439, 438, 497, 439, 438, 498, 439, 438, 
	499, 439, 438, 500, 439, 438, 479, 439, 
	438, 439, 501, 438, 439, 502, 438, 439, 
	503, 438, 439, 504, 438, 439, 505, 438, 
	439, 506, 438, 439, 507, 438, 439, 508, 
	438, 439, 509, 438, 439, 510, 438, 439, 
	511, 438, 439, 512, 438, 439, 513, 438, 
	439, 514, 438, 439, 457, 438, 515, 0, 
	516, 0, 517, 0, 518, 0, 519, 0, 
	520, 0, 521, 0, 522, 0, 523, 0, 
	524, 0, 525, 435, 0, 526, 0, 527, 
	0, 528, 0, 529, 0, 434, 0, 531, 
	530, 533, 532, 534, 535, 536, 537, 538, 
	533, 539, 540, 541, 542, 540, 539, 532, 
	543, 544, 545, 533, 532, 546, 547, 548, 
	549, 533, 532, 550, 533, 532, 551, 533, 
	532, 552, 533, 532, 553, 533, 532, 554, 
	533, 532, 555, 533, 532, 556, 533, 532, 
	557, 533, 532, 552, 533, 532, 558, 533, 
	532, 559, 533, 532, 555, 533, 532, 560, 
	533, 532, 561, 533, 532, 562, 533, 532, 
	563, 533, 532, 564, 533, 532, 552, 533, 
	532, 555, 565, 533, 532, 566, 533, 532, 
	567, 533, 532, 568, 533, 532, 569, 533, 
	532, 570, 533, 532, 571, 533, 532, 572, 
	533, 532, 573, 533, 532, 574, 533, 532, 
	575, 533, 552, 532, 576, 577, 533, 532, 
	578, 533, 532, 579, 533, 532, 580, 533, 
	532, 581, 533, 532, 582, 533, 532, 583, 
	533, 532, 584, 533, 532, 585, 533, 532, 
	586, 533, 532, 587, 533, 532, 588, 533, 
	532, 589, 533, 532, 590, 533, 532, 591, 
	533, 532, 592, 533, 532, 593, 533, 532, 
	533, 552, 532, 594, 533, 532, 595, 533, 
	532, 596, 533, 532, 597, 533, 532, 598, 
	533, 532, 599, 533, 532, 600, 533, 532, 
	601, 533, 532, 602, 533, 532, 603, 533, 
	532, 604, 533, 552, 532, 605, 533, 532, 
	606, 533, 532, 607, 533, 532, 608, 533, 
	532, 593, 533, 532, 609, 610, 533, 532, 
	611, 533, 532, 612, 533, 532, 613, 533, 
	532, 614, 533, 532, 615, 533, 532, 616, 
	533, 532, 617, 533, 532, 618, 533, 532, 
	593, 533, 532, 619, 533, 532, 620, 533, 
	532, 621, 533, 532, 622, 533, 532, 623, 
	533, 532, 624, 533, 532, 625, 533, 532, 
	626, 533, 532, 627, 533, 532, 628, 533, 
	532, 629, 533, 532, 593, 533, 532, 630, 
	533, 532, 555, 533, 532, 631, 533, 532, 
	632, 533, 532, 633, 533, 532, 634, 533, 
	532, 552, 533, 532, 635, 533, 532, 636, 
	533, 532, 637, 533, 532, 638, 533, 532, 
	593, 533, 532, 639, 533, 532, 640, 533, 
	532, 641, 533, 532, 642, 533, 532, 593, 
	533, 532, 533, 643, 532, 533, 644, 532, 
	533, 645, 532, 533, 646, 532, 533, 647, 
	532, 533, 648, 532, 533, 649, 532, 533, 
	650, 532, 533, 651, 532, 533, 652, 532, 
	533, 653, 532, 533, 654, 532, 533, 655, 
	532, 533, 656, 532, 533, 552, 532, 657, 
	658, 0, 659, 0, 660, 0, 661, 0, 
	662, 0, 663, 0, 664, 0, 665, 0, 
	666, 0, 434, 0, 667, 0, 668, 0, 
	669, 0, 670, 0, 671, 0, 672, 0, 
	673, 0, 674, 0, 675, 0, 676, 0, 
	677, 0, 80, 0, 678, 0, 6, 0, 
	679, 0
];

const _lexer_trans_targs = [
	0, 2, 10, 36, 41, 153, 9, 9, 
	276, 285, 287, 301, 302, 305, 600, 3, 
	328, 578, 4, 316, 319, 322, 5, 6, 
	7, 8, 8, 9, 286, 11, 15, 12, 
	13, 14, 16, 17, 18, 19, 18, 19, 
	20, 311, 19, 9, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 2, 10, 36, 41, 153, 
	9, 9, 276, 285, 287, 301, 302, 305, 
	37, 38, 39, 40, 42, 43, 44, 45, 
	46, 47, 48, 49, 48, 49, 50, 127, 
	129, 134, 49, 9, 139, 51, 105, 52, 
	62, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 35, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 89, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 90, 91, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 106, 115, 107, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 128, 130, 131, 132, 133, 135, 
	136, 137, 138, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	9, 154, 155, 156, 157, 158, 159, 160, 
	161, 160, 161, 162, 249, 251, 256, 161, 
	9, 261, 275, 163, 182, 227, 164, 167, 
	173, 176, 165, 166, 35, 168, 169, 170, 
	171, 172, 174, 175, 177, 178, 179, 180, 
	181, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 211, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 212, 213, 
	214, 215, 216, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 228, 237, 229, 
	230, 231, 232, 233, 234, 235, 236, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 248, 250, 252, 253, 254, 255, 257, 
	258, 259, 260, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 274, 
	9, 277, 278, 279, 280, 280, 280, 281, 
	280, 280, 280, 281, 282, 283, 284, 9, 
	284, 285, 9, 286, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 299, 
	300, 602, 303, 304, 9, 303, 302, 304, 
	305, 306, 307, 309, 310, 308, 306, 307, 
	308, 306, 309, 2, 10, 36, 41, 153, 
	310, 276, 285, 287, 301, 302, 305, 312, 
	313, 314, 315, 317, 318, 320, 321, 323, 
	324, 325, 326, 327, 329, 338, 330, 331, 
	332, 333, 334, 335, 336, 337, 339, 340, 
	341, 342, 343, 344, 345, 346, 347, 348, 
	456, 349, 440, 350, 351, 352, 353, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	363, 364, 365, 366, 367, 368, 367, 368, 
	369, 413, 415, 420, 368, 9, 425, 439, 
	370, 389, 400, 371, 374, 380, 383, 372, 
	373, 35, 375, 376, 377, 378, 379, 381, 
	382, 384, 385, 386, 387, 388, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	401, 402, 403, 404, 405, 406, 407, 408, 
	409, 410, 411, 412, 414, 416, 417, 418, 
	419, 421, 422, 423, 424, 426, 427, 428, 
	429, 430, 431, 432, 433, 434, 435, 436, 
	437, 438, 9, 441, 442, 443, 444, 445, 
	446, 447, 448, 449, 450, 451, 452, 453, 
	454, 455, 457, 458, 457, 458, 459, 546, 
	548, 553, 558, 458, 9, 563, 577, 460, 
	479, 524, 461, 464, 470, 473, 462, 463, 
	35, 465, 466, 467, 468, 469, 471, 472, 
	474, 475, 476, 477, 478, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	491, 508, 492, 493, 494, 495, 496, 497, 
	498, 499, 500, 501, 502, 503, 504, 505, 
	506, 507, 509, 510, 511, 512, 513, 514, 
	515, 516, 517, 518, 519, 520, 521, 522, 
	523, 525, 534, 526, 527, 528, 529, 530, 
	531, 532, 533, 535, 536, 537, 538, 539, 
	540, 541, 542, 543, 544, 545, 547, 549, 
	550, 551, 552, 554, 555, 556, 557, 559, 
	560, 561, 562, 564, 565, 566, 567, 568, 
	569, 570, 571, 572, 573, 574, 575, 576, 
	9, 579, 588, 580, 581, 582, 583, 584, 
	585, 586, 587, 589, 590, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 601, 0
];

const _lexer_trans_actions = [
	39, 25, 25, 25, 25, 25, 0, 47, 
	3, 1, 0, 25, 1, 31, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 0, 99, 19, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 56, 56, 56, 56, 56, 
	27, 115, 53, 50, 27, 56, 50, 59, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 77, 
	77, 77, 0, 62, 29, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 77, 77, 77, 77, 0, 
	65, 29, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 107, 23, 44, 0, 
	0, 0, 33, 33, 47, 33, 80, 0, 
	0, 35, 0, 89, 89, 89, 89, 89, 
	0, 86, 83, 37, 89, 83, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 77, 77, 0, 71, 29, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 77, 
	77, 77, 77, 0, 68, 29, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 602;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 1035 "js/lib/gherkin/lexer/ja.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */
  
/* line 1042 "js/lib/gherkin/lexer/ja.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1258 "js/lib/gherkin/lexer/ja.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1297 "js/lib/gherkin/lexer/ja.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

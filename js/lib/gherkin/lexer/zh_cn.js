
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/zh_cn.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 15, 17, 18, 19, 20, 21, 
	22, 24, 38, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 63, 
	65, 67, 69, 71, 73, 75, 89, 91, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 114, 116, 118, 120, 122, 
	124, 129, 131, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 221, 
	222, 223, 224, 225, 226, 227, 231, 236, 
	241, 246, 251, 255, 259, 261, 262, 263, 
	264, 265, 266, 267, 268, 269, 270, 271, 
	272, 273, 274, 275, 276, 277, 282, 289, 
	294, 298, 304, 307, 309, 315, 329, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 373, 375, 377, 379, 381, 
	383, 385, 387, 389, 391, 393, 395, 397, 
	399, 400, 401, 402, 403, 405, 406, 407, 
	408, 409, 410, 411, 412, 413, 425, 427, 
	429, 431, 433, 435, 440, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 500, 502, 504, 506, 508, 510, 
	512, 514, 516, 518, 519, 520, 532, 534, 
	536, 538, 540, 542, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 576, 578, 580, 582, 584, 586, 
	588, 591, 593, 595, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 648, 649, 
	650, 651, 652, 653, 654, 655, 662, 664, 
	666, 668, 670, 672, 674, 675, 676
];

const _lexer_trans_keys = [
	-28, -27, -24, -23, 10, 32, 34, 35, 
	37, 42, 64, 124, 239, 9, 13, -67, 
	-66, -122, -26, -104, -81, 10, 10, 13, 
	-28, -27, -24, -23, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -127, -118, 
	-100, -67, -121, -27, -90, -126, -97, -24, 
	-125, -67, 58, 10, 10, -28, -27, -24, 
	10, 32, 35, 37, 64, 9, 13, -66, 
	10, -117, 10, -27, 10, -83, 10, -112, 
	10, 10, 58, -28, -27, -24, -23, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -128, -125, -116, -28, -72, -108, -116, 
	-26, -103, -81, 58, 10, 10, -28, -27, 
	-24, -23, 10, 32, 35, 37, 42, 64, 
	9, 13, -67, 10, -122, 10, -26, 10, 
	-104, 10, -81, 10, -127, -118, -100, -67, 
	10, -121, 10, -27, 10, -90, 10, -126, 
	10, -97, 10, -24, 10, -125, 10, -67, 
	10, 10, 58, -70, 10, -26, 10, -103, 
	10, -81, 10, -27, 10, 58, -92, 10, 
	-89, 10, -25, 10, -70, 10, -78, 10, 
	-109, 10, -128, 10, -116, 10, -28, 10, 
	-72, 10, -108, 10, -126, 10, -93, 10, 
	-28, 10, -71, 10, -120, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -126, -93, -28, -71, 
	-120, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, -28, -27, -24, -23, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -118, -100, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, -70, 10, -26, 10, 
	-103, 10, -81, 10, -27, 10, 58, -92, 
	10, -89, 10, -25, 10, -70, 10, -78, 
	10, -125, 10, -116, 10, -26, 10, -103, 
	10, -81, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -70, 
	-26, -103, -81, -27, 58, -92, -89, -25, 
	-70, -78, 58, 10, 10, -28, -27, -24, 
	-23, 10, 32, 35, 37, 42, 64, 9, 
	13, -67, 10, -122, 10, -26, 10, -104, 
	10, -81, 10, -127, -118, -100, -67, 10, 
	-121, 10, -27, 10, -90, 10, -126, 10, 
	-97, 10, -24, 10, -125, 10, -67, 10, 
	10, 58, -70, 10, -26, 10, -103, 10, 
	-81, 10, -109, 10, -128, 10, -116, 10, 
	-28, 10, -72, 10, -108, 10, -126, 10, 
	-93, 10, -28, 10, -71, 10, -120, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 10, 
	-28, -27, -24, -23, 10, 32, 35, 37, 
	42, 64, 9, 13, -67, 10, -122, 10, 
	-26, 10, -104, 10, -81, 10, -127, -118, 
	-100, -67, 10, -121, 10, -27, 10, -90, 
	10, -126, 10, -97, 10, -24, 10, -125, 
	10, -67, 10, 10, 58, -70, 10, -26, 
	10, -103, 10, -81, 10, -27, 10, 58, 
	-92, 10, -89, 10, -25, 10, -70, 10, 
	-78, 10, -109, 10, -128, -125, 10, -116, 
	10, -28, 10, -72, 10, -108, 10, -116, 
	10, -26, 10, -103, 10, -81, 10, -126, 
	10, -93, 10, -28, 10, -71, 10, -120, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, -109, 
	-117, -27, -83, -112, 58, 10, 10, -27, 
	10, 32, 35, 124, 9, 13, -118, 10, 
	-97, 10, -24, 10, -125, 10, -67, 10, 
	10, 58, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 13, 2, 1, 1, 1, 1, 1, 
	2, 12, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 2, 
	2, 2, 2, 2, 2, 12, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 2, 2, 2, 2, 2, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	2, 4, 3, 2, 4, 12, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 10, 2, 2, 
	2, 2, 2, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 15, 18, 20, 22, 24, 26, 
	28, 31, 45, 50, 52, 54, 56, 58, 
	60, 62, 64, 66, 68, 70, 72, 82, 
	85, 88, 91, 94, 97, 100, 114, 117, 
	119, 121, 123, 125, 127, 129, 131, 133, 
	135, 137, 139, 151, 154, 157, 160, 163, 
	166, 172, 175, 178, 181, 184, 187, 190, 
	193, 196, 199, 202, 205, 208, 211, 215, 
	218, 221, 224, 227, 230, 233, 236, 239, 
	242, 245, 248, 251, 254, 257, 260, 263, 
	266, 269, 272, 275, 278, 281, 284, 287, 
	290, 293, 296, 299, 302, 305, 308, 310, 
	312, 314, 316, 318, 320, 322, 326, 331, 
	336, 341, 346, 350, 354, 357, 359, 361, 
	363, 365, 367, 369, 371, 373, 375, 377, 
	379, 381, 383, 385, 387, 389, 394, 401, 
	406, 410, 416, 420, 423, 429, 443, 447, 
	450, 453, 456, 459, 462, 465, 468, 471, 
	475, 478, 481, 484, 487, 490, 493, 496, 
	499, 502, 505, 508, 511, 514, 517, 520, 
	523, 526, 529, 532, 535, 538, 541, 544, 
	547, 549, 551, 553, 555, 558, 560, 562, 
	564, 566, 568, 570, 572, 574, 586, 589, 
	592, 595, 598, 601, 607, 610, 613, 616, 
	619, 622, 625, 628, 631, 634, 637, 640, 
	643, 646, 649, 652, 655, 658, 661, 664, 
	667, 670, 673, 676, 679, 682, 685, 688, 
	691, 694, 697, 700, 703, 706, 709, 712, 
	715, 718, 721, 724, 726, 728, 740, 743, 
	746, 749, 752, 755, 761, 764, 767, 770, 
	773, 776, 779, 782, 785, 788, 791, 794, 
	797, 800, 804, 807, 810, 813, 816, 819, 
	822, 826, 829, 832, 835, 838, 841, 844, 
	847, 850, 853, 856, 859, 862, 865, 868, 
	871, 874, 877, 880, 883, 886, 889, 892, 
	895, 898, 901, 904, 907, 910, 912, 914, 
	916, 918, 920, 922, 924, 926, 933, 936, 
	939, 942, 945, 948, 951, 953, 955
];

const _lexer_indicies = [
	1, 2, 3, 4, 6, 5, 7, 8, 
	9, 10, 11, 12, 13, 5, 0, 14, 
	15, 0, 16, 0, 17, 0, 18, 0, 
	19, 0, 0, 20, 22, 23, 21, 1, 
	2, 3, 4, 6, 5, 7, 8, 9, 
	10, 11, 12, 5, 0, 24, 25, 26, 
	27, 0, 28, 0, 29, 0, 30, 0, 
	19, 0, 31, 0, 32, 0, 33, 0, 
	34, 0, 35, 0, 37, 36, 39, 38, 
	40, 41, 42, 39, 43, 44, 45, 44, 
	43, 38, 46, 39, 38, 47, 39, 38, 
	48, 39, 38, 49, 39, 38, 50, 39, 
	38, 39, 51, 38, 52, 53, 54, 55, 
	57, 56, 58, 59, 60, 61, 62, 63, 
	56, 0, 64, 65, 0, 66, 0, 67, 
	0, 68, 0, 19, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 75, 
	74, 77, 76, 78, 79, 80, 81, 77, 
	82, 83, 84, 85, 83, 82, 76, 86, 
	77, 76, 87, 77, 76, 88, 77, 76, 
	89, 77, 76, 90, 77, 76, 91, 92, 
	93, 94, 77, 76, 95, 77, 76, 96, 
	77, 76, 97, 77, 76, 90, 77, 76, 
	98, 77, 76, 99, 77, 76, 100, 77, 
	76, 101, 77, 76, 77, 90, 76, 102, 
	77, 76, 103, 77, 76, 104, 77, 76, 
	105, 77, 76, 106, 77, 90, 76, 107, 
	77, 76, 108, 77, 76, 109, 77, 76, 
	110, 77, 76, 101, 77, 76, 90, 77, 
	76, 111, 77, 76, 112, 77, 76, 113, 
	77, 76, 114, 77, 76, 90, 77, 76, 
	115, 77, 76, 116, 77, 76, 117, 77, 
	76, 118, 77, 76, 90, 77, 76, 77, 
	119, 76, 77, 120, 76, 77, 121, 76, 
	77, 122, 76, 77, 123, 76, 77, 124, 
	76, 77, 125, 76, 77, 126, 76, 77, 
	127, 76, 77, 128, 76, 77, 129, 76, 
	77, 130, 76, 77, 131, 76, 77, 132, 
	76, 77, 90, 76, 133, 0, 134, 0, 
	135, 0, 136, 0, 19, 0, 137, 0, 
	138, 0, 139, 138, 138, 0, 142, 141, 
	143, 141, 140, 146, 145, 147, 145, 144, 
	146, 145, 148, 145, 144, 146, 145, 149, 
	145, 144, 151, 150, 150, 0, 6, 152, 
	152, 0, 154, 155, 153, 6, 0, 156, 
	0, 157, 0, 158, 0, 159, 0, 160, 
	0, 161, 0, 162, 0, 163, 0, 164, 
	0, 165, 0, 166, 0, 167, 0, 168, 
	0, 169, 0, 19, 0, 0, 0, 0, 
	0, 170, 171, 172, 171, 171, 174, 173, 
	170, 6, 175, 11, 175, 0, 176, 177, 
	176, 0, 180, 179, 181, 182, 179, 178, 
	0, 184, 185, 183, 0, 184, 183, 180, 
	186, 184, 185, 186, 183, 187, 188, 189, 
	190, 180, 191, 192, 193, 194, 195, 196, 
	197, 191, 0, 198, 199, 39, 38, 200, 
	39, 38, 201, 39, 38, 202, 39, 38, 
	50, 39, 38, 203, 39, 38, 204, 39, 
	38, 205, 39, 38, 206, 39, 38, 207, 
	39, 51, 38, 208, 39, 38, 209, 39, 
	38, 210, 39, 38, 211, 39, 38, 50, 
	39, 38, 212, 39, 38, 213, 39, 38, 
	214, 39, 38, 215, 39, 38, 50, 39, 
	38, 39, 216, 38, 39, 217, 38, 39, 
	218, 38, 39, 219, 38, 39, 220, 38, 
	39, 221, 38, 39, 222, 38, 39, 223, 
	38, 39, 224, 38, 39, 225, 38, 39, 
	226, 38, 39, 227, 38, 39, 228, 38, 
	39, 229, 38, 230, 0, 231, 0, 232, 
	0, 233, 0, 234, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 243, 242, 245, 244, 246, 247, 
	248, 249, 245, 250, 251, 252, 253, 251, 
	250, 244, 254, 245, 244, 255, 245, 244, 
	256, 245, 244, 257, 245, 244, 258, 245, 
	244, 259, 260, 261, 262, 245, 244, 263, 
	245, 244, 264, 245, 244, 265, 245, 244, 
	258, 245, 244, 266, 245, 244, 267, 245, 
	244, 268, 245, 244, 269, 245, 244, 245, 
	258, 244, 270, 245, 244, 271, 245, 244, 
	272, 245, 244, 269, 245, 244, 258, 245, 
	244, 273, 245, 244, 274, 245, 244, 275, 
	245, 244, 276, 245, 244, 258, 245, 244, 
	277, 245, 244, 278, 245, 244, 279, 245, 
	244, 280, 245, 244, 258, 245, 244, 245, 
	281, 244, 245, 282, 244, 245, 283, 244, 
	245, 284, 244, 245, 285, 244, 245, 286, 
	244, 245, 287, 244, 245, 288, 244, 245, 
	289, 244, 245, 290, 244, 245, 291, 244, 
	245, 292, 244, 245, 293, 244, 245, 294, 
	244, 245, 258, 244, 296, 295, 298, 297, 
	299, 300, 301, 302, 298, 303, 304, 305, 
	306, 304, 303, 297, 307, 298, 297, 308, 
	298, 297, 309, 298, 297, 310, 298, 297, 
	311, 298, 297, 312, 313, 314, 315, 298, 
	297, 316, 298, 297, 317, 298, 297, 318, 
	298, 297, 311, 298, 297, 319, 298, 297, 
	320, 298, 297, 321, 298, 297, 322, 298, 
	297, 298, 311, 297, 323, 298, 297, 324, 
	298, 297, 325, 298, 297, 326, 298, 297, 
	327, 298, 311, 297, 328, 298, 297, 329, 
	298, 297, 330, 298, 297, 331, 298, 297, 
	322, 298, 297, 311, 298, 297, 332, 333, 
	298, 297, 334, 298, 297, 335, 298, 297, 
	336, 298, 297, 311, 298, 297, 337, 298, 
	297, 338, 298, 297, 339, 298, 297, 322, 
	298, 297, 340, 298, 297, 341, 298, 297, 
	342, 298, 297, 343, 298, 297, 311, 298, 
	297, 298, 344, 297, 298, 345, 297, 298, 
	346, 297, 298, 347, 297, 298, 348, 297, 
	298, 349, 297, 298, 350, 297, 298, 351, 
	297, 298, 352, 297, 298, 353, 297, 298, 
	354, 297, 298, 355, 297, 298, 356, 297, 
	298, 357, 297, 298, 311, 297, 19, 0, 
	358, 0, 359, 0, 360, 0, 361, 0, 
	362, 0, 364, 363, 366, 365, 367, 366, 
	368, 369, 369, 368, 365, 370, 366, 365, 
	371, 366, 365, 372, 366, 365, 373, 366, 
	365, 374, 366, 365, 366, 375, 365, 376, 
	0, 5, 0, 377, 0
];

const _lexer_trans_targs = [
	0, 2, 10, 30, 94, 9, 9, 99, 
	108, 110, 124, 125, 128, 300, 3, 286, 
	4, 5, 6, 7, 8, 8, 9, 109, 
	11, 15, 168, 285, 12, 13, 14, 16, 
	17, 18, 19, 20, 21, 22, 21, 22, 
	23, 134, 149, 22, 9, 154, 24, 25, 
	26, 27, 28, 29, 2, 10, 30, 94, 
	9, 9, 99, 108, 110, 124, 125, 128, 
	31, 35, 32, 33, 34, 36, 37, 38, 
	39, 40, 41, 42, 41, 42, 43, 48, 
	69, 74, 42, 9, 79, 93, 44, 45, 
	46, 47, 29, 49, 53, 58, 68, 50, 
	51, 52, 54, 55, 56, 57, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 70, 
	71, 72, 73, 75, 76, 77, 78, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 9, 95, 96, 97, 
	98, 100, 101, 102, 103, 103, 103, 104, 
	103, 103, 103, 104, 105, 106, 107, 9, 
	107, 108, 9, 109, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 302, 126, 127, 9, 126, 125, 127, 
	128, 129, 130, 132, 133, 131, 129, 130, 
	131, 129, 132, 2, 10, 30, 94, 133, 
	99, 108, 110, 124, 125, 128, 135, 139, 
	136, 137, 138, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 150, 151, 152, 153, 
	155, 156, 157, 158, 159, 160, 161, 162, 
	163, 164, 165, 166, 167, 9, 169, 170, 
	171, 172, 173, 227, 174, 175, 176, 177, 
	178, 179, 180, 181, 180, 181, 182, 187, 
	202, 207, 181, 9, 212, 226, 183, 184, 
	185, 186, 29, 188, 192, 197, 201, 189, 
	190, 191, 193, 194, 195, 196, 198, 199, 
	200, 203, 204, 205, 206, 208, 209, 210, 
	211, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 9, 228, 
	229, 228, 229, 230, 235, 256, 265, 229, 
	9, 270, 284, 231, 232, 233, 234, 29, 
	236, 240, 245, 255, 237, 238, 239, 241, 
	242, 243, 244, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 257, 261, 258, 259, 
	260, 262, 263, 264, 266, 267, 268, 269, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 280, 281, 282, 283, 9, 287, 288, 
	289, 290, 291, 292, 293, 292, 293, 294, 
	293, 9, 295, 296, 297, 298, 299, 29, 
	301, 0
];

const _lexer_trans_actions = [
	39, 25, 25, 25, 25, 0, 47, 3, 
	1, 0, 25, 1, 31, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 77, 77, 0, 62, 29, 0, 0, 
	0, 0, 0, 9, 56, 56, 56, 56, 
	27, 115, 53, 50, 27, 56, 50, 59, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 77, 
	77, 77, 0, 65, 29, 77, 0, 0, 
	0, 0, 11, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 107, 23, 44, 0, 
	0, 0, 33, 33, 47, 33, 80, 0, 
	0, 35, 0, 89, 89, 89, 89, 0, 
	86, 83, 37, 89, 83, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 77, 77, 
	77, 77, 0, 71, 29, 77, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 50, 
	124, 0, 47, 77, 77, 77, 77, 0, 
	68, 29, 77, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 77, 
	0, 74, 0, 0, 0, 0, 0, 17, 
	0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 302;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 593 "js/lib/gherkin/lexer/zh_cn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */
  
/* line 600 "js/lib/gherkin/lexer/zh_cn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 816 "js/lib/gherkin/lexer/zh_cn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 855 "js/lib/gherkin/lexer/zh_cn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/zh_cn.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

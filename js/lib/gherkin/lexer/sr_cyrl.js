
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_cyrl.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 27, 29, 40, 41, 42, 46, 51, 
	56, 61, 66, 70, 74, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 96, 103, 108, 
	112, 118, 121, 123, 129, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 152, 
	153, 155, 156, 157, 159, 160, 161, 162, 
	163, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 185, 195, 197, 
	199, 201, 203, 205, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 238, 240, 
	243, 245, 247, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 305, 307, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 335, 337, 339, 
	341, 343, 345, 347, 349, 351, 353, 355, 
	358, 360, 362, 364, 366, 368, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 522, 523, 524, 525, 526, 527, 
	528, 529, 530, 539, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 581, 583, 585, 587, 589, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 631, 633, 635, 637, 639, 
	641, 643, 645, 647, 649, 651, 653, 655, 
	657, 659, 661, 663, 665, 667, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 741, 743, 745, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 774, 775, 776, 777, 778, 
	779, 780, 781, 782, 783, 784, 785, 786, 
	787, 788, 789, 790, 791, 792, 800, 807, 
	809, 811, 813, 815, 817, 820, 822, 824, 
	826, 828, 830, 832, 834, 836, 838, 840, 
	842, 844, 846, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 866, 868, 870, 872, 
	874, 876, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 906, 
	908, 910, 912, 914, 916, 918, 920, 922, 
	924, 926, 928, 930, 932, 934, 936, 938, 
	941, 943, 946, 948, 950, 952, 954, 956, 
	959, 961, 963, 965, 967, 969, 971, 973, 
	975, 977, 979, 981, 983, 985, 987, 989, 
	991, 993, 995, 997, 999, 1001, 1003, 1005, 
	1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 
	1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 
	1039, 1041, 1044, 1046, 1048, 1050, 1052, 1054, 
	1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 
	1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 
	1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 
	1104, 1106, 1108, 1110, 1112, 1114, 1116, 1117, 
	1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 
	1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 
	1160, 1162, 1163, 1164, 1165, 1166, 1173, 1177, 
	1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 
	1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 
	1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 
	1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 
	1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 
	1259, 1261, 1263, 1265, 1267, 1269, 1271, 1272, 
	1273, 1282, 1292, 1294, 1296, 1298, 1300, 1302, 
	1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 
	1320, 1324, 1326, 1329, 1331, 1333, 1336, 1338, 
	1340, 1342, 1344, 1347, 1349, 1351, 1353, 1355, 
	1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 
	1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 
	1389, 1391, 1393, 1395, 1397, 1400, 1402, 1404, 
	1406, 1408, 1410, 1412, 1415, 1417, 1419, 1421, 
	1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 
	1439, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 
	1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 
	1472, 1474, 1477, 1479, 1481, 1483, 1485, 1487, 
	1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 
	1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 
	1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 
	1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 
	1554, 1556, 1558, 1560, 1562, 1564, 1566, 1568, 
	1570, 1572, 1574, 1576, 1578, 1580, 1582, 1584, 
	1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 
	1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 
	1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 
	1634, 1636, 1638, 1640, 1642, 1643, 1644, 1645, 
	1646, 1647, 1648, 1649, 1651, 1652, 1653, 1654, 
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 
	1687, 1688, 1689, 1690, 1691, 1692, 1694, 1695, 
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 
	1712, 1713, 1714, 1715, 1716, 1717, 1718
];

const _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -105, -104, -102, 
	-100, -98, -97, -95, -92, -48, -69, -48, 
	-72, 32, 10, 10, 13, -48, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	34, 34, 10, 32, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -48, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -48, -80, -48, -76, 
	-48, -80, -47, -126, -48, -75, -72, -66, 
	-48, -80, -66, -48, -76, -48, 32, -80, 
	-48, -67, -47, -126, -122, -48, -75, -48, 
	-70, -47, -127, -47, -126, 58, 10, 10, 
	-48, 10, 32, 35, 37, 42, 64, 9, 
	13, -112, -105, -104, -102, -100, -98, -97, 
	-95, -92, 10, -48, 10, -69, 10, -48, 
	10, -72, 10, 10, 32, -48, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-48, 10, -80, 10, -47, 10, -126, 10, 
	-48, 10, -75, -72, -66, 10, -48, 10, 
	-80, -66, 10, -48, 10, -76, 10, -48, 
	10, 32, -80, 10, -48, 10, -67, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -65, 10, -47, 10, -126, 10, 
	10, 58, -48, 10, -66, 10, -48, 10, 
	-77, 10, -47, 10, -125, 10, -47, 10, 
	-101, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -47, 10, -127, 10, -48, -47, 
	10, -67, 10, -48, 10, -76, 10, -48, 
	10, -127, 10, -48, 10, -66, 10, -48, 
	10, -79, 10, -48, 10, -72, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -68, 10, -48, 10, -75, 10, -47, 
	10, -128, 10, -48, -47, 10, -70, 10, 
	-48, 10, -72, 10, -47, 10, -122, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -47, 10, -104, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -47, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -48, -75, -48, -65, -47, -126, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -105, -104, -102, -100, 
	-98, -97, -95, -92, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, 10, 32, -48, 
	10, -80, 10, -48, 10, -76, 10, -48, 
	10, -80, 10, -47, 10, -126, 10, -48, 
	10, -75, -72, -66, 10, -48, 10, -80, 
	10, -48, 10, -76, 10, -48, 10, 32, 
	-80, 10, -48, 10, -66, 10, -48, 10, 
	-77, 10, -47, 10, -125, 10, -47, 10, 
	-101, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, 10, 58, -48, -47, 10, -67, 
	10, -48, 10, -76, 10, -48, 10, -127, 
	10, -48, 10, -66, 10, -48, 10, -79, 
	10, -48, 10, -72, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -68, 
	10, -48, 10, -75, 10, -47, 10, -128, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -47, 10, -125, 
	10, -48, 10, -67, 10, -48, 10, -70, 
	10, -47, 10, -122, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -69, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -48, -66, -48, 
	-77, -47, -125, -47, -101, -48, -67, -48, 
	-66, -47, -127, -47, -126, 58, 10, 10, 
	-48, 10, 32, 35, 37, 64, 9, 13, 
	-102, -100, -98, -97, -95, -92, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -47, 
	10, -126, -122, 10, -48, 10, -75, 10, 
	-48, 10, -70, 10, -47, 10, -127, 10, 
	-47, 10, -126, 10, 10, 58, -48, 10, 
	-75, 10, -48, 10, -65, 10, -48, 10, 
	-66, 10, -48, 10, -77, 10, -47, 10, 
	-125, 10, -47, 10, -101, 10, -48, 10, 
	-67, 10, -48, 10, -66, 10, -47, 10, 
	-127, 10, -48, 10, -67, -66, 10, -48, 
	10, -66, 10, -48, 10, -78, 10, -48, 
	10, -80, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	-47, 10, -66, 10, -48, 10, -73, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -75, 10, -47, 10, 
	-128, 10, -48, 10, 58, -72, 10, -48, 
	-47, 10, -70, 10, -48, 10, -72, 10, 
	-47, 10, -122, 10, -126, -122, 10, -47, 
	10, -128, 10, -47, 10, -125, 10, -48, 
	10, -70, 10, -47, 10, -126, 10, -47, 
	10, -125, 10, -47, 10, -128, 10, -48, 
	10, -80, 10, 10, 32, -47, 10, -127, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -47, 10, -104, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, -47, 10, -66, 10, -104, 10, 
	-48, 10, -47, 10, -125, 10, -48, 10, 
	-67, 10, -48, 10, -70, 10, -47, 10, 
	-122, 10, -48, 10, -72, 10, -48, 10, 
	-66, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -48, 10, -69, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -48, -47, -67, -48, -76, -48, 
	-127, -48, -67, -66, -48, -66, -48, -78, 
	-48, -80, -48, -79, -48, -72, -48, -67, 
	-48, -80, -48, -47, -66, -48, -73, -48, 
	-80, -48, -76, -48, -72, -48, -67, -128, 
	-48, -72, -48, -68, -48, -75, -47, -128, 
	-48, 58, -72, 58, 10, 10, -48, 10, 
	32, 35, 124, 9, 13, -100, -98, -92, 
	10, -48, 10, -66, 10, -48, 10, -77, 
	10, -47, 10, -125, 10, -47, 10, -101, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, 10, 58, -47, 10, -127, 10, -48, 
	10, -66, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, 10, 
	10, -48, 10, 32, 35, 37, 42, 64, 
	9, 13, -112, -105, -104, -102, -100, -98, 
	-97, -95, -92, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, 10, 32, -48, 10, 
	-80, 10, -48, 10, -76, 10, -48, 10, 
	-80, 10, -47, 10, -126, 10, -48, 10, 
	-75, -72, -66, 10, -48, 10, -80, -66, 
	10, -48, 10, -76, 10, -48, 10, 32, 
	-80, 10, -48, 10, -67, 10, -47, 10, 
	-126, -122, 10, -48, 10, -75, 10, -48, 
	10, -70, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, 10, 58, -48, 10, -75, 
	10, -48, 10, -65, 10, -48, 10, -66, 
	10, -48, 10, -77, 10, -47, 10, -125, 
	10, -47, 10, -101, 10, -48, 10, -67, 
	10, -48, 10, -66, 10, -48, -47, 10, 
	-67, 10, -48, 10, -76, 10, -48, 10, 
	-127, 10, -48, 10, -67, -66, 10, -48, 
	10, -66, 10, -48, 10, -78, 10, -48, 
	10, -80, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	-47, 10, -66, 10, -48, 10, -73, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -75, 10, -47, 10, 
	-128, 10, -48, -47, 10, -70, 10, -48, 
	10, -72, 10, -47, 10, -122, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-48, 10, -72, 10, -47, 10, -104, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-48, -47, -70, -48, -72, -47, -122, -48, 
	-80, -126, -122, -47, -128, -47, -125, -48, 
	-70, -47, -126, -47, -125, -47, -128, -48, 
	-80, 32, -47, -127, -47, -122, -48, -75, 
	-48, -67, -48, -80, -47, -128, -48, -72, 
	-47, -104, -48, -75, -48, -67, -48, -80, 
	-47, -128, -48, -72, -48, -47, -66, 58, 
	-104, -48, -47, -125, -48, -67, -48, -70, 
	-47, -122, -48, -72, -48, -66, -48, -67, 
	-48, -80, -48, -69, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	1, 2, 9, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 5, 3, 2, 
	4, 3, 2, 4, 9, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	2, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 10, 2, 2, 
	2, 2, 2, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 7, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 3, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 5, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	7, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 3, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 34, 37, 48, 50, 52, 56, 61, 
	66, 71, 76, 80, 84, 87, 89, 91, 
	93, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 122, 129, 134, 
	138, 144, 148, 151, 157, 168, 170, 172, 
	174, 176, 178, 180, 182, 184, 186, 190, 
	192, 195, 197, 199, 202, 204, 206, 208, 
	210, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 244, 255, 258, 
	261, 264, 267, 270, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 313, 316, 
	320, 323, 326, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 412, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 445, 448, 451, 454, 457, 460, 463, 
	466, 469, 472, 475, 478, 481, 484, 487, 
	491, 494, 497, 500, 503, 506, 510, 513, 
	516, 519, 522, 525, 528, 531, 534, 537, 
	540, 543, 546, 549, 552, 555, 558, 561, 
	564, 567, 570, 573, 576, 579, 582, 585, 
	588, 591, 594, 597, 600, 603, 606, 609, 
	612, 615, 618, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 762, 773, 776, 779, 782, 
	785, 788, 791, 794, 797, 800, 803, 806, 
	809, 812, 815, 820, 823, 826, 829, 832, 
	836, 839, 842, 845, 848, 851, 854, 857, 
	860, 863, 866, 869, 872, 875, 878, 881, 
	884, 887, 890, 894, 897, 900, 903, 906, 
	909, 912, 915, 918, 921, 924, 927, 930, 
	933, 936, 939, 942, 945, 948, 951, 954, 
	957, 960, 963, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 
	1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 
	1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 
	1101, 1104, 1107, 1109, 1111, 1113, 1115, 1117, 
	1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 
	1135, 1137, 1139, 1141, 1143, 1145, 1153, 1161, 
	1164, 1167, 1170, 1173, 1176, 1180, 1183, 1186, 
	1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 
	1213, 1216, 1219, 1222, 1225, 1228, 1231, 1234, 
	1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 
	1261, 1264, 1268, 1271, 1274, 1277, 1280, 1283, 
	1286, 1289, 1292, 1295, 1298, 1301, 1304, 1308, 
	1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 
	1335, 1338, 1341, 1344, 1347, 1350, 1353, 1356, 
	1360, 1363, 1367, 1370, 1373, 1376, 1379, 1382, 
	1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 
	1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 
	1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455, 
	1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1506, 1509, 1513, 1516, 1519, 1522, 1525, 1528, 
	1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 
	1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 
	1579, 1582, 1585, 1588, 1591, 1594, 1597, 1600, 
	1603, 1606, 1609, 1612, 1615, 1618, 1621, 1623, 
	1625, 1627, 1629, 1631, 1633, 1636, 1638, 1640, 
	1642, 1644, 1646, 1648, 1650, 1652, 1654, 1656, 
	1658, 1660, 1662, 1664, 1667, 1669, 1671, 1673, 
	1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 
	1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 
	1707, 1710, 1712, 1714, 1716, 1718, 1725, 1730, 
	1733, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 
	1757, 1760, 1763, 1766, 1769, 1772, 1775, 1778, 
	1781, 1784, 1787, 1790, 1793, 1796, 1799, 1802, 
	1805, 1808, 1811, 1814, 1817, 1820, 1823, 1826, 
	1829, 1832, 1835, 1838, 1841, 1844, 1847, 1850, 
	1853, 1856, 1859, 1862, 1865, 1868, 1871, 1873, 
	1875, 1884, 1895, 1898, 1901, 1904, 1907, 1910, 
	1913, 1916, 1919, 1922, 1925, 1928, 1931, 1934, 
	1937, 1942, 1945, 1949, 1952, 1955, 1959, 1962, 
	1965, 1968, 1971, 1975, 1978, 1981, 1984, 1987, 
	1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 
	2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 
	2038, 2041, 2044, 2047, 2050, 2054, 2057, 2060, 
	2063, 2066, 2069, 2072, 2076, 2079, 2082, 2085, 
	2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 
	2112, 2116, 2119, 2122, 2125, 2128, 2131, 2134, 
	2137, 2140, 2143, 2146, 2149, 2152, 2155, 2158, 
	2161, 2164, 2168, 2171, 2174, 2177, 2180, 2183, 
	2187, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 
	2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 
	2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256, 
	2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 
	2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 
	2307, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 
	2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 
	2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 
	2379, 2382, 2385, 2388, 2391, 2394, 2397, 2400, 
	2403, 2406, 2409, 2412, 2415, 2417, 2419, 2421, 
	2423, 2425, 2427, 2429, 2432, 2434, 2436, 2438, 
	2440, 2442, 2444, 2446, 2448, 2450, 2452, 2454, 
	2456, 2458, 2460, 2462, 2464, 2466, 2468, 2470, 
	2472, 2474, 2476, 2478, 2480, 2482, 2484, 2486, 
	2488, 2490, 2492, 2494, 2496, 2498, 2500, 2502, 
	2504, 2506, 2508, 2510, 2512, 2514, 2517, 2519, 
	2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 
	2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 
	2553, 2555, 2557, 2559, 2561, 2563, 2565
];

const _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 0, 20, 0, 
	21, 0, 22, 0, 13, 0, 23, 0, 
	0, 24, 26, 27, 25, 1, 3, 2, 
	4, 5, 6, 7, 8, 9, 2, 0, 
	28, 0, 29, 0, 30, 29, 29, 0, 
	33, 32, 34, 32, 31, 37, 36, 38, 
	36, 35, 37, 36, 39, 36, 35, 37, 
	36, 40, 36, 35, 42, 41, 41, 0, 
	3, 43, 43, 0, 45, 46, 44, 3, 
	0, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 52, 0, 53, 0, 54, 
	0, 55, 0, 56, 0, 57, 0, 58, 
	0, 59, 0, 60, 0, 0, 0, 0, 
	0, 61, 62, 63, 62, 62, 65, 64, 
	61, 3, 66, 8, 66, 0, 67, 68, 
	67, 0, 71, 70, 72, 73, 70, 69, 
	0, 75, 76, 74, 0, 75, 74, 71, 
	77, 75, 76, 77, 74, 78, 71, 79, 
	80, 81, 82, 83, 84, 85, 79, 0, 
	86, 0, 87, 0, 88, 0, 89, 0, 
	90, 0, 91, 0, 92, 0, 93, 0, 
	94, 0, 13, 13, 13, 0, 95, 0, 
	96, 97, 0, 98, 0, 99, 0, 100, 
	23, 0, 13, 0, 101, 0, 102, 0, 
	103, 0, 104, 105, 0, 106, 0, 107, 
	0, 108, 0, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 116, 
	115, 118, 117, 119, 118, 120, 121, 122, 
	123, 121, 120, 117, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 118, 117, 133, 
	118, 117, 134, 118, 117, 135, 118, 117, 
	126, 118, 117, 118, 136, 117, 137, 139, 
	138, 140, 141, 142, 143, 144, 145, 138, 
	0, 146, 118, 117, 147, 118, 117, 148, 
	118, 117, 149, 118, 117, 150, 118, 117, 
	151, 118, 117, 152, 118, 117, 153, 118, 
	117, 154, 118, 117, 126, 126, 126, 118, 
	117, 155, 118, 117, 156, 157, 118, 117, 
	158, 118, 117, 159, 118, 117, 160, 118, 
	136, 117, 126, 118, 117, 161, 118, 117, 
	162, 118, 117, 163, 118, 117, 164, 118, 
	117, 165, 118, 117, 166, 118, 117, 167, 
	118, 117, 168, 118, 117, 169, 118, 117, 
	170, 118, 117, 118, 136, 117, 171, 118, 
	117, 172, 118, 117, 173, 118, 117, 174, 
	118, 117, 175, 118, 117, 176, 118, 117, 
	177, 118, 117, 178, 118, 117, 179, 118, 
	117, 180, 118, 117, 181, 118, 117, 182, 
	118, 117, 183, 118, 117, 168, 118, 117, 
	184, 185, 118, 117, 186, 118, 117, 187, 
	118, 117, 188, 118, 117, 160, 118, 117, 
	189, 118, 117, 190, 118, 117, 191, 118, 
	117, 192, 118, 117, 193, 118, 117, 194, 
	118, 117, 195, 118, 117, 196, 118, 117, 
	197, 118, 117, 198, 118, 117, 170, 118, 
	117, 199, 118, 117, 200, 118, 117, 201, 
	118, 117, 202, 118, 117, 203, 118, 117, 
	204, 118, 117, 205, 118, 117, 206, 118, 
	117, 207, 118, 117, 170, 118, 117, 208, 
	209, 118, 117, 210, 118, 117, 211, 118, 
	117, 212, 118, 117, 213, 118, 117, 197, 
	118, 117, 214, 215, 118, 117, 216, 118, 
	117, 217, 118, 117, 218, 118, 117, 219, 
	118, 117, 220, 118, 117, 221, 118, 117, 
	222, 118, 117, 223, 118, 117, 224, 118, 
	117, 225, 118, 117, 226, 118, 117, 227, 
	118, 117, 228, 118, 117, 229, 118, 117, 
	118, 230, 117, 231, 118, 117, 232, 118, 
	117, 233, 118, 117, 234, 118, 117, 235, 
	118, 117, 236, 118, 117, 237, 118, 117, 
	238, 118, 117, 239, 118, 117, 240, 118, 
	117, 241, 118, 117, 242, 118, 117, 243, 
	118, 117, 244, 118, 117, 245, 118, 117, 
	197, 118, 117, 246, 118, 117, 247, 118, 
	117, 248, 118, 117, 249, 118, 117, 250, 
	118, 117, 251, 118, 117, 252, 118, 117, 
	253, 118, 117, 254, 118, 117, 255, 118, 
	117, 256, 118, 117, 170, 118, 117, 257, 
	118, 117, 258, 118, 117, 259, 118, 117, 
	260, 118, 117, 261, 118, 117, 262, 118, 
	117, 263, 118, 117, 264, 118, 117, 265, 
	118, 117, 266, 118, 117, 267, 118, 117, 
	268, 118, 117, 269, 118, 117, 270, 118, 
	117, 271, 118, 117, 272, 118, 117, 273, 
	118, 117, 178, 118, 117, 118, 274, 117, 
	118, 275, 117, 118, 276, 117, 118, 277, 
	117, 118, 278, 117, 118, 279, 117, 118, 
	280, 117, 118, 281, 117, 118, 282, 117, 
	118, 283, 117, 118, 284, 117, 118, 285, 
	117, 118, 286, 117, 118, 287, 117, 288, 
	0, 289, 0, 290, 0, 291, 0, 292, 
	0, 293, 0, 294, 0, 296, 295, 298, 
	297, 299, 298, 300, 301, 302, 303, 301, 
	300, 297, 304, 305, 306, 307, 308, 309, 
	310, 311, 312, 298, 297, 313, 298, 297, 
	314, 298, 297, 315, 298, 297, 306, 298, 
	297, 298, 316, 297, 317, 298, 297, 318, 
	298, 297, 319, 298, 297, 320, 298, 297, 
	321, 298, 297, 322, 298, 297, 323, 298, 
	297, 324, 298, 297, 325, 298, 297, 306, 
	306, 306, 298, 297, 326, 298, 297, 327, 
	298, 297, 328, 298, 297, 329, 298, 297, 
	330, 298, 316, 297, 306, 298, 297, 331, 
	298, 297, 332, 298, 297, 333, 298, 297, 
	334, 298, 297, 335, 298, 297, 336, 298, 
	297, 337, 298, 297, 338, 298, 297, 339, 
	298, 297, 340, 298, 297, 341, 298, 297, 
	342, 298, 297, 343, 298, 297, 344, 298, 
	297, 345, 298, 297, 346, 298, 297, 298, 
	316, 297, 347, 348, 298, 297, 349, 298, 
	297, 350, 298, 297, 351, 298, 297, 330, 
	298, 297, 352, 298, 297, 353, 298, 297, 
	354, 298, 297, 355, 298, 297, 356, 298, 
	297, 357, 298, 297, 358, 298, 297, 359, 
	298, 297, 360, 298, 297, 361, 298, 297, 
	346, 298, 297, 362, 298, 297, 363, 298, 
	297, 364, 298, 297, 365, 298, 297, 366, 
	298, 297, 367, 298, 297, 368, 298, 297, 
	369, 298, 297, 370, 298, 297, 346, 298, 
	297, 371, 298, 297, 372, 298, 297, 373, 
	298, 297, 374, 298, 297, 375, 298, 297, 
	376, 298, 297, 377, 298, 297, 378, 298, 
	297, 379, 298, 297, 380, 298, 297, 381, 
	298, 297, 382, 298, 297, 383, 298, 297, 
	346, 298, 297, 384, 298, 297, 385, 298, 
	297, 386, 298, 297, 387, 298, 297, 388, 
	298, 297, 389, 298, 297, 390, 298, 297, 
	391, 298, 297, 392, 298, 297, 393, 298, 
	297, 394, 298, 297, 395, 298, 297, 396, 
	298, 297, 397, 298, 297, 398, 298, 297, 
	399, 298, 297, 400, 298, 297, 338, 298, 
	297, 298, 401, 297, 298, 402, 297, 298, 
	403, 297, 298, 404, 297, 298, 405, 297, 
	298, 406, 297, 298, 407, 297, 298, 408, 
	297, 298, 409, 297, 298, 410, 297, 298, 
	411, 297, 298, 412, 297, 298, 413, 297, 
	298, 414, 297, 415, 0, 416, 0, 417, 
	0, 418, 0, 419, 0, 420, 0, 421, 
	0, 422, 0, 423, 0, 424, 0, 425, 
	0, 426, 0, 427, 0, 428, 0, 429, 
	0, 430, 0, 431, 0, 433, 432, 435, 
	434, 436, 435, 437, 438, 439, 438, 437, 
	434, 440, 441, 442, 443, 444, 445, 435, 
	434, 446, 435, 434, 447, 435, 434, 448, 
	435, 434, 449, 435, 434, 450, 435, 434, 
	451, 452, 435, 434, 453, 435, 434, 454, 
	435, 434, 455, 435, 434, 456, 435, 434, 
	457, 435, 434, 458, 435, 434, 459, 435, 
	434, 460, 435, 434, 435, 461, 434, 462, 
	435, 434, 463, 435, 434, 464, 435, 434, 
	458, 435, 434, 465, 435, 434, 466, 435, 
	434, 467, 435, 434, 468, 435, 434, 469, 
	435, 434, 470, 435, 434, 471, 435, 434, 
	472, 435, 434, 473, 435, 434, 474, 435, 
	434, 475, 435, 434, 456, 435, 434, 476, 
	435, 434, 477, 435, 434, 478, 435, 434, 
	479, 480, 435, 434, 481, 435, 434, 482, 
	435, 434, 483, 435, 434, 484, 435, 434, 
	485, 435, 434, 460, 435, 434, 486, 435, 
	434, 487, 435, 434, 488, 435, 434, 489, 
	435, 434, 490, 435, 434, 484, 435, 434, 
	491, 492, 435, 434, 493, 435, 434, 494, 
	435, 434, 495, 435, 434, 496, 435, 434, 
	497, 435, 434, 498, 435, 434, 487, 435, 
	434, 499, 435, 434, 500, 435, 434, 501, 
	435, 434, 502, 435, 434, 503, 435, 434, 
	504, 435, 434, 505, 435, 434, 506, 435, 
	434, 507, 435, 434, 508, 435, 461, 434, 
	460, 435, 434, 509, 510, 435, 434, 511, 
	435, 434, 512, 435, 434, 513, 435, 434, 
	514, 435, 434, 484, 435, 434, 515, 516, 
	435, 434, 517, 435, 434, 518, 435, 434, 
	519, 435, 434, 520, 435, 434, 521, 435, 
	434, 522, 435, 434, 523, 435, 434, 524, 
	435, 434, 525, 435, 434, 526, 435, 434, 
	527, 435, 434, 528, 435, 434, 529, 435, 
	434, 530, 435, 434, 435, 531, 434, 532, 
	435, 434, 533, 435, 434, 534, 435, 434, 
	535, 435, 434, 536, 435, 434, 537, 435, 
	434, 538, 435, 434, 539, 435, 434, 540, 
	435, 434, 541, 435, 434, 542, 435, 434, 
	543, 435, 434, 544, 435, 434, 545, 435, 
	434, 546, 435, 434, 484, 435, 434, 547, 
	435, 434, 548, 435, 434, 549, 435, 434, 
	550, 435, 434, 551, 435, 434, 552, 435, 
	434, 553, 435, 434, 554, 435, 434, 555, 
	435, 434, 556, 435, 434, 557, 558, 435, 
	434, 460, 435, 434, 559, 435, 434, 508, 
	435, 434, 560, 435, 434, 561, 435, 434, 
	562, 435, 434, 563, 435, 434, 564, 435, 
	434, 565, 435, 434, 566, 435, 434, 567, 
	435, 434, 568, 435, 434, 569, 435, 434, 
	570, 435, 434, 571, 435, 434, 572, 435, 
	434, 573, 435, 434, 574, 435, 434, 575, 
	435, 434, 576, 435, 434, 472, 435, 434, 
	435, 577, 434, 435, 578, 434, 435, 579, 
	434, 435, 580, 434, 435, 581, 434, 435, 
	582, 434, 435, 583, 434, 435, 584, 434, 
	435, 585, 434, 435, 586, 434, 435, 587, 
	434, 435, 588, 434, 435, 589, 434, 435, 
	590, 434, 591, 592, 0, 593, 0, 594, 
	0, 595, 0, 100, 0, 596, 0, 597, 
	0, 598, 599, 0, 600, 0, 601, 0, 
	602, 0, 603, 0, 604, 0, 113, 0, 
	605, 0, 606, 0, 607, 0, 608, 0, 
	609, 0, 610, 0, 611, 0, 430, 0, 
	612, 613, 0, 614, 0, 615, 0, 616, 
	0, 617, 0, 618, 0, 619, 0, 620, 
	0, 621, 0, 622, 0, 623, 0, 603, 
	0, 624, 0, 625, 0, 626, 0, 627, 
	0, 628, 0, 629, 0, 630, 0, 631, 
	0, 632, 0, 633, 634, 0, 635, 0, 
	636, 0, 638, 637, 640, 639, 641, 640, 
	642, 643, 643, 642, 639, 644, 645, 646, 
	640, 639, 647, 640, 639, 648, 640, 639, 
	649, 640, 639, 650, 640, 639, 651, 640, 
	639, 652, 640, 639, 653, 640, 639, 654, 
	640, 639, 655, 640, 639, 656, 640, 639, 
	657, 640, 639, 658, 640, 639, 659, 640, 
	639, 660, 640, 639, 661, 640, 639, 662, 
	640, 639, 640, 663, 639, 664, 640, 639, 
	665, 640, 639, 666, 640, 639, 667, 640, 
	639, 668, 640, 639, 669, 640, 639, 670, 
	640, 639, 671, 640, 639, 672, 640, 639, 
	673, 640, 639, 674, 640, 639, 662, 640, 
	639, 675, 640, 639, 676, 640, 639, 677, 
	640, 639, 678, 640, 639, 679, 640, 639, 
	680, 640, 639, 681, 640, 639, 682, 640, 
	639, 683, 640, 639, 684, 640, 639, 685, 
	640, 639, 686, 640, 639, 687, 640, 639, 
	688, 640, 639, 689, 640, 639, 690, 640, 
	639, 691, 640, 639, 654, 640, 639, 693, 
	692, 695, 694, 696, 695, 697, 698, 699, 
	700, 698, 697, 694, 701, 702, 703, 704, 
	705, 706, 707, 708, 709, 695, 694, 710, 
	695, 694, 711, 695, 694, 712, 695, 694, 
	703, 695, 694, 695, 713, 694, 714, 695, 
	694, 715, 695, 694, 716, 695, 694, 717, 
	695, 694, 718, 695, 694, 719, 695, 694, 
	720, 695, 694, 721, 695, 694, 722, 695, 
	694, 703, 703, 703, 695, 694, 723, 695, 
	694, 724, 725, 695, 694, 726, 695, 694, 
	727, 695, 694, 728, 695, 713, 694, 703, 
	695, 694, 729, 695, 694, 730, 695, 694, 
	731, 695, 694, 732, 733, 695, 694, 734, 
	695, 694, 735, 695, 694, 736, 695, 694, 
	737, 695, 694, 738, 695, 694, 739, 695, 
	694, 740, 695, 694, 741, 695, 694, 695, 
	713, 694, 742, 695, 694, 743, 695, 694, 
	744, 695, 694, 739, 695, 694, 745, 695, 
	694, 746, 695, 694, 747, 695, 694, 748, 
	695, 694, 749, 695, 694, 750, 695, 694, 
	751, 695, 694, 752, 695, 694, 753, 695, 
	694, 754, 695, 694, 755, 695, 694, 737, 
	695, 694, 756, 757, 695, 694, 758, 695, 
	694, 759, 695, 694, 760, 695, 694, 728, 
	695, 694, 761, 695, 694, 762, 695, 694, 
	763, 764, 695, 694, 765, 695, 694, 766, 
	695, 694, 767, 695, 694, 768, 695, 694, 
	769, 695, 694, 741, 695, 694, 770, 695, 
	694, 771, 695, 694, 772, 695, 694, 773, 
	695, 694, 774, 695, 694, 768, 695, 694, 
	775, 776, 695, 694, 777, 695, 694, 778, 
	695, 694, 779, 695, 694, 780, 695, 694, 
	781, 695, 694, 782, 695, 694, 771, 695, 
	694, 783, 695, 694, 784, 695, 694, 785, 
	695, 694, 786, 695, 694, 787, 695, 694, 
	788, 695, 694, 789, 695, 694, 790, 695, 
	694, 741, 695, 694, 791, 792, 695, 694, 
	793, 695, 694, 794, 695, 694, 795, 695, 
	694, 796, 695, 694, 768, 695, 694, 797, 
	798, 695, 694, 799, 695, 694, 800, 695, 
	694, 801, 695, 694, 802, 695, 694, 803, 
	695, 694, 804, 695, 694, 805, 695, 694, 
	806, 695, 694, 807, 695, 694, 808, 695, 
	694, 809, 695, 694, 810, 695, 694, 811, 
	695, 694, 812, 695, 694, 695, 813, 694, 
	814, 695, 694, 815, 695, 694, 816, 695, 
	694, 817, 695, 694, 818, 695, 694, 819, 
	695, 694, 820, 695, 694, 821, 695, 694, 
	822, 695, 694, 823, 695, 694, 824, 695, 
	694, 825, 695, 694, 826, 695, 694, 827, 
	695, 694, 828, 695, 694, 768, 695, 694, 
	829, 695, 694, 830, 695, 694, 831, 695, 
	694, 832, 695, 694, 833, 695, 694, 834, 
	695, 694, 835, 695, 694, 836, 695, 694, 
	837, 695, 694, 838, 695, 694, 839, 695, 
	694, 741, 695, 694, 840, 695, 694, 841, 
	695, 694, 842, 695, 694, 843, 695, 694, 
	844, 695, 694, 845, 695, 694, 846, 695, 
	694, 847, 695, 694, 848, 695, 694, 849, 
	695, 694, 850, 695, 694, 851, 695, 694, 
	852, 695, 694, 853, 695, 694, 854, 695, 
	694, 855, 695, 694, 856, 695, 694, 752, 
	695, 694, 695, 857, 694, 695, 858, 694, 
	695, 859, 694, 695, 860, 694, 695, 861, 
	694, 695, 862, 694, 695, 863, 694, 695, 
	864, 694, 695, 865, 694, 695, 866, 694, 
	695, 867, 694, 695, 868, 694, 695, 869, 
	694, 695, 870, 694, 871, 872, 0, 873, 
	0, 874, 0, 875, 0, 876, 0, 877, 
	0, 878, 0, 293, 0, 879, 880, 0, 
	881, 0, 882, 0, 883, 0, 884, 0, 
	885, 0, 886, 0, 887, 0, 888, 0, 
	889, 0, 890, 0, 891, 0, 892, 0, 
	893, 0, 894, 0, 895, 0, 896, 0, 
	897, 0, 898, 0, 899, 0, 900, 0, 
	901, 0, 902, 0, 903, 0, 904, 0, 
	905, 0, 906, 0, 907, 0, 908, 0, 
	909, 0, 910, 0, 877, 0, 911, 0, 
	912, 0, 913, 0, 914, 0, 915, 0, 
	916, 0, 917, 0, 918, 0, 919, 0, 
	920, 0, 921, 922, 0, 923, 0, 634, 
	0, 924, 0, 633, 0, 925, 0, 926, 
	0, 927, 0, 928, 0, 929, 0, 930, 
	0, 931, 0, 932, 0, 933, 0, 934, 
	0, 935, 0, 936, 0, 937, 0, 938, 
	0, 939, 0, 940, 0, 941, 0, 422, 
	0, 942, 0, 2, 0, 943, 0
];

const _lexer_trans_targs = [
	0, 2, 10, 10, 11, 20, 22, 7, 
	36, 39, 868, 3, 45, 7, 55, 354, 
	525, 547, 795, 850, 4, 5, 6, 8, 
	9, 9, 10, 21, 12, 13, 14, 15, 
	15, 15, 16, 15, 15, 15, 16, 17, 
	18, 19, 10, 19, 20, 10, 21, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 
	32, 33, 34, 35, 870, 37, 38, 10, 
	37, 36, 38, 39, 40, 41, 43, 44, 
	42, 40, 41, 42, 40, 43, 2, 44, 
	11, 20, 22, 7, 36, 39, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 56, 
	57, 61, 58, 59, 60, 62, 63, 64, 
	65, 233, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 75, 76, 77, 
	76, 10, 219, 82, 78, 84, 82, 94, 
	111, 125, 141, 151, 201, 79, 80, 81, 
	83, 2, 10, 10, 11, 20, 22, 7, 
	36, 39, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 95, 96, 100, 97, 98, 
	99, 101, 102, 103, 104, 105, 106, 107, 
	108, 109, 110, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	126, 130, 127, 128, 129, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	152, 157, 153, 154, 155, 156, 158, 189, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 172, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 186, 187, 188, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 10, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 241, 242, 243, 242, 10, 340, 248, 
	244, 249, 248, 259, 265, 282, 298, 308, 
	322, 245, 246, 247, 83, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 260, 261, 
	262, 263, 264, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 280, 281, 283, 287, 284, 285, 286, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 299, 300, 301, 302, 303, 304, 
	305, 306, 307, 309, 310, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 334, 335, 336, 337, 338, 
	339, 341, 342, 343, 344, 345, 346, 347, 
	348, 349, 350, 351, 352, 353, 10, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 368, 369, 370, 371, 
	372, 373, 372, 373, 374, 373, 10, 511, 
	375, 394, 406, 422, 441, 493, 376, 377, 
	378, 379, 380, 381, 390, 382, 383, 384, 
	385, 386, 387, 388, 389, 83, 391, 392, 
	393, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 404, 405, 407, 408, 409, 410, 
	416, 411, 412, 413, 414, 415, 417, 418, 
	419, 420, 421, 423, 430, 424, 425, 426, 
	427, 428, 429, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 442, 447, 443, 
	444, 445, 446, 448, 479, 449, 450, 451, 
	452, 453, 454, 455, 456, 457, 458, 459, 
	460, 461, 462, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 477, 478, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 489, 490, 491, 492, 
	494, 495, 496, 497, 498, 499, 500, 501, 
	502, 503, 504, 505, 506, 507, 508, 509, 
	510, 512, 513, 514, 515, 516, 517, 518, 
	519, 520, 521, 522, 523, 524, 10, 526, 
	530, 527, 528, 529, 531, 532, 533, 539, 
	534, 535, 536, 537, 538, 540, 541, 542, 
	543, 544, 545, 546, 548, 559, 549, 550, 
	551, 552, 553, 554, 555, 556, 557, 558, 
	560, 561, 562, 563, 564, 565, 566, 567, 
	568, 569, 622, 570, 571, 572, 573, 572, 
	573, 574, 573, 10, 575, 592, 604, 576, 
	577, 578, 579, 580, 581, 582, 583, 584, 
	585, 586, 587, 588, 589, 590, 591, 83, 
	593, 594, 595, 596, 597, 598, 599, 600, 
	601, 602, 603, 605, 606, 607, 608, 609, 
	610, 611, 612, 613, 614, 615, 616, 617, 
	618, 619, 620, 621, 623, 624, 623, 624, 
	625, 624, 10, 781, 630, 626, 631, 630, 
	641, 664, 676, 696, 713, 763, 627, 628, 
	629, 83, 632, 633, 634, 635, 636, 637, 
	638, 639, 640, 642, 643, 647, 644, 645, 
	646, 648, 649, 650, 651, 660, 652, 653, 
	654, 655, 656, 657, 658, 659, 661, 662, 
	663, 665, 666, 667, 668, 669, 670, 671, 
	672, 673, 674, 675, 677, 681, 678, 679, 
	680, 682, 683, 684, 690, 685, 686, 687, 
	688, 689, 691, 692, 693, 694, 695, 697, 
	704, 698, 699, 700, 701, 702, 703, 705, 
	706, 707, 708, 709, 710, 711, 712, 714, 
	719, 715, 716, 717, 718, 720, 751, 721, 
	722, 723, 724, 725, 726, 727, 728, 729, 
	730, 731, 732, 733, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	746, 747, 748, 749, 750, 752, 753, 754, 
	755, 756, 757, 758, 759, 760, 761, 762, 
	764, 765, 766, 767, 768, 769, 770, 771, 
	772, 773, 774, 775, 776, 777, 778, 779, 
	780, 782, 783, 784, 785, 786, 787, 788, 
	789, 790, 791, 792, 793, 794, 10, 796, 
	803, 797, 798, 799, 800, 801, 802, 804, 
	835, 805, 806, 807, 808, 809, 810, 811, 
	812, 813, 814, 815, 816, 817, 818, 819, 
	820, 821, 822, 823, 824, 825, 826, 827, 
	828, 829, 830, 831, 832, 833, 834, 836, 
	837, 838, 839, 840, 841, 842, 843, 844, 
	845, 846, 848, 847, 849, 851, 852, 853, 
	854, 855, 856, 857, 858, 859, 860, 861, 
	862, 863, 864, 865, 866, 867, 869, 0
];

const _lexer_trans_actions = [
	39, 25, 0, 47, 3, 1, 0, 25, 
	1, 31, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 0, 99, 19, 0, 0, 47, 5, 
	41, 119, 41, 0, 29, 111, 29, 29, 
	0, 7, 95, 0, 0, 103, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 107, 
	23, 44, 0, 0, 0, 33, 33, 47, 
	33, 80, 0, 0, 35, 0, 89, 0, 
	86, 83, 37, 89, 83, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 77, 
	0, 65, 29, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 56, 27, 115, 53, 50, 27, 56, 
	50, 59, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 11, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 77, 0, 71, 29, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 77, 0, 62, 29, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 9, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 0, 68, 29, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 870;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 1419 "js/lib/gherkin/lexer/sr_cyrl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */
  
/* line 1426 "js/lib/gherkin/lexer/sr_cyrl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1642 "js/lib/gherkin/lexer/sr_cyrl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1681 "js/lib/gherkin/lexer/sr_cyrl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

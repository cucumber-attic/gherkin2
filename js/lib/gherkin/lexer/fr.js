
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fr.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 45, 50, 
	55, 60, 65, 69, 73, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 94, 
	99, 106, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 167, 169, 
	171, 190, 192, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 278, 
	280, 282, 284, 286, 288, 290, 292, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 398, 399, 400, 401, 402, 
	404, 405, 406, 407, 408, 409, 410, 411, 
	412, 413, 415, 416, 417, 418, 419, 420, 
	421, 422, 423, 424, 425, 426, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 484, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 506, 508, 
	510, 512, 514, 516, 518, 520, 522, 524, 
	526, 528, 530, 532, 534, 536, 538, 540, 
	542, 545, 547, 549, 551, 553, 555, 557, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 579, 580, 581, 582, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	594, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 637, 639, 
	641, 643, 645, 647, 649, 651, 653, 655, 
	657, 659, 661, 663, 665, 667, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 714, 716, 718, 720, 
	722, 724, 726, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 747, 750, 752, 754, 
	756, 758, 760, 762, 764, 766, 768, 770, 
	772, 774, 777, 779, 781, 782, 783, 787, 
	793, 796, 798, 804, 823, 825, 827, 829, 
	831, 833, 836, 838, 840, 842, 844, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 866, 868, 870, 872, 874, 876, 878, 
	880, 882, 884, 886, 888, 890, 892, 894, 
	897, 899, 901, 903, 905, 907, 909, 911, 
	913, 915, 918, 920, 922, 924, 926, 928, 
	930, 932, 934, 936, 938, 940, 942, 945, 
	947, 949, 950, 951
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 70, 76, 77, 80, 81, 83, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 70, 76, 
	77, 80, 81, 83, 124, 9, 13, 34, 
	34, 10, 32, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	111, 114, 115, 111, 110, 116, 101, 120, 
	116, 101, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 69, 70, 76, 77, 
	80, 81, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 70, 76, 77, 
	80, 81, 83, 124, 9, 13, 116, 120, 
	32, 97, 110, 116, 32, 100, 111, 110, 
	110, -61, -87, 101, 109, 112, 108, 101, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 111, 10, 110, 10, 
	99, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -61, 10, -87, 10, 10, 
	58, 111, 110, 99, 116, 105, 111, 110, 
	110, 97, 108, 105, 116, -61, -87, 58, 
	10, 10, 10, 32, 35, 37, 64, 67, 
	69, 70, 80, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 101, 10, 120, 10, 116, 10, 101, 
	10, 58, 10, 120, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 101, 10, 115, 
	10, 111, 10, 110, 10, 99, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -87, 10, 10, 108, 10, 97, 
	10, 110, 10, 32, 10, 100, 10, 117, 
	10, 32, 10, 83, 115, 10, 99, -61, 
	10, -87, 10, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 111, 114, 115, 
	113, 117, 39, 101, 97, 105, 108, 97, 
	110, 32, 100, 117, 32, 83, 115, 99, 
	-61, -87, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 69, 70, 76, 77, 81, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	116, 10, 32, 97, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 110, 
	10, 110, -61, 10, -87, 10, 10, 111, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-87, 10, 10, 58, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 117, 10, 
	97, 10, 110, 10, 100, 10, 99, 111, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 105, 
	10, 116, 117, 97, 110, 100, 99, 111, 
	-61, -87, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 111, 10, 114, 10, 
	115, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 101, 10, 
	58, 10, 116, 10, 32, 97, 10, 110, 
	10, 116, 10, 32, 10, 100, 10, 111, 
	10, 110, 10, 110, -61, 10, -87, 10, 
	10, 111, 10, 110, 10, 99, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -87, 10, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 108, 10, 
	97, 10, 110, 10, 32, 10, 100, 10, 
	117, 10, 32, 10, 83, 115, 10, 99, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 117, 
	10, 97, 10, 110, 10, 100, 10, 99, 
	111, 10, 105, 10, 116, 105, 116, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 70, 76, 
	77, 80, 81, 83, 124, 9, 13, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	116, 10, 32, 97, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 110, 
	10, 110, -61, 10, -87, 10, 10, 111, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-87, 10, 10, 58, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 108, 10, 
	97, 10, 110, 10, 32, 10, 100, 10, 
	117, 10, 32, 10, 83, 115, 10, 99, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 117, 
	10, 97, 10, 110, 10, 100, 10, 99, 
	111, 10, 105, 10, 116, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	17, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 1, 1, 2, 4, 
	3, 2, 4, 17, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 47, 52, 
	57, 62, 67, 71, 75, 78, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	120, 127, 132, 134, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 176, 179, 182, 185, 188, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	221, 240, 243, 246, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	272, 274, 276, 278, 280, 282, 289, 292, 
	295, 298, 301, 304, 307, 310, 313, 316, 
	319, 322, 325, 328, 331, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 366, 368, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	431, 434, 437, 440, 443, 446, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 497, 500, 
	503, 506, 509, 512, 515, 518, 521, 524, 
	527, 530, 534, 537, 540, 543, 546, 549, 
	552, 555, 558, 560, 562, 564, 566, 568, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 629, 632, 
	635, 638, 641, 644, 647, 650, 653, 656, 
	659, 662, 665, 668, 671, 674, 677, 680, 
	683, 686, 689, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 738, 741, 744, 747, 750, 753, 
	756, 759, 762, 765, 768, 771, 774, 777, 
	780, 784, 787, 790, 793, 796, 799, 802, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 833, 835, 837, 839, 841, 844, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 881, 884, 887, 890, 893, 896, 899, 
	902, 905, 908, 911, 914, 917, 920, 923, 
	926, 929, 932, 935, 938, 941, 944, 947, 
	950, 953, 956, 959, 962, 965, 969, 972, 
	975, 978, 981, 984, 987, 990, 993, 996, 
	999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 
	1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 
	1047, 1050, 1053, 1057, 1060, 1063, 1066, 1069, 
	1072, 1075, 1078, 1081, 1084, 1088, 1091, 1094, 
	1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 
	1121, 1124, 1128, 1131, 1134, 1136, 1138, 1142, 
	1148, 1152, 1155, 1161, 1180, 1183, 1186, 1189, 
	1192, 1195, 1199, 1202, 1205, 1208, 1211, 1214, 
	1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 
	1241, 1244, 1247, 1250, 1253, 1256, 1259, 1262, 
	1265, 1268, 1271, 1274, 1277, 1280, 1283, 1286, 
	1290, 1293, 1296, 1299, 1302, 1305, 1308, 1311, 
	1314, 1317, 1321, 1324, 1327, 1330, 1333, 1336, 
	1339, 1342, 1345, 1348, 1351, 1354, 1357, 1361, 
	1364, 1367, 1369, 1371
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 21, 20, 20, 0, 24, 
	23, 25, 23, 22, 28, 27, 29, 27, 
	26, 28, 27, 30, 27, 26, 28, 27, 
	31, 27, 26, 33, 32, 32, 0, 2, 
	34, 34, 0, 36, 37, 35, 2, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 0, 53, 
	55, 56, 54, 0, 0, 0, 0, 57, 
	58, 59, 58, 58, 61, 60, 57, 2, 
	62, 7, 62, 0, 63, 0, 64, 0, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 76, 75, 78, 77, 
	78, 79, 80, 81, 82, 80, 83, 84, 
	85, 86, 87, 88, 89, 90, 79, 77, 
	78, 91, 77, 78, 92, 77, 78, 93, 
	77, 78, 94, 77, 78, 95, 77, 78, 
	96, 77, 78, 97, 77, 78, 98, 77, 
	78, 99, 77, 78, 100, 77, 78, 101, 
	77, 78, 102, 77, 78, 103, 77, 78, 
	104, 77, 78, 105, 77, 107, 106, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 106, 0, 
	123, 124, 0, 52, 125, 0, 126, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 66, 0, 
	134, 0, 135, 0, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 142, 141, 
	144, 143, 144, 145, 146, 147, 146, 145, 
	143, 144, 148, 143, 144, 149, 143, 144, 
	150, 143, 144, 151, 143, 144, 152, 143, 
	144, 153, 143, 144, 154, 143, 144, 155, 
	143, 144, 156, 143, 144, 157, 143, 144, 
	158, 143, 144, 159, 143, 160, 144, 143, 
	161, 144, 143, 144, 162, 143, 163, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 179, 178, 181, 180, 
	181, 182, 183, 184, 183, 185, 186, 187, 
	188, 189, 182, 180, 181, 190, 180, 181, 
	191, 180, 181, 192, 180, 181, 193, 180, 
	181, 194, 180, 181, 195, 180, 181, 196, 
	180, 181, 197, 180, 181, 198, 180, 181, 
	199, 180, 181, 200, 180, 181, 201, 180, 
	181, 202, 180, 181, 203, 180, 181, 204, 
	180, 181, 205, 180, 181, 206, 180, 181, 
	207, 180, 181, 208, 180, 181, 209, 180, 
	181, 210, 180, 181, 211, 180, 181, 212, 
	180, 181, 213, 180, 181, 214, 180, 181, 
	215, 180, 181, 216, 180, 181, 217, 180, 
	181, 210, 180, 181, 218, 180, 181, 219, 
	180, 181, 220, 180, 181, 221, 180, 181, 
	222, 180, 181, 223, 180, 181, 224, 180, 
	181, 225, 180, 181, 226, 180, 181, 227, 
	180, 181, 228, 180, 181, 229, 180, 230, 
	181, 180, 210, 181, 180, 181, 231, 180, 
	181, 232, 180, 181, 233, 180, 181, 234, 
	180, 181, 235, 180, 181, 236, 180, 181, 
	237, 180, 181, 238, 238, 180, 181, 239, 
	180, 240, 181, 180, 241, 181, 180, 181, 
	242, 180, 181, 243, 180, 181, 244, 180, 
	181, 245, 180, 181, 210, 180, 246, 0, 
	247, 0, 248, 0, 249, 0, 250, 0, 
	52, 66, 0, 251, 0, 65, 0, 252, 
	0, 253, 0, 254, 0, 255, 0, 256, 
	0, 257, 0, 258, 0, 259, 259, 0, 
	260, 0, 261, 0, 262, 0, 263, 0, 
	264, 0, 265, 0, 266, 0, 267, 0, 
	268, 0, 270, 269, 272, 271, 272, 273, 
	274, 275, 276, 274, 277, 278, 279, 280, 
	281, 282, 283, 273, 271, 272, 284, 271, 
	272, 285, 271, 272, 286, 271, 272, 287, 
	271, 272, 288, 271, 272, 289, 271, 272, 
	290, 271, 272, 291, 271, 272, 292, 271, 
	272, 293, 271, 272, 294, 271, 272, 295, 
	271, 272, 296, 271, 272, 297, 271, 272, 
	298, 271, 272, 299, 271, 272, 300, 271, 
	272, 301, 271, 272, 302, 271, 272, 303, 
	271, 272, 298, 304, 271, 272, 305, 271, 
	272, 306, 271, 272, 307, 271, 272, 308, 
	271, 272, 309, 271, 272, 310, 271, 272, 
	311, 271, 312, 272, 271, 302, 272, 271, 
	272, 313, 271, 272, 314, 271, 272, 315, 
	271, 272, 316, 271, 272, 317, 271, 272, 
	318, 271, 272, 319, 271, 272, 320, 271, 
	272, 321, 271, 272, 322, 271, 272, 323, 
	271, 272, 324, 271, 325, 272, 271, 326, 
	272, 271, 272, 298, 271, 272, 327, 271, 
	272, 328, 271, 272, 329, 271, 272, 330, 
	271, 272, 331, 271, 272, 298, 302, 271, 
	272, 332, 271, 272, 301, 271, 272, 333, 
	271, 272, 334, 271, 272, 335, 271, 272, 
	302, 271, 272, 336, 337, 271, 338, 272, 
	271, 339, 272, 271, 272, 340, 271, 272, 
	341, 271, 272, 342, 271, 272, 343, 271, 
	272, 326, 271, 272, 344, 271, 272, 302, 
	271, 345, 0, 346, 0, 347, 0, 66, 
	0, 348, 349, 0, 350, 0, 351, 0, 
	352, 0, 353, 0, 354, 0, 355, 0, 
	356, 0, 357, 0, 359, 358, 361, 360, 
	361, 362, 363, 364, 365, 363, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 362, 
	360, 361, 375, 360, 361, 376, 360, 361, 
	377, 360, 361, 378, 360, 361, 379, 360, 
	361, 380, 360, 361, 381, 360, 361, 382, 
	360, 361, 383, 360, 361, 384, 360, 361, 
	385, 360, 361, 386, 360, 361, 387, 360, 
	361, 388, 360, 361, 389, 360, 361, 390, 
	360, 361, 391, 360, 361, 392, 360, 361, 
	393, 360, 361, 394, 360, 361, 395, 360, 
	361, 396, 360, 361, 397, 360, 361, 398, 
	360, 361, 399, 360, 361, 400, 360, 361, 
	389, 360, 361, 401, 360, 361, 389, 402, 
	360, 361, 403, 360, 361, 404, 360, 361, 
	405, 360, 361, 406, 360, 361, 407, 360, 
	361, 408, 360, 361, 409, 360, 410, 361, 
	360, 393, 361, 360, 361, 411, 360, 361, 
	412, 360, 361, 413, 360, 361, 414, 360, 
	361, 415, 360, 361, 416, 360, 361, 417, 
	360, 361, 418, 360, 361, 419, 360, 361, 
	420, 360, 361, 421, 360, 361, 422, 360, 
	423, 361, 360, 400, 361, 360, 361, 424, 
	360, 361, 425, 360, 361, 426, 360, 361, 
	427, 360, 361, 428, 360, 361, 389, 393, 
	360, 361, 429, 360, 361, 392, 360, 361, 
	430, 360, 361, 431, 360, 361, 432, 360, 
	361, 433, 360, 361, 434, 360, 361, 435, 
	360, 361, 436, 360, 361, 437, 437, 360, 
	361, 438, 360, 439, 361, 360, 440, 361, 
	360, 361, 441, 360, 361, 442, 360, 361, 
	443, 360, 361, 444, 360, 361, 400, 360, 
	361, 445, 360, 361, 446, 360, 361, 447, 
	360, 361, 393, 360, 361, 438, 448, 360, 
	361, 449, 360, 361, 393, 360, 450, 0, 
	66, 0, 451, 452, 451, 0, 455, 454, 
	456, 457, 454, 453, 0, 459, 460, 458, 
	0, 459, 458, 455, 461, 459, 460, 461, 
	458, 455, 462, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 477, 462, 0, 78, 478, 77, 78, 
	479, 77, 78, 480, 77, 78, 481, 77, 
	78, 482, 77, 78, 105, 483, 77, 78, 
	484, 77, 78, 485, 77, 78, 486, 77, 
	78, 487, 77, 78, 488, 77, 78, 489, 
	77, 78, 490, 77, 491, 78, 77, 481, 
	78, 77, 78, 492, 77, 78, 493, 77, 
	78, 494, 77, 78, 495, 77, 78, 496, 
	77, 78, 497, 77, 78, 498, 77, 78, 
	499, 77, 78, 500, 77, 78, 501, 77, 
	78, 502, 77, 78, 503, 77, 504, 78, 
	77, 505, 78, 77, 78, 105, 77, 78, 
	506, 77, 78, 507, 77, 78, 508, 77, 
	78, 509, 77, 78, 510, 77, 78, 105, 
	481, 77, 78, 511, 77, 78, 480, 77, 
	78, 512, 77, 78, 513, 77, 78, 514, 
	77, 78, 515, 77, 78, 516, 77, 78, 
	517, 77, 78, 518, 77, 78, 519, 519, 
	77, 78, 520, 77, 521, 78, 77, 522, 
	78, 77, 78, 523, 77, 78, 524, 77, 
	78, 525, 77, 78, 526, 77, 78, 505, 
	77, 78, 527, 77, 78, 528, 77, 78, 
	529, 77, 78, 481, 77, 78, 520, 530, 
	77, 78, 531, 77, 78, 481, 77, 532, 
	0, 1, 0, 533, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 38, 65, 101, 178, 184, 186, 273, 
	277, 374, 441, 4, 5, 6, 7, 7, 
	7, 8, 7, 7, 7, 8, 9, 10, 
	11, 2, 11, 12, 2, 13, 15, 16, 
	17, 18, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 443, 29, 30, 30, 2, 
	13, 32, 33, 2, 32, 31, 33, 35, 
	36, 37, 28, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 48, 47, 48, 48, 
	2, 49, 63, 380, 384, 395, 410, 416, 
	418, 434, 438, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	2, 64, 2, 2, 3, 12, 14, 28, 
	31, 34, 38, 65, 101, 178, 184, 186, 
	273, 277, 374, 66, 76, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 84, 
	85, 85, 2, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 64, 102, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 117, 118, 118, 2, 
	119, 133, 141, 148, 162, 170, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 2, 134, 135, 136, 137, 
	138, 139, 140, 64, 142, 143, 144, 145, 
	146, 147, 149, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 159, 160, 161, 163, 
	164, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 177, 179, 180, 
	181, 182, 183, 185, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 204, 
	205, 205, 2, 206, 220, 221, 225, 236, 
	251, 257, 259, 263, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	219, 2, 64, 222, 223, 224, 220, 226, 
	227, 228, 229, 230, 231, 232, 233, 234, 
	235, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 252, 
	253, 254, 255, 256, 258, 260, 261, 262, 
	264, 271, 265, 266, 267, 268, 269, 270, 
	272, 274, 275, 276, 278, 372, 279, 280, 
	281, 282, 283, 284, 285, 286, 287, 288, 
	287, 288, 288, 2, 289, 303, 304, 308, 
	316, 327, 341, 347, 349, 365, 369, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 300, 301, 302, 2, 64, 305, 306, 
	307, 303, 309, 310, 311, 312, 313, 314, 
	315, 317, 318, 319, 320, 321, 322, 323, 
	324, 325, 326, 328, 329, 330, 331, 332, 
	333, 334, 335, 336, 337, 338, 339, 340, 
	342, 343, 344, 345, 346, 348, 350, 351, 
	352, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 366, 367, 368, 
	370, 371, 373, 374, 375, 376, 378, 379, 
	377, 375, 376, 377, 375, 378, 379, 3, 
	12, 14, 28, 31, 34, 38, 65, 101, 
	178, 184, 186, 273, 277, 374, 381, 382, 
	383, 63, 385, 386, 387, 388, 389, 390, 
	391, 392, 393, 394, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 409, 411, 412, 413, 414, 415, 417, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	427, 428, 429, 430, 431, 432, 433, 435, 
	436, 437, 439, 440, 442, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 31, 0, 0, 0, 47, 5, 41, 
	119, 41, 0, 29, 111, 29, 29, 0, 
	7, 95, 0, 0, 103, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 0, 99, 
	19, 0, 23, 107, 23, 44, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 0, 
	65, 29, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 11, 27, 115, 53, 50, 27, 56, 
	50, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 62, 
	29, 77, 77, 77, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 71, 29, 77, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 68, 29, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 33, 47, 
	33, 80, 0, 0, 35, 0, 0, 86, 
	83, 37, 89, 83, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 443;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 807 "js/lib/gherkin/lexer/fr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
  
/* line 814 "js/lib/gherkin/lexer/fr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1030 "js/lib/gherkin/lexer/fr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1069 "js/lib/gherkin/lexer/fr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sk.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 39, 44, 
	49, 54, 59, 64, 68, 72, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	93, 98, 105, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 147, 149, 151, 153, 155, 
	157, 159, 161, 163, 165, 167, 169, 171, 
	173, 175, 177, 193, 195, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	282, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 336, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 360, 362, 
	364, 366, 368, 370, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 479, 480, 481, 482, 483, 484, 485, 
	486, 487, 488, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 518, 
	519, 520, 521, 522, 523, 524, 525, 526, 
	540, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	589, 591, 593, 595, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 668, 
	669, 673, 679, 682, 684, 690, 706, 709, 
	711, 713, 715, 717, 719, 722, 724, 726, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 765, 766
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 80, 83, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 80, 83, 84, 124, 9, 
	13, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 32, 10, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 32, 108, 
	101, 101, -60, -113, -61, -95, -60, -115, 
	114, 116, 32, 83, 99, 101, 110, -61, 
	-95, 114, 117, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 75, 80, 83, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 80, 83, 84, 124, 9, 
	13, 111, 114, -59, 107, 122, -66, 105, 
	97, 100, 97, 118, 107, 97, 58, 10, 
	10, 10, 32, 35, 37, 64, 78, 80, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -61, 
	10, -95, 10, -60, 10, -115, 10, 10, 
	114, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 10, 117, 10, 58, 10, 
	111, 114, -59, 10, 122, -66, 10, 10, 
	105, 10, 97, 10, 100, 10, 97, 10, 
	118, 10, 107, 10, 97, 10, 97, 10, 
	100, 10, 105, 10, 101, -61, 10, -83, 
	10, 10, 107, 10, 108, 10, 97, 10, 
	100, 10, 121, 10, 99, 10, 101, 10, 
	110, -61, 10, -95, 10, 10, 114, 105, 
	97, -60, -66, 97, 100, 105, 101, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 75, 78, 80, 83, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 101, 10, 101, -60, 10, -113, 
	10, -61, 10, -95, 10, -60, 10, -115, 
	10, 10, 114, 10, 116, 10, 32, 10, 
	83, 10, 99, 10, 101, 10, 110, -61, 
	10, -95, 10, 10, 114, 10, 117, 10, 
	58, 10, 111, -59, 10, 107, -66, 10, 
	10, 105, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 107, 10, 97, 10, 105, 
	10, 97, -60, 10, -66, 10, 10, 99, 
	10, 101, 10, 110, -61, 10, -95, 10, 
	10, 114, 10, 97, 10, 107, -61, -83, 
	107, 108, 97, 100, 121, 58, 10, 10, 
	10, 32, 35, 80, 124, 9, 13, 10, 
	111, -59, 10, -66, 10, 10, 105, 10, 
	97, 10, 100, 10, 97, 10, 118, 10, 
	107, 10, 97, 10, 58, 99, 101, 110, 
	-61, -95, 114, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 75, 78, 80, 
	83, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 108, 10, 101, 10, 
	101, -60, 10, -113, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, 10, 
	101, 10, 110, -61, 10, -95, 10, 10, 
	114, 10, 117, 10, 58, 10, 111, -59, 
	10, 107, 122, -66, 10, 10, 105, 10, 
	97, 10, 100, 10, 97, 10, 118, 10, 
	107, 10, 97, 10, 105, 10, 97, -60, 
	10, -66, 10, 10, 97, 10, 100, 10, 
	105, 10, 101, 10, 99, 10, 101, 10, 
	110, -61, 10, -95, 10, 10, 114, 10, 
	97, 10, 107, 97, 107, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 75, 78, 80, 83, 84, 124, 
	9, 13, 10, 32, 108, 10, 101, 10, 
	101, -60, 10, -113, 10, 10, 111, -59, 
	10, 107, -66, 10, 10, 105, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 107, 
	10, 97, 10, 58, 10, 105, 10, 97, 
	-60, 10, -66, 10, 10, 99, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 97, 10, 107, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 3, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 14, 2, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	8, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	2, 4, 3, 2, 4, 14, 3, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 41, 46, 
	51, 56, 61, 66, 70, 74, 77, 79, 
	81, 83, 85, 87, 89, 91, 93, 95, 
	97, 99, 101, 103, 105, 107, 109, 111, 
	114, 119, 126, 131, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 168, 170, 172, 
	174, 176, 178, 191, 194, 197, 200, 203, 
	206, 209, 212, 215, 218, 221, 224, 227, 
	230, 233, 236, 252, 255, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 291, 294, 297, 300, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 348, 351, 354, 357, 
	360, 363, 366, 369, 372, 375, 378, 381, 
	385, 389, 392, 395, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 449, 452, 455, 
	458, 461, 464, 466, 468, 470, 472, 474, 
	476, 478, 480, 482, 484, 486, 500, 503, 
	506, 509, 512, 515, 518, 521, 524, 527, 
	530, 533, 536, 539, 542, 545, 549, 552, 
	555, 558, 561, 564, 567, 570, 573, 576, 
	579, 582, 585, 588, 591, 594, 597, 600, 
	603, 606, 609, 612, 616, 619, 622, 625, 
	628, 631, 634, 637, 640, 643, 646, 649, 
	652, 655, 658, 661, 664, 667, 670, 673, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 738, 
	740, 742, 744, 746, 748, 750, 752, 754, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 885, 888, 
	891, 894, 897, 900, 903, 906, 909, 912, 
	915, 918, 921, 924, 927, 930, 933, 936, 
	939, 942, 945, 948, 951, 954, 957, 959, 
	961, 965, 971, 975, 978, 984, 1000, 1004, 
	1007, 1010, 1013, 1016, 1019, 1023, 1026, 1029, 
	1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053, 
	1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 
	1080, 1083, 1086, 1088, 1090
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 18, 17, 17, 
	0, 21, 20, 22, 20, 19, 25, 24, 
	26, 24, 23, 25, 24, 27, 24, 23, 
	25, 24, 28, 24, 23, 30, 29, 31, 
	29, 0, 2, 32, 32, 0, 30, 29, 
	29, 0, 34, 35, 33, 2, 0, 36, 
	0, 37, 0, 38, 0, 39, 0, 40, 
	0, 41, 0, 42, 0, 43, 0, 44, 
	0, 45, 0, 46, 0, 47, 0, 48, 
	0, 49, 0, 50, 0, 0, 51, 53, 
	54, 52, 0, 0, 0, 0, 55, 56, 
	57, 56, 56, 59, 58, 55, 2, 60, 
	7, 60, 0, 50, 61, 0, 62, 0, 
	63, 0, 64, 0, 62, 0, 65, 0, 
	66, 0, 67, 0, 68, 0, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 82, 81, 
	84, 83, 84, 85, 86, 87, 88, 86, 
	89, 90, 91, 92, 93, 85, 83, 84, 
	94, 83, 84, 95, 83, 84, 96, 83, 
	84, 97, 83, 84, 98, 83, 84, 99, 
	83, 84, 100, 83, 84, 101, 83, 84, 
	102, 83, 84, 103, 83, 84, 104, 83, 
	84, 105, 83, 84, 106, 83, 84, 107, 
	83, 84, 108, 83, 110, 109, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 109, 0, 123, 124, 0, 125, 
	126, 127, 0, 128, 0, 129, 0, 130, 
	0, 131, 0, 132, 0, 133, 0, 134, 
	0, 135, 0, 136, 0, 138, 137, 140, 
	139, 140, 141, 142, 143, 142, 144, 145, 
	146, 141, 139, 140, 147, 139, 140, 148, 
	139, 140, 149, 139, 140, 150, 139, 140, 
	151, 139, 140, 152, 139, 140, 153, 139, 
	140, 154, 139, 140, 155, 139, 140, 156, 
	139, 140, 157, 139, 140, 158, 139, 140, 
	159, 139, 140, 160, 139, 161, 140, 139, 
	162, 140, 139, 163, 140, 139, 164, 140, 
	139, 140, 165, 139, 140, 166, 139, 140, 
	167, 139, 140, 168, 139, 140, 169, 139, 
	140, 170, 139, 140, 171, 139, 172, 140, 
	139, 173, 140, 139, 140, 174, 139, 140, 
	175, 139, 140, 176, 139, 140, 177, 178, 
	139, 179, 140, 180, 139, 181, 140, 139, 
	140, 182, 139, 140, 183, 139, 140, 184, 
	139, 140, 185, 139, 140, 186, 139, 140, 
	187, 139, 140, 175, 139, 140, 188, 139, 
	140, 189, 139, 140, 190, 139, 140, 175, 
	139, 191, 140, 139, 192, 140, 139, 140, 
	193, 139, 140, 194, 139, 140, 195, 139, 
	140, 196, 139, 140, 175, 139, 140, 197, 
	139, 140, 198, 139, 140, 199, 139, 200, 
	140, 139, 201, 140, 139, 140, 175, 139, 
	202, 0, 203, 0, 204, 0, 62, 0, 
	205, 0, 206, 0, 207, 0, 208, 0, 
	209, 0, 211, 210, 213, 212, 213, 214, 
	215, 216, 217, 215, 218, 219, 220, 221, 
	222, 223, 214, 212, 213, 224, 212, 213, 
	225, 212, 213, 226, 212, 213, 227, 212, 
	213, 228, 212, 213, 229, 212, 213, 230, 
	212, 213, 231, 212, 213, 232, 212, 213, 
	233, 212, 213, 234, 212, 213, 235, 212, 
	213, 236, 212, 213, 237, 212, 213, 238, 
	212, 213, 238, 239, 212, 213, 240, 212, 
	213, 241, 212, 242, 213, 212, 240, 213, 
	212, 243, 213, 212, 244, 213, 212, 245, 
	213, 212, 246, 213, 212, 213, 247, 212, 
	213, 248, 212, 213, 249, 212, 213, 250, 
	212, 213, 251, 212, 213, 252, 212, 213, 
	253, 212, 254, 213, 212, 255, 213, 212, 
	213, 256, 212, 213, 257, 212, 213, 238, 
	212, 213, 258, 212, 259, 213, 260, 212, 
	261, 213, 212, 213, 262, 212, 213, 263, 
	212, 213, 264, 212, 213, 265, 212, 213, 
	266, 212, 213, 267, 212, 213, 257, 212, 
	213, 268, 212, 213, 269, 212, 270, 213, 
	212, 240, 213, 212, 213, 271, 212, 213, 
	272, 212, 213, 273, 212, 274, 213, 212, 
	275, 213, 212, 213, 257, 212, 213, 276, 
	212, 213, 240, 212, 277, 0, 278, 0, 
	279, 0, 280, 0, 281, 0, 282, 0, 
	283, 0, 284, 0, 286, 285, 288, 287, 
	288, 289, 290, 291, 290, 289, 287, 288, 
	292, 287, 293, 288, 287, 294, 288, 287, 
	288, 295, 287, 288, 296, 287, 288, 297, 
	287, 288, 298, 287, 288, 299, 287, 288, 
	300, 287, 288, 301, 287, 288, 302, 287, 
	303, 0, 304, 0, 305, 0, 306, 0, 
	307, 0, 308, 0, 309, 0, 311, 310, 
	313, 312, 313, 314, 315, 316, 317, 315, 
	318, 319, 320, 321, 322, 323, 314, 312, 
	313, 324, 312, 313, 325, 312, 313, 326, 
	312, 313, 327, 312, 313, 328, 312, 313, 
	329, 312, 313, 330, 312, 313, 331, 312, 
	313, 332, 312, 313, 333, 312, 313, 334, 
	312, 313, 335, 312, 313, 336, 312, 313, 
	337, 312, 313, 338, 312, 313, 338, 339, 
	312, 313, 340, 312, 313, 341, 312, 342, 
	313, 312, 340, 313, 312, 343, 313, 312, 
	344, 313, 312, 345, 313, 312, 346, 313, 
	312, 313, 347, 312, 313, 348, 312, 313, 
	349, 312, 313, 350, 312, 313, 351, 312, 
	313, 352, 312, 313, 353, 312, 354, 313, 
	312, 355, 313, 312, 313, 356, 312, 313, 
	357, 312, 313, 338, 312, 313, 358, 312, 
	359, 313, 360, 361, 312, 362, 313, 312, 
	313, 363, 312, 313, 364, 312, 313, 365, 
	312, 313, 366, 312, 313, 367, 312, 313, 
	368, 312, 313, 357, 312, 313, 369, 312, 
	313, 370, 312, 371, 313, 312, 340, 313, 
	312, 313, 372, 312, 313, 373, 312, 313, 
	374, 312, 313, 357, 312, 313, 375, 312, 
	313, 376, 312, 313, 377, 312, 378, 313, 
	312, 379, 313, 312, 313, 357, 312, 313, 
	380, 312, 313, 340, 312, 381, 0, 62, 
	0, 382, 383, 382, 0, 386, 385, 387, 
	388, 385, 384, 0, 390, 391, 389, 0, 
	390, 389, 386, 392, 390, 391, 392, 389, 
	386, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 393, 0, 
	84, 108, 406, 83, 84, 407, 83, 84, 
	408, 83, 409, 84, 83, 407, 84, 83, 
	84, 410, 83, 411, 84, 412, 83, 413, 
	84, 83, 84, 414, 83, 84, 415, 83, 
	84, 416, 83, 84, 417, 83, 84, 418, 
	83, 84, 419, 83, 84, 420, 83, 84, 
	108, 83, 84, 421, 83, 84, 422, 83, 
	423, 84, 83, 407, 84, 83, 84, 424, 
	83, 84, 425, 83, 84, 426, 83, 427, 
	84, 83, 428, 84, 83, 84, 420, 83, 
	84, 429, 83, 84, 407, 83, 430, 0, 
	1, 0, 431, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 40, 75, 238, 310, 312, 346, 
	4, 5, 6, 7, 7, 7, 8, 7, 
	7, 7, 8, 9, 10, 11, 2, 12, 
	11, 13, 2, 14, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 348, 30, 31, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	39, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 57, 58, 57, 58, 58, 2, 59, 
	73, 318, 320, 323, 338, 344, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	70, 71, 72, 2, 74, 2, 2, 3, 
	13, 15, 29, 32, 35, 37, 40, 75, 
	238, 310, 312, 76, 216, 77, 146, 150, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 87, 88, 88, 2, 89, 
	103, 119, 140, 90, 91, 92, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	2, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	74, 120, 133, 121, 129, 122, 123, 124, 
	125, 126, 127, 128, 130, 131, 132, 134, 
	135, 136, 137, 138, 139, 141, 142, 143, 
	144, 145, 147, 148, 149, 151, 152, 153, 
	154, 155, 156, 157, 156, 157, 157, 2, 
	158, 172, 173, 175, 178, 194, 208, 214, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 2, 74, 174, 
	172, 176, 177, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 195, 196, 204, 197, 198, 199, 
	200, 201, 202, 203, 205, 206, 207, 209, 
	210, 211, 212, 213, 215, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 225, 
	226, 226, 2, 227, 228, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 74, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	246, 247, 247, 2, 248, 262, 263, 265, 
	268, 284, 302, 308, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 2, 74, 264, 262, 266, 267, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 285, 286, 
	294, 298, 287, 288, 289, 290, 291, 292, 
	293, 295, 296, 297, 299, 300, 301, 303, 
	304, 305, 306, 307, 309, 311, 312, 313, 
	314, 316, 317, 315, 313, 314, 315, 313, 
	316, 317, 3, 13, 15, 29, 32, 35, 
	37, 40, 75, 238, 310, 312, 319, 73, 
	321, 322, 324, 325, 334, 326, 327, 328, 
	329, 330, 331, 332, 333, 335, 336, 337, 
	339, 340, 341, 342, 343, 345, 347, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 31, 0, 
	0, 0, 47, 5, 41, 119, 41, 0, 
	29, 111, 29, 29, 0, 7, 95, 0, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 0, 99, 19, 0, 
	23, 107, 23, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 71, 29, 
	77, 77, 77, 77, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 27, 115, 53, 
	50, 27, 56, 50, 56, 56, 56, 56, 
	56, 56, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 62, 29, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 65, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 68, 29, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 33, 47, 33, 80, 0, 0, 35, 
	0, 0, 86, 83, 37, 89, 83, 89, 
	89, 89, 89, 89, 89, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 348;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 663 "js/lib/gherkin/lexer/sk.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */
  
/* line 670 "js/lib/gherkin/lexer/sk.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 886 "js/lib/gherkin/lexer/sk.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 925 "js/lib/gherkin/lexer/sk.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sk.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hu.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 23, 25, 
	43, 44, 45, 49, 54, 59, 64, 69, 
	73, 77, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 99, 106, 111, 114, 115, 116, 
	117, 118, 119, 120, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 170, 172, 174, 
	176, 194, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 258, 260, 
	262, 264, 266, 268, 270, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 498, 499, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 517, 519, 521, 523, 525, 
	527, 529, 531, 533, 535, 539, 545, 548, 
	550, 556, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 606, 608, 610, 612, 614, 616, 618, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	653, 655, 657, 659, 661, 663, 665, 667, 
	669, 671, 673, 675, 677, 679, 681, 683, 
	685, 687, 689, 690, 691, 706, 708, 710, 
	712, 714, 716, 718, 720, 722, 724, 726, 
	728, 730, 732, 734, 736, 738, 740, 744, 
	746, 748, 750, 752, 754, 756, 759, 761, 
	763, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 804, 806, 808, 810, 
	812, 814, 816, 818, 820, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 855, 857, 858, 
	859
];

const _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 70, 72, 74, 77, 80, 124, 
	239, 9, 13, -119, 115, 32, 10, 10, 
	13, -61, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 70, 72, 74, 77, 80, 
	124, 9, 13, 34, 34, 10, 32, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 100, 
	107, 109, 111, 116, 116, 107, 111, 114, 
	101, 105, 110, 110, 121, 105, 98, 101, 
	110, 101, 111, 114, 103, 97, 116, -61, 
	-77, 107, -61, -74, 110, 121, 118, 32, 
	58, 118, -61, -95, 122, 108, 97, 116, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 68, 70, 72, 74, 77, 
	9, 13, -119, 10, 10, 115, 10, 32, 
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 70, 72, 74, 77, 80, 124, 
	9, 13, -61, 97, -95, 116, 116, -61, 
	-87, 114, 58, 10, 10, -61, 10, 32, 
	35, 37, 42, 64, 65, 68, 70, 72, 
	74, 77, 9, 13, -119, 10, 10, 115, 
	10, 32, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 100, 
	107, 109, 10, 111, 10, 116, 10, 116, 
	10, 107, 10, 111, 10, 114, 10, 101, 
	105, 10, 110, 10, 110, 10, 121, 10, 
	105, 10, 98, 10, 101, 10, 110, 10, 
	101, 10, 111, 10, 114, 10, 103, 10, 
	97, 10, 116, -61, 10, -77, 10, 10, 
	107, -61, 10, -74, 10, 10, 110, 10, 
	121, 10, 118, 10, 32, 58, 10, 118, 
	-61, 10, -95, 10, 10, 122, 10, 108, 
	10, 97, 10, 116, 10, 58, 10, 97, 
	10, 101, 10, 108, 10, 108, 10, 101, 
	10, 109, 10, 122, -59, 10, -111, 10, 
	10, 97, 10, 106, 10, 100, 101, 108, 
	108, 101, 109, 122, -59, -111, 58, 10, 
	10, 10, 32, 35, 37, 64, 70, 72, 
	74, 80, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 114, 10, 103, 10, 97, 
	10, 116, -61, 10, -77, 10, 10, 107, 
	-61, 10, -74, 10, 10, 110, 10, 121, 
	10, 118, 10, 32, 58, 10, 118, -61, 
	10, -95, 10, 10, 122, 10, 108, 10, 
	97, 10, 116, 10, 58, -61, 10, -95, 
	10, 10, 116, 10, 116, -61, 10, -87, 
	10, 10, 114, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, -61, 10, -87, 10, 10, 
	108, 10, 100, -61, 10, -95, 10, 10, 
	107, 97, 106, 100, -61, -87, 108, 100, 
	-61, -95, 107, 58, 10, 10, 10, 32, 
	35, 74, 124, 9, 13, 10, 101, 10, 
	108, 10, 108, 10, 101, 10, 109, 10, 
	122, -59, 10, -111, 10, 10, 58, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, -61, 10, 32, 34, 
	35, 37, 42, 64, 65, 68, 70, 72, 
	74, 77, 80, 124, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 100, 107, 109, 10, 111, 
	10, 116, 10, 116, 10, 107, 10, 111, 
	10, 114, 10, 101, 105, 10, 110, 10, 
	110, 10, 121, 10, 105, 10, 98, 10, 
	101, 10, 110, 10, 101, 10, 111, 10, 
	114, 10, 103, 10, 97, 10, 116, -61, 
	10, -77, 10, 10, 107, -61, 10, -74, 
	10, 10, 110, 10, 121, 10, 118, 10, 
	58, 10, 97, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, 10, 97, 10, 106, 10, 
	100, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 68, 70, 72, 74, 77, 
	9, 13, -119, 10, 10, 115, 10, 32, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 100, 107, 109, 
	10, 111, 10, 116, 10, 116, 10, 107, 
	10, 111, 10, 114, 10, 101, 105, 10, 
	110, 10, 110, 10, 121, 10, 105, 10, 
	98, 10, 101, 10, 110, 10, 101, 10, 
	111, 10, 114, 10, 103, 10, 97, 10, 
	116, -61, 10, -77, 10, 10, 107, -61, 
	10, -74, 10, 10, 110, 10, 121, 10, 
	118, 10, 32, 58, 10, 118, -61, 10, 
	-95, 10, 10, 122, 10, 108, 10, 97, 
	10, 116, 10, 58, -61, 10, 97, -95, 
	10, 10, 116, 10, 116, -61, 10, -87, 
	10, 10, 114, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, 10, 97, 10, 106, 10, 
	100, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 1, 1, 1, 1, 2, 16, 
	1, 1, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 5, 3, 3, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	16, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	4, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 27, 30, 
	48, 50, 52, 56, 61, 66, 71, 76, 
	80, 84, 87, 89, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	115, 117, 122, 129, 134, 138, 140, 142, 
	144, 146, 148, 150, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 233, 236, 239, 
	242, 260, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 296, 299, 302, 305, 
	308, 311, 314, 317, 320, 323, 326, 329, 
	332, 335, 338, 341, 344, 347, 352, 355, 
	358, 361, 364, 367, 370, 374, 377, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	431, 434, 437, 441, 444, 447, 450, 453, 
	456, 459, 462, 465, 468, 471, 474, 477, 
	480, 483, 486, 489, 492, 495, 498, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 523, 534, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 585, 588, 591, 594, 
	597, 600, 603, 606, 609, 612, 615, 619, 
	622, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 711, 713, 
	715, 717, 719, 721, 723, 725, 727, 729, 
	731, 733, 735, 742, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 773, 779, 783, 
	786, 792, 810, 813, 816, 819, 822, 825, 
	828, 831, 834, 837, 840, 843, 846, 849, 
	852, 857, 860, 863, 866, 869, 872, 875, 
	879, 882, 885, 888, 891, 894, 897, 900, 
	903, 906, 909, 912, 915, 918, 921, 924, 
	927, 930, 933, 936, 939, 942, 945, 948, 
	951, 954, 957, 960, 963, 966, 969, 972, 
	975, 978, 981, 983, 985, 1000, 1003, 1006, 
	1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1045, 1048, 1051, 1056, 
	1059, 1062, 1065, 1068, 1071, 1074, 1078, 1081, 
	1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1135, 1138, 1141, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1173, 1176, 1179, 
	1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 
	1206, 1209, 1212, 1215, 1218, 1221, 1224, 1226, 
	1228
];

const _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 2, 0, 18, 0, 19, 0, 20, 
	0, 0, 21, 23, 24, 22, 1, 3, 
	2, 4, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 2, 0, 
	25, 0, 26, 0, 27, 26, 26, 0, 
	30, 29, 31, 29, 28, 34, 33, 35, 
	33, 32, 34, 33, 36, 33, 32, 34, 
	33, 37, 33, 32, 39, 38, 38, 0, 
	3, 40, 40, 0, 42, 43, 41, 3, 
	0, 44, 0, 45, 0, 46, 0, 47, 
	0, 48, 0, 49, 0, 50, 0, 51, 
	0, 52, 0, 53, 0, 54, 0, 55, 
	0, 56, 0, 57, 0, 0, 0, 0, 
	0, 58, 59, 60, 59, 59, 62, 61, 
	58, 3, 63, 8, 63, 0, 64, 65, 
	66, 0, 67, 0, 68, 0, 19, 0, 
	69, 0, 70, 0, 19, 0, 71, 65, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 0, 77, 0, 19, 0, 19, 
	0, 78, 0, 79, 0, 80, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 85, 
	0, 86, 0, 87, 0, 88, 0, 89, 
	0, 90, 0, 91, 92, 0, 93, 0, 
	94, 0, 95, 0, 96, 0, 97, 0, 
	98, 0, 99, 0, 100, 0, 102, 101, 
	104, 103, 105, 104, 106, 107, 108, 109, 
	107, 110, 111, 112, 113, 114, 115, 106, 
	103, 116, 104, 103, 104, 117, 103, 104, 
	118, 103, 119, 121, 120, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 120, 0, 135, 19, 0, 136, 
	0, 137, 0, 138, 0, 139, 0, 140, 
	0, 141, 0, 142, 0, 144, 143, 146, 
	145, 147, 146, 148, 149, 150, 151, 149, 
	152, 153, 154, 155, 156, 157, 148, 145, 
	158, 146, 145, 146, 159, 145, 146, 160, 
	145, 146, 161, 145, 146, 162, 145, 146, 
	163, 145, 146, 164, 145, 146, 165, 145, 
	146, 166, 145, 146, 167, 145, 146, 168, 
	145, 146, 169, 145, 146, 170, 145, 146, 
	171, 145, 146, 172, 145, 146, 173, 145, 
	146, 174, 145, 146, 175, 176, 177, 145, 
	146, 178, 145, 146, 179, 145, 146, 159, 
	145, 146, 180, 145, 146, 181, 145, 146, 
	159, 145, 146, 182, 176, 145, 146, 183, 
	145, 146, 184, 145, 146, 185, 145, 146, 
	186, 145, 146, 187, 145, 146, 188, 145, 
	146, 159, 145, 146, 159, 145, 146, 189, 
	145, 146, 190, 145, 146, 191, 145, 146, 
	192, 145, 146, 193, 145, 194, 146, 145, 
	195, 146, 145, 146, 196, 145, 197, 146, 
	145, 198, 146, 145, 146, 199, 145, 146, 
	200, 145, 146, 201, 145, 146, 202, 160, 
	145, 146, 203, 145, 204, 146, 145, 205, 
	146, 145, 146, 206, 145, 146, 207, 145, 
	146, 208, 145, 146, 209, 145, 146, 160, 
	145, 146, 159, 145, 146, 210, 145, 146, 
	211, 145, 146, 212, 145, 146, 213, 145, 
	146, 214, 145, 146, 215, 145, 216, 146, 
	145, 209, 146, 145, 146, 217, 145, 146, 
	218, 145, 146, 159, 145, 219, 0, 220, 
	0, 221, 0, 222, 0, 223, 0, 224, 
	0, 225, 0, 226, 0, 227, 0, 229, 
	228, 231, 230, 231, 232, 233, 234, 233, 
	235, 236, 237, 238, 232, 230, 231, 239, 
	230, 231, 240, 230, 231, 241, 230, 231, 
	242, 230, 231, 243, 230, 231, 244, 230, 
	231, 245, 230, 231, 246, 230, 231, 247, 
	230, 231, 248, 230, 231, 249, 230, 231, 
	250, 230, 231, 251, 230, 231, 252, 230, 
	231, 253, 230, 231, 254, 230, 231, 255, 
	230, 231, 256, 230, 231, 257, 230, 258, 
	231, 230, 259, 231, 230, 231, 260, 230, 
	261, 231, 230, 262, 231, 230, 231, 263, 
	230, 231, 264, 230, 231, 265, 230, 231, 
	266, 267, 230, 231, 268, 230, 269, 231, 
	230, 270, 231, 230, 231, 271, 230, 231, 
	272, 230, 231, 273, 230, 231, 274, 230, 
	231, 267, 230, 275, 231, 230, 276, 231, 
	230, 231, 277, 230, 231, 278, 230, 279, 
	231, 230, 280, 231, 230, 231, 274, 230, 
	231, 281, 230, 231, 282, 230, 231, 283, 
	230, 231, 284, 230, 231, 285, 230, 231, 
	286, 230, 287, 231, 230, 274, 231, 230, 
	288, 231, 230, 289, 231, 230, 231, 290, 
	230, 231, 291, 230, 292, 231, 230, 293, 
	231, 230, 231, 274, 230, 294, 0, 295, 
	0, 19, 0, 296, 0, 297, 0, 298, 
	0, 299, 0, 300, 0, 301, 0, 302, 
	0, 303, 0, 305, 304, 307, 306, 307, 
	308, 309, 310, 309, 308, 306, 307, 311, 
	306, 307, 312, 306, 307, 313, 306, 307, 
	314, 306, 307, 315, 306, 307, 316, 306, 
	317, 307, 306, 318, 307, 306, 307, 319, 
	306, 320, 321, 320, 0, 324, 323, 325, 
	326, 323, 322, 0, 328, 329, 327, 0, 
	328, 327, 324, 330, 328, 329, 330, 327, 
	331, 324, 332, 333, 334, 335, 336, 337, 
	338, 339, 340, 341, 342, 343, 344, 345, 
	332, 0, 104, 346, 103, 104, 347, 103, 
	104, 348, 103, 104, 349, 103, 104, 350, 
	103, 104, 351, 103, 104, 352, 103, 104, 
	353, 103, 104, 354, 103, 104, 355, 103, 
	104, 356, 103, 104, 357, 103, 104, 358, 
	103, 104, 359, 103, 104, 360, 361, 362, 
	103, 104, 363, 103, 104, 364, 103, 104, 
	117, 103, 104, 365, 103, 104, 366, 103, 
	104, 117, 103, 104, 367, 361, 103, 104, 
	368, 103, 104, 369, 103, 104, 370, 103, 
	104, 371, 103, 104, 372, 103, 104, 373, 
	103, 104, 117, 103, 104, 117, 103, 104, 
	374, 103, 104, 375, 103, 104, 376, 103, 
	104, 377, 103, 104, 378, 103, 379, 104, 
	103, 380, 104, 103, 104, 381, 103, 382, 
	104, 103, 383, 104, 103, 104, 384, 103, 
	104, 385, 103, 104, 386, 103, 104, 118, 
	103, 104, 117, 103, 104, 387, 103, 104, 
	388, 103, 104, 389, 103, 104, 390, 103, 
	104, 391, 103, 104, 392, 103, 393, 104, 
	103, 386, 104, 103, 104, 394, 103, 104, 
	395, 103, 104, 117, 103, 397, 396, 399, 
	398, 400, 399, 401, 402, 403, 404, 402, 
	405, 406, 407, 408, 409, 410, 401, 398, 
	411, 399, 398, 399, 412, 398, 399, 413, 
	398, 399, 414, 398, 399, 415, 398, 399, 
	416, 398, 399, 417, 398, 399, 418, 398, 
	399, 419, 398, 399, 420, 398, 399, 421, 
	398, 399, 422, 398, 399, 423, 398, 399, 
	424, 398, 399, 425, 398, 399, 426, 398, 
	399, 427, 398, 399, 428, 429, 430, 398, 
	399, 431, 398, 399, 432, 398, 399, 412, 
	398, 399, 433, 398, 399, 434, 398, 399, 
	412, 398, 399, 435, 429, 398, 399, 436, 
	398, 399, 437, 398, 399, 438, 398, 399, 
	439, 398, 399, 440, 398, 399, 441, 398, 
	399, 412, 398, 399, 412, 398, 399, 442, 
	398, 399, 443, 398, 399, 444, 398, 399, 
	445, 398, 399, 446, 398, 447, 399, 398, 
	448, 399, 398, 399, 449, 398, 450, 399, 
	398, 451, 399, 398, 399, 452, 398, 399, 
	453, 398, 399, 454, 398, 399, 455, 413, 
	398, 399, 456, 398, 457, 399, 398, 458, 
	399, 398, 399, 459, 398, 399, 460, 398, 
	399, 461, 398, 399, 462, 398, 399, 413, 
	398, 463, 399, 412, 398, 464, 399, 398, 
	399, 465, 398, 399, 466, 398, 467, 399, 
	398, 468, 399, 398, 399, 462, 398, 399, 
	469, 398, 399, 470, 398, 399, 471, 398, 
	399, 472, 398, 399, 473, 398, 399, 474, 
	398, 475, 399, 398, 462, 399, 398, 399, 
	476, 398, 399, 477, 398, 399, 412, 398, 
	478, 0, 2, 0, 479, 0
];

const _lexer_trans_targs = [
	0, 2, 7, 7, 8, 17, 19, 4, 
	33, 36, 51, 52, 81, 159, 229, 232, 
	252, 390, 3, 4, 5, 6, 6, 7, 
	18, 9, 10, 11, 12, 12, 12, 13, 
	12, 12, 12, 13, 14, 15, 16, 7, 
	16, 17, 7, 18, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 
	32, 392, 34, 35, 7, 34, 33, 35, 
	37, 40, 43, 38, 39, 41, 42, 44, 
	45, 46, 47, 48, 49, 50, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 314, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 76, 75, 
	76, 77, 76, 7, 258, 79, 272, 287, 
	288, 302, 303, 311, 78, 79, 80, 2, 
	7, 7, 8, 17, 19, 4, 33, 36, 
	51, 52, 81, 159, 229, 232, 252, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 90, 91, 92, 91, 7, 95, 94, 
	109, 124, 125, 147, 148, 156, 93, 94, 
	80, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 7, 110, 
	113, 116, 111, 112, 114, 115, 117, 118, 
	119, 120, 121, 122, 123, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 149, 150, 151, 152, 153, 154, 
	155, 157, 158, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 169, 170, 
	170, 7, 171, 185, 207, 214, 222, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 184, 7, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 199, 80, 200, 201, 202, 203, 
	204, 205, 206, 208, 209, 210, 211, 212, 
	213, 215, 216, 217, 218, 219, 220, 221, 
	223, 224, 225, 226, 227, 228, 230, 231, 
	233, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 241, 242, 242, 7, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 80, 
	252, 253, 254, 256, 257, 255, 253, 254, 
	255, 253, 256, 2, 257, 8, 17, 19, 
	4, 33, 36, 51, 52, 81, 159, 229, 
	232, 252, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 7, 
	273, 276, 279, 274, 275, 277, 278, 280, 
	281, 282, 283, 284, 285, 286, 289, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 300, 301, 304, 305, 306, 307, 308, 
	309, 310, 312, 313, 315, 316, 315, 316, 
	317, 316, 7, 320, 319, 334, 349, 350, 
	372, 379, 387, 318, 319, 80, 321, 322, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 7, 335, 338, 341, 336, 
	337, 339, 340, 342, 343, 344, 345, 346, 
	347, 348, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 373, 
	374, 375, 376, 377, 378, 380, 381, 382, 
	383, 384, 385, 386, 388, 389, 391, 0
];

const _lexer_trans_actions = [
	39, 25, 0, 47, 3, 1, 0, 25, 
	1, 25, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 0, 50, 0, 99, 
	19, 0, 0, 47, 5, 41, 119, 41, 
	0, 29, 111, 29, 29, 0, 7, 95, 
	0, 0, 103, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 107, 23, 44, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 71, 29, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 15, 56, 
	27, 115, 53, 50, 27, 56, 50, 56, 
	56, 56, 56, 56, 56, 56, 59, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 77, 0, 65, 29, 77, 
	77, 77, 77, 77, 77, 77, 0, 0, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 62, 29, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 74, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 33, 33, 47, 33, 80, 0, 
	0, 35, 0, 89, 0, 86, 83, 37, 
	89, 83, 89, 89, 89, 89, 89, 89, 
	89, 92, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 0, 68, 29, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39
];

const lexer_start = 1;
const lexer_first_final = 392;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 734 "js/lib/gherkin/lexer/hu.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */
  
/* line 741 "js/lib/gherkin/lexer/hu.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 957 "js/lib/gherkin/lexer/hu.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 996 "js/lib/gherkin/lexer/hu.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ar.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 13, 19, 21, 22, 23, 24, 
	25, 26, 27, 28, 30, 42, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 59, 64, 69, 74, 79, 83, 87, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	109, 116, 121, 125, 131, 134, 136, 142, 
	154, 156, 157, 158, 159, 160, 161, 162, 
	163, 164, 165, 166, 167, 168, 169, 179, 
	186, 188, 190, 192, 194, 196, 198, 200, 
	212, 214, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	343, 345, 347, 349, 351, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 369, 
	371, 373, 375, 377, 379, 381, 383, 385, 
	387, 389, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 400, 401, 402, 403, 
	404, 405, 406, 407, 408, 416, 420, 422, 
	425, 427, 429, 431, 433, 435, 437, 439, 
	441, 443, 445, 447, 449, 451, 453, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	473, 475, 477, 479, 481, 483, 485, 487, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 543, 
	544, 545, 546, 548, 549, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 569, 
	576, 578, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 713, 714, 724, 731, 
	734, 736, 738, 740, 742, 744, 746, 748, 
	750, 752, 754, 756, 758, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	782, 784, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 804, 806, 808, 810, 812, 
	814, 816, 818, 821, 823, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	847, 849, 851, 853, 857, 859, 861, 863, 
	865, 867, 869, 871, 873, 875, 877, 879, 
	881, 883, 885, 887, 889, 891, 893, 895, 
	897, 899, 901, 902, 903, 904, 905, 906, 
	907, 908, 909, 910, 911
];

const _lexer_trans_keys = [
	-40, -39, 10, 32, 34, 35, 37, 42, 
	64, 124, 239, 9, 13, -89, -88, -85, 
	-82, -77, -71, -40, -39, -80, -40, -89, 
	-39, -117, 32, 10, 10, 13, -40, -39, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -124, -123, -120, -39, -125, -39, 
	-122, -40, -86, -39, -119, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, -40, -39, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -124, -123, -40, -82, -39, -124, 
	-39, -127, -39, -118, -40, -87, 58, 10, 
	10, -40, -39, 10, 32, 35, 37, 42, 
	64, 9, 13, -89, -88, -85, -82, -77, 
	-71, 10, -40, 10, -80, 10, -40, 10, 
	-89, 10, -39, 10, -117, 10, 10, 32, 
	-40, -39, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -39, 10, -127, 10, 
	-40, 10, -79, 10, -40, 10, -74, 10, 
	-39, 10, -123, 10, -40, 10, -89, 10, 
	-40, 10, -75, 10, -39, 10, -118, 10, 
	-40, 10, -87, 10, 10, 58, -39, 10, 
	-118, 10, -39, 10, -122, 10, -40, 10, 
	-89, 10, -40, 10, -79, 10, -39, 10, 
	-118, 10, -39, 10, -120, 10, 10, 32, 
	58, -39, 10, -123, 10, -40, 10, -82, 
	10, -40, 10, -73, 10, -40, 10, -73, 
	10, -39, 10, -122, 10, -40, 10, -81, 
	10, -39, 10, -123, 10, -40, 10, -89, 
	10, -124, -123, -120, 10, -39, 10, -125, 
	10, -39, 10, -122, 10, -40, 10, -86, 
	10, -39, 10, -119, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -40, -85, -39, -124, -40, -87, 58, 
	10, 10, -40, 10, 32, 35, 124, 9, 
	13, -82, 10, -40, 10, -89, 10, -40, 
	10, -75, 10, -39, 10, -118, 10, -40, 
	10, -87, 10, 10, 58, -39, -127, -40, 
	-79, -40, -74, -39, -123, -40, -89, -40, 
	-75, -39, -118, -40, -87, 58, 10, 10, 
	-40, 10, 32, 35, 37, 64, 9, 13, 
	-89, -82, -77, 10, -39, 10, -124, -123, 
	10, -40, 10, -82, 10, -39, 10, -124, 
	10, -39, 10, -127, 10, -39, 10, -118, 
	10, -40, 10, -87, 10, 10, 58, -40, 
	10, -85, 10, -39, 10, -124, 10, -40, 
	10, -89, 10, -40, 10, -75, 10, -39, 
	10, -118, 10, -39, 10, -122, 10, -40, 
	10, -89, 10, -40, 10, -79, 10, -39, 
	10, -118, 10, -39, 10, -120, 10, 10, 
	32, 58, -39, 10, -123, 10, -40, 10, 
	-82, 10, -40, 10, -73, 10, -40, 10, 
	-73, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -39, -118, 
	-39, -122, -40, -89, -40, -79, -39, -118, 
	-39, -120, 32, 58, -39, -123, -40, -82, 
	-40, -73, -40, -73, 58, 10, 10, -40, 
	-39, 10, 32, 35, 37, 42, 64, 9, 
	13, -89, -88, -85, -82, -77, -71, 10, 
	-40, 10, -80, 10, -40, 10, -89, 10, 
	-39, 10, -117, 10, 10, 32, -39, 10, 
	-127, 10, -40, 10, -79, 10, -40, 10, 
	-74, 10, -39, 10, -123, 10, -40, 10, 
	-89, 10, -40, 10, -75, 10, -39, 10, 
	-118, 10, -40, 10, -87, 10, 10, 58, 
	-39, 10, -118, 10, -39, 10, -122, 10, 
	-40, 10, -89, 10, -40, 10, -79, 10, 
	-39, 10, -118, 10, -39, 10, -120, 10, 
	-39, 10, -122, 10, -40, 10, -81, 10, 
	-39, 10, -123, 10, -40, 10, -89, 10, 
	-124, -123, -120, 10, -39, 10, -125, 10, 
	-39, 10, -122, 10, -40, 10, -86, 10, 
	-39, 10, -119, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 10, -40, -39, 10, 32, 35, 37, 
	42, 64, 9, 13, -89, -88, -85, -82, 
	-77, -71, 10, -40, -39, 10, -80, 10, 
	-40, 10, -89, 10, -39, 10, -117, 10, 
	10, 32, -124, 10, -40, 10, -82, 10, 
	-39, 10, -124, 10, -39, 10, -127, 10, 
	-39, 10, -118, 10, -40, 10, -87, 10, 
	10, 58, -39, 10, -127, 10, -40, 10, 
	-79, 10, -40, 10, -74, 10, -39, 10, 
	-123, 10, -40, 10, -89, 10, -40, 10, 
	-75, 10, -39, 10, -118, 10, -39, 10, 
	-122, 10, -40, 10, -89, 10, -40, 10, 
	-79, 10, -39, 10, -118, 10, -39, 10, 
	-120, 10, 10, 32, 58, -39, 10, -123, 
	10, -40, 10, -82, 10, -40, 10, -73, 
	10, -40, 10, -73, 10, -39, 10, -122, 
	10, -40, 10, -81, 10, -39, 10, -123, 
	10, -40, 10, -89, 10, -124, -123, -120, 
	10, -39, 10, -125, 10, -39, 10, -122, 
	10, -40, 10, -86, 10, -39, 10, -119, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -39, -122, -40, 
	-81, -39, -123, -40, -89, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 11, 6, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 10, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 10, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 7, 
	2, 2, 2, 2, 2, 2, 2, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 4, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 7, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 8, 7, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 13, 20, 23, 25, 27, 29, 
	31, 33, 35, 37, 40, 52, 56, 58, 
	60, 62, 64, 66, 68, 70, 72, 74, 
	76, 80, 85, 90, 95, 100, 104, 108, 
	111, 113, 115, 117, 119, 121, 123, 125, 
	127, 129, 131, 133, 135, 137, 139, 141, 
	146, 153, 158, 162, 168, 172, 175, 181, 
	193, 196, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 220, 222, 232, 
	240, 243, 246, 249, 252, 255, 258, 261, 
	273, 276, 279, 282, 285, 288, 291, 294, 
	297, 300, 303, 306, 309, 312, 315, 318, 
	321, 324, 327, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 364, 367, 
	370, 373, 376, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 417, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 456, 459, 462, 465, 
	468, 471, 474, 477, 480, 483, 485, 487, 
	489, 491, 493, 495, 497, 499, 501, 508, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 570, 572, 574, 576, 584, 589, 592, 
	596, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 638, 641, 
	644, 647, 650, 653, 656, 659, 662, 665, 
	668, 671, 674, 677, 680, 683, 686, 689, 
	693, 696, 699, 702, 705, 708, 711, 714, 
	717, 720, 723, 726, 729, 732, 735, 738, 
	741, 744, 747, 750, 753, 756, 759, 761, 
	763, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 786, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 818, 
	826, 829, 832, 835, 838, 841, 844, 847, 
	850, 853, 856, 859, 862, 865, 868, 871, 
	874, 877, 880, 883, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 931, 934, 937, 940, 943, 
	946, 949, 952, 955, 958, 963, 966, 969, 
	972, 975, 978, 981, 984, 987, 990, 993, 
	996, 999, 1002, 1005, 1008, 1011, 1014, 1017, 
	1020, 1023, 1026, 1029, 1031, 1033, 1043, 1051, 
	1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 
	1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 
	1127, 1130, 1133, 1136, 1139, 1142, 1145, 1148, 
	1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 
	1175, 1178, 1181, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1233, 1238, 1241, 1244, 1247, 
	1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 
	1274, 1277, 1280, 1283, 1286, 1289, 1292, 1295, 
	1298, 1301, 1304, 1306, 1308, 1310, 1312, 1314, 
	1316, 1318, 1320, 1322, 1324
];

const _lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 3, 0, 12, 13, 14, 
	15, 16, 17, 0, 18, 19, 0, 20, 
	0, 21, 0, 22, 0, 23, 0, 24, 
	0, 25, 0, 0, 26, 28, 29, 27, 
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 3, 0, 30, 31, 24, 0, 
	32, 0, 33, 0, 34, 0, 24, 0, 
	35, 0, 36, 0, 37, 0, 24, 0, 
	38, 0, 39, 0, 40, 39, 39, 0, 
	43, 42, 44, 42, 41, 47, 46, 48, 
	46, 45, 47, 46, 49, 46, 45, 47, 
	46, 50, 46, 45, 52, 51, 51, 0, 
	4, 53, 53, 0, 55, 56, 54, 4, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 0, 0, 0, 
	0, 71, 72, 73, 72, 72, 75, 74, 
	71, 4, 76, 9, 76, 0, 77, 78, 
	77, 0, 81, 80, 82, 83, 80, 79, 
	0, 85, 86, 84, 0, 85, 84, 81, 
	87, 85, 86, 87, 84, 88, 89, 81, 
	90, 91, 92, 93, 94, 95, 96, 90, 
	0, 97, 98, 0, 99, 0, 100, 0, 
	101, 0, 102, 0, 103, 0, 104, 0, 
	105, 0, 106, 0, 107, 0, 108, 0, 
	109, 0, 111, 110, 113, 112, 114, 115, 
	113, 116, 117, 118, 119, 117, 116, 112, 
	120, 121, 122, 123, 124, 125, 113, 112, 
	126, 113, 112, 127, 113, 112, 128, 113, 
	112, 129, 113, 112, 130, 113, 112, 131, 
	113, 112, 113, 132, 112, 133, 134, 136, 
	135, 137, 138, 139, 140, 141, 142, 135, 
	0, 143, 113, 112, 144, 113, 112, 145, 
	113, 112, 146, 113, 112, 147, 113, 112, 
	131, 113, 112, 148, 113, 112, 131, 113, 
	112, 149, 113, 112, 150, 113, 112, 151, 
	113, 112, 152, 113, 112, 153, 113, 112, 
	154, 113, 112, 155, 113, 112, 156, 113, 
	112, 113, 132, 112, 157, 113, 112, 158, 
	113, 112, 159, 113, 112, 160, 113, 112, 
	161, 113, 112, 162, 113, 112, 163, 113, 
	112, 164, 113, 112, 165, 113, 112, 166, 
	113, 112, 167, 113, 112, 168, 113, 112, 
	113, 169, 132, 112, 170, 113, 112, 171, 
	113, 112, 172, 113, 112, 173, 113, 112, 
	174, 113, 112, 175, 113, 112, 176, 113, 
	112, 156, 113, 112, 177, 113, 112, 178, 
	113, 112, 179, 113, 112, 180, 113, 112, 
	181, 113, 112, 182, 113, 112, 183, 113, 
	112, 131, 113, 112, 184, 185, 131, 113, 
	112, 186, 113, 112, 187, 113, 112, 188, 
	113, 112, 131, 113, 112, 189, 113, 112, 
	190, 113, 112, 191, 113, 112, 131, 113, 
	112, 113, 192, 112, 113, 193, 112, 113, 
	194, 112, 113, 195, 112, 113, 196, 112, 
	113, 197, 112, 113, 198, 112, 113, 199, 
	112, 113, 200, 112, 113, 201, 112, 113, 
	202, 112, 113, 203, 112, 113, 204, 112, 
	113, 205, 112, 206, 0, 207, 0, 208, 
	0, 209, 0, 210, 0, 211, 0, 212, 
	0, 214, 213, 216, 215, 217, 216, 218, 
	219, 219, 218, 215, 220, 216, 215, 221, 
	216, 215, 222, 216, 215, 223, 216, 215, 
	224, 216, 215, 225, 216, 215, 226, 216, 
	215, 227, 216, 215, 228, 216, 215, 216, 
	229, 215, 230, 0, 231, 0, 232, 0, 
	233, 0, 234, 0, 24, 0, 235, 0, 
	24, 0, 236, 0, 237, 0, 238, 0, 
	239, 0, 240, 0, 241, 0, 242, 0, 
	243, 0, 244, 0, 246, 245, 248, 247, 
	249, 248, 250, 251, 252, 251, 250, 247, 
	253, 254, 255, 248, 247, 256, 248, 247, 
	257, 258, 248, 247, 259, 248, 247, 260, 
	248, 247, 261, 248, 247, 262, 248, 247, 
	263, 248, 247, 264, 248, 247, 265, 248, 
	247, 266, 248, 247, 267, 248, 247, 268, 
	248, 247, 248, 269, 247, 270, 248, 247, 
	271, 248, 247, 272, 248, 247, 266, 248, 
	247, 273, 248, 247, 274, 248, 247, 275, 
	248, 247, 264, 248, 247, 276, 248, 247, 
	277, 248, 247, 278, 248, 247, 279, 248, 
	247, 280, 248, 247, 281, 248, 247, 282, 
	248, 247, 283, 248, 247, 284, 248, 247, 
	285, 248, 247, 286, 248, 247, 287, 248, 
	247, 248, 288, 269, 247, 289, 248, 247, 
	290, 248, 247, 291, 248, 247, 292, 248, 
	247, 293, 248, 247, 294, 248, 247, 295, 
	248, 247, 268, 248, 247, 248, 296, 247, 
	248, 297, 247, 248, 298, 247, 248, 299, 
	247, 248, 300, 247, 248, 301, 247, 248, 
	302, 247, 248, 303, 247, 248, 304, 247, 
	248, 305, 247, 248, 306, 247, 248, 307, 
	247, 248, 308, 247, 248, 309, 247, 310, 
	0, 311, 0, 312, 0, 313, 0, 314, 
	0, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	323, 0, 324, 0, 325, 0, 326, 0, 
	327, 0, 328, 0, 329, 0, 330, 0, 
	331, 0, 332, 0, 334, 333, 336, 335, 
	337, 338, 336, 339, 340, 341, 342, 340, 
	339, 335, 343, 344, 345, 346, 347, 348, 
	336, 335, 349, 336, 335, 350, 336, 335, 
	351, 336, 335, 352, 336, 335, 353, 336, 
	335, 354, 336, 335, 336, 355, 335, 356, 
	336, 335, 357, 336, 335, 358, 336, 335, 
	359, 336, 335, 360, 336, 335, 354, 336, 
	335, 361, 336, 335, 354, 336, 335, 362, 
	336, 335, 363, 336, 335, 364, 336, 335, 
	365, 336, 335, 366, 336, 335, 367, 336, 
	335, 368, 336, 335, 369, 336, 335, 336, 
	355, 335, 370, 336, 335, 371, 336, 335, 
	372, 336, 335, 373, 336, 335, 374, 336, 
	335, 375, 336, 335, 376, 336, 335, 377, 
	336, 335, 378, 336, 335, 379, 336, 335, 
	380, 336, 335, 369, 336, 335, 381, 336, 
	335, 382, 336, 335, 383, 336, 335, 384, 
	336, 335, 385, 336, 335, 386, 336, 335, 
	387, 336, 335, 354, 336, 335, 388, 389, 
	354, 336, 335, 390, 336, 335, 391, 336, 
	335, 392, 336, 335, 354, 336, 335, 393, 
	336, 335, 394, 336, 335, 395, 336, 335, 
	354, 336, 335, 336, 396, 335, 336, 397, 
	335, 336, 398, 335, 336, 399, 335, 336, 
	400, 335, 336, 401, 335, 336, 402, 335, 
	336, 403, 335, 336, 404, 335, 336, 405, 
	335, 336, 406, 335, 336, 407, 335, 336, 
	408, 335, 336, 409, 335, 411, 410, 413, 
	412, 414, 415, 413, 416, 417, 418, 419, 
	417, 416, 412, 420, 421, 422, 423, 424, 
	425, 413, 412, 426, 427, 413, 412, 428, 
	413, 412, 429, 413, 412, 430, 413, 412, 
	431, 413, 412, 432, 413, 412, 413, 433, 
	412, 434, 413, 412, 435, 413, 412, 436, 
	413, 412, 437, 413, 412, 438, 413, 412, 
	439, 413, 412, 440, 413, 412, 441, 413, 
	412, 442, 413, 412, 443, 413, 412, 444, 
	413, 412, 413, 433, 412, 445, 413, 412, 
	446, 413, 412, 447, 413, 412, 448, 413, 
	412, 449, 413, 412, 432, 413, 412, 450, 
	413, 412, 432, 413, 412, 451, 413, 412, 
	452, 413, 412, 453, 413, 412, 440, 413, 
	412, 454, 413, 412, 455, 413, 412, 456, 
	413, 412, 457, 413, 412, 458, 413, 412, 
	459, 413, 412, 460, 413, 412, 461, 413, 
	412, 462, 413, 412, 463, 413, 412, 464, 
	413, 412, 465, 413, 412, 413, 466, 433, 
	412, 467, 413, 412, 468, 413, 412, 469, 
	413, 412, 470, 413, 412, 471, 413, 412, 
	472, 413, 412, 473, 413, 412, 444, 413, 
	412, 474, 413, 412, 475, 413, 412, 476, 
	413, 412, 477, 413, 412, 478, 413, 412, 
	479, 413, 412, 480, 413, 412, 432, 413, 
	412, 481, 482, 432, 413, 412, 483, 413, 
	412, 484, 413, 412, 485, 413, 412, 432, 
	413, 412, 486, 413, 412, 487, 413, 412, 
	488, 413, 412, 432, 413, 412, 413, 489, 
	412, 413, 490, 412, 413, 491, 412, 413, 
	492, 412, 413, 493, 412, 413, 494, 412, 
	413, 495, 412, 413, 496, 412, 413, 497, 
	412, 413, 498, 412, 413, 499, 412, 413, 
	500, 412, 413, 501, 412, 413, 502, 412, 
	503, 0, 504, 0, 505, 0, 506, 0, 
	507, 0, 508, 0, 509, 0, 24, 0, 
	510, 0, 3, 0, 511, 0
];

const _lexer_trans_targs = [
	0, 2, 13, 12, 12, 22, 31, 33, 
	9, 47, 50, 434, 3, 169, 175, 177, 
	246, 426, 4, 56, 5, 6, 7, 8, 
	9, 10, 11, 11, 12, 32, 14, 18, 
	15, 16, 17, 19, 20, 21, 23, 24, 
	25, 26, 26, 26, 27, 26, 26, 26, 
	27, 28, 29, 30, 12, 30, 31, 12, 
	32, 34, 35, 36, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 46, 436, 48, 
	49, 12, 48, 47, 49, 50, 51, 52, 
	54, 55, 53, 51, 52, 53, 51, 54, 
	2, 13, 55, 22, 31, 33, 9, 47, 
	50, 57, 149, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 68, 69, 70, 
	69, 70, 71, 126, 70, 12, 135, 78, 
	72, 80, 86, 88, 97, 118, 73, 74, 
	75, 76, 77, 78, 79, 2, 13, 12, 
	12, 22, 31, 33, 9, 47, 50, 81, 
	82, 83, 84, 85, 87, 89, 90, 91, 
	92, 93, 94, 95, 96, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 119, 120, 121, 122, 123, 124, 125, 
	127, 131, 128, 129, 130, 132, 133, 134, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 12, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 157, 
	158, 159, 158, 12, 160, 161, 162, 163, 
	164, 165, 166, 167, 168, 79, 170, 171, 
	172, 173, 174, 176, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 187, 
	188, 189, 188, 12, 232, 190, 207, 211, 
	191, 192, 203, 193, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 79, 204, 205, 
	206, 208, 209, 210, 212, 213, 214, 215, 
	216, 217, 218, 219, 220, 221, 222, 223, 
	224, 225, 226, 227, 228, 229, 230, 231, 
	233, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 12, 247, 248, 
	249, 250, 251, 252, 253, 254, 255, 256, 
	257, 258, 259, 339, 260, 261, 262, 263, 
	264, 265, 266, 267, 268, 269, 270, 269, 
	270, 271, 316, 270, 12, 325, 278, 272, 
	279, 285, 287, 296, 308, 273, 274, 275, 
	276, 277, 278, 79, 280, 281, 282, 283, 
	284, 286, 288, 289, 290, 291, 292, 293, 
	294, 295, 297, 298, 299, 300, 301, 302, 
	303, 304, 305, 306, 307, 309, 310, 311, 
	312, 313, 314, 315, 317, 321, 318, 319, 
	320, 322, 323, 324, 326, 327, 328, 329, 
	330, 331, 332, 333, 334, 335, 336, 337, 
	338, 12, 340, 341, 340, 341, 342, 403, 
	341, 12, 412, 349, 343, 362, 368, 370, 
	374, 395, 344, 350, 345, 346, 347, 348, 
	349, 79, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 363, 364, 365, 
	366, 367, 369, 371, 372, 373, 375, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	393, 394, 396, 397, 398, 399, 400, 401, 
	402, 404, 408, 405, 406, 407, 409, 410, 
	411, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 422, 423, 424, 425, 12, 427, 
	428, 429, 430, 431, 432, 433, 435, 0
];

const _lexer_trans_actions = [
	39, 25, 25, 0, 47, 3, 1, 0, 
	25, 1, 31, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 0, 99, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	47, 5, 41, 119, 41, 0, 29, 111, 
	29, 29, 0, 7, 95, 0, 0, 103, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 107, 23, 44, 0, 0, 0, 33, 
	33, 47, 33, 80, 0, 0, 35, 0, 
	89, 89, 0, 86, 83, 37, 89, 83, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 77, 77, 0, 65, 29, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 56, 56, 27, 
	115, 53, 50, 27, 56, 50, 59, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 74, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 62, 29, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 77, 0, 71, 29, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 50, 124, 0, 47, 77, 77, 
	0, 68, 29, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 436;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 785 "js/lib/gherkin/lexer/ar.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */
  
/* line 792 "js/lib/gherkin/lexer/ar.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1008 "js/lib/gherkin/lexer/ar.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1047 "js/lib/gherkin/lexer/ar.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

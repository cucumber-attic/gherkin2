
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_scouse.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 45, 50, 
	55, 60, 65, 69, 73, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 94, 
	99, 106, 111, 112, 113, 114, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 168, 170, 172, 174, 176, 178, 
	180, 182, 184, 186, 188, 190, 192, 194, 
	196, 198, 217, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 234, 236, 238, 
	240, 242, 244, 246, 248, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 299, 301, 303, 
	305, 307, 309, 311, 313, 315, 317, 319, 
	321, 323, 325, 327, 329, 331, 333, 335, 
	337, 339, 341, 343, 345, 347, 349, 351, 
	353, 355, 357, 359, 361, 363, 365, 367, 
	369, 371, 373, 375, 377, 379, 381, 383, 
	385, 387, 389, 391, 393, 395, 397, 399, 
	401, 403, 405, 407, 409, 411, 413, 415, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 680, 682, 
	684, 686, 688, 690, 692, 694, 696, 697, 
	698, 699, 700, 701, 702, 703, 704, 705, 
	706, 707, 708, 709, 710, 726, 728, 730, 
	732, 734, 736, 738, 740, 742, 744, 746, 
	748, 750, 752, 754, 756, 758, 760, 762, 
	765, 767, 769, 771, 773, 775, 777, 779, 
	781, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 811, 
	813, 815, 817, 819, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 855, 857, 859, 
	861, 863, 865, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 886, 888, 890, 892, 
	894, 896, 898, 900, 902, 904, 906, 908, 
	909, 910, 911, 912, 913, 914, 915, 916, 
	917, 918, 920, 921, 922, 923, 924, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	934, 935, 936, 937, 938, 939, 940, 944, 
	950, 953, 955, 961, 980, 982, 984, 986, 
	989, 991, 993, 995, 997, 999, 1001, 1003, 
	1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 
	1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 
	1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 
	1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 
	1069, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 
	1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 
	1102, 1104, 1106, 1108, 1111, 1113, 1115, 1117, 
	1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 
	1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 
	1151, 1152, 1153
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 70, 71, 84, 87, 89, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 69, 70, 
	71, 84, 87, 89, 124, 9, 13, 34, 
	34, 10, 32, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 110, 
	117, 104, 101, 105, 117, 110, 32, 121, 
	111, 117, 115, 101, 32, 103, 111, 116, 
	116, 97, 115, 32, 105, 115, 32, 119, 
	104, 97, 116, 32, 119, 101, 110, 116, 
	32, 100, 111, 119, 110, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 66, 
	68, 70, 71, 84, 87, 89, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 68, 
	69, 70, 71, 84, 87, 89, 124, 9, 
	13, 120, 97, 109, 112, 108, 101, 115, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 58, 
	101, 97, 116, 117, 114, 101, 58, 10, 
	10, 10, 32, 35, 37, 64, 68, 69, 
	70, 84, 87, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 105, 10, 115, 10, 32, 10, 
	105, 10, 115, 10, 32, 10, 119, 10, 
	104, 10, 97, 10, 116, 10, 32, 10, 
	119, 10, 101, 10, 110, 10, 116, 10, 
	32, 10, 100, 10, 111, 10, 119, 10, 
	110, 10, 58, 10, 120, 10, 97, 10, 
	109, 10, 112, 10, 108, 10, 101, 10, 
	115, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 104, 10, 
	101, 10, 32, 10, 116, 10, 104, 10, 
	105, 10, 110, 10, 103, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 105, 10, 
	116, 10, 32, 10, 105, 10, 104, 10, 
	97, 10, 114, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 97, 10, 110, 105, 
	118, 117, 104, 101, 32, 116, 104, 105, 
	110, 103, 32, 111, 102, 32, 105, 116, 
	32, 105, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	71, 84, 87, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 110, 10, 117, 
	10, 104, 10, 101, 105, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 115, 10, 32, 10, 105, 10, 115, 
	10, 32, 10, 119, 10, 104, 10, 97, 
	10, 116, 10, 32, 10, 119, 10, 101, 
	10, 110, 10, 116, 10, 32, 10, 100, 
	10, 111, 10, 119, 10, 110, 10, 58, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 105, 10, 118, 
	10, 117, 10, 104, 10, 101, 10, 32, 
	10, 116, 10, 104, 10, 105, 10, 110, 
	10, 103, 10, 32, 10, 111, 10, 102, 
	10, 32, 10, 105, 10, 116, 10, 32, 
	10, 105, 10, 115, 10, 104, 117, 10, 
	97, 10, 114, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 97, 10, 110, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 107, 10, 110, 10, 111, 10, 
	119, 10, 32, 10, 108, 119, 10, 105, 
	10, 107, 10, 101, 10, 32, 10, 119, 
	10, 104, 10, 101, 10, 104, 10, 101, 
	10, 110, 10, 32, 10, 121, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 103, 10, 111, 10, 116, 104, 117, 
	97, 114, 114, 105, 109, 101, 97, 110, 
	32, 105, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	71, 84, 87, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 110, 10, 117, 
	10, 104, 10, 101, 117, 10, 110, 10, 
	32, 10, 121, 10, 111, 10, 117, 10, 
	115, 10, 101, 10, 32, 10, 103, 10, 
	111, 10, 116, 10, 116, 10, 97, 10, 
	101, 10, 97, 10, 116, 10, 117, 10, 
	114, 10, 101, 10, 58, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	107, 10, 110, 10, 111, 10, 119, 10, 
	32, 10, 108, 119, 10, 105, 10, 107, 
	10, 101, 10, 32, 10, 119, 10, 104, 
	10, 101, 10, 104, 10, 101, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 111, 117, 115, 101, 
	32, 107, 110, 111, 119, 32, 108, 119, 
	105, 107, 101, 32, 119, 104, 101, 104, 
	101, 110, 32, 121, 111, 117, 115, 101, 
	32, 103, 111, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 69, 70, 71, 84, 87, 
	89, 124, 9, 13, 10, 110, 10, 117, 
	10, 104, 10, 101, 117, 10, 110, 10, 
	32, 10, 121, 10, 111, 10, 117, 10, 
	115, 10, 101, 10, 32, 10, 103, 10, 
	111, 10, 116, 10, 116, 10, 97, 10, 
	101, 10, 97, 10, 116, 10, 117, 10, 
	114, 10, 101, 10, 58, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 104, 117, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 107, 10, 110, 10, 111, 
	10, 119, 10, 32, 10, 108, 119, 10, 
	105, 10, 107, 10, 101, 10, 32, 10, 
	119, 10, 104, 10, 101, 10, 104, 10, 
	101, 10, 110, 10, 32, 10, 121, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 103, 10, 111, 10, 116, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 17, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 4, 
	3, 2, 4, 17, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 47, 52, 
	57, 62, 67, 71, 75, 78, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	120, 127, 132, 134, 136, 138, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 
	210, 212, 228, 231, 234, 237, 240, 243, 
	246, 249, 252, 255, 258, 261, 264, 267, 
	270, 273, 292, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 319, 322, 325, 
	328, 331, 334, 337, 340, 342, 344, 346, 
	348, 350, 352, 354, 356, 358, 370, 373, 
	376, 379, 382, 385, 388, 391, 394, 397, 
	400, 403, 406, 409, 412, 415, 418, 421, 
	424, 427, 430, 433, 436, 439, 442, 445, 
	448, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 499, 502, 505, 508, 511, 514, 517, 
	520, 523, 526, 529, 532, 535, 538, 541, 
	544, 547, 550, 553, 556, 559, 562, 565, 
	568, 571, 574, 577, 580, 583, 586, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 651, 
	654, 657, 660, 663, 666, 669, 672, 675, 
	678, 681, 684, 687, 690, 693, 696, 699, 
	702, 705, 710, 713, 716, 719, 722, 725, 
	728, 731, 734, 737, 740, 743, 746, 749, 
	752, 755, 758, 761, 764, 767, 770, 773, 
	776, 779, 782, 785, 788, 791, 794, 797, 
	800, 803, 806, 809, 812, 815, 818, 821, 
	824, 827, 830, 833, 836, 839, 842, 845, 
	848, 851, 854, 857, 860, 863, 866, 869, 
	872, 875, 878, 881, 884, 887, 891, 894, 
	897, 900, 903, 906, 909, 912, 915, 918, 
	921, 924, 927, 930, 933, 936, 939, 942, 
	945, 949, 952, 955, 958, 961, 964, 967, 
	970, 973, 976, 979, 982, 985, 988, 991, 
	994, 997, 1000, 1003, 1006, 1009, 1012, 1014, 
	1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1056, 1059, 1062, 
	1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 
	1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 
	1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 
	1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 
	1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 
	1258, 1261, 1264, 1268, 1271, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 
	1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 
	1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 
	1346, 1348, 1351, 1353, 1355, 1357, 1359, 1361, 
	1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 
	1379, 1381, 1383, 1385, 1387, 1389, 1391, 1395, 
	1401, 1405, 1408, 1414, 1433, 1436, 1439, 1442, 
	1446, 1449, 1452, 1455, 1458, 1461, 1464, 1467, 
	1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 
	1494, 1497, 1500, 1503, 1506, 1509, 1512, 1515, 
	1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 
	1542, 1545, 1548, 1551, 1554, 1557, 1560, 1563, 
	1566, 1570, 1573, 1576, 1579, 1582, 1585, 1588, 
	1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 
	1615, 1618, 1621, 1624, 1628, 1631, 1634, 1637, 
	1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 
	1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 
	1688, 1690, 1692
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 21, 20, 20, 0, 24, 
	23, 25, 23, 22, 28, 27, 29, 27, 
	26, 28, 27, 30, 27, 26, 28, 27, 
	31, 27, 26, 33, 32, 32, 0, 2, 
	34, 34, 0, 36, 37, 35, 2, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 0, 53, 
	55, 56, 54, 0, 0, 0, 0, 57, 
	58, 59, 58, 58, 61, 60, 57, 2, 
	62, 7, 62, 0, 63, 0, 64, 0, 
	63, 0, 65, 66, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 63, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	84, 0, 85, 0, 86, 0, 87, 0, 
	88, 0, 89, 0, 90, 0, 91, 0, 
	92, 0, 93, 0, 94, 0, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	101, 100, 103, 102, 103, 104, 105, 106, 
	107, 105, 108, 109, 110, 111, 112, 113, 
	114, 115, 104, 102, 103, 116, 102, 103, 
	117, 102, 103, 118, 102, 103, 119, 102, 
	103, 120, 102, 103, 121, 102, 103, 122, 
	102, 103, 123, 102, 103, 124, 102, 103, 
	125, 102, 103, 126, 102, 103, 127, 102, 
	103, 128, 102, 103, 129, 102, 103, 130, 
	102, 132, 131, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 131, 0, 148, 0, 149, 0, 
	150, 0, 151, 0, 152, 0, 153, 0, 
	154, 0, 155, 0, 157, 156, 159, 158, 
	159, 160, 161, 162, 161, 160, 158, 159, 
	163, 158, 159, 164, 158, 159, 165, 158, 
	159, 166, 158, 159, 167, 158, 159, 168, 
	158, 159, 169, 158, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 178, 177, 180, 179, 180, 181, 
	182, 183, 182, 184, 185, 186, 187, 188, 
	181, 179, 180, 189, 179, 180, 190, 179, 
	180, 191, 179, 180, 192, 179, 180, 193, 
	179, 180, 194, 179, 180, 195, 179, 180, 
	196, 179, 180, 197, 179, 180, 198, 179, 
	180, 199, 179, 180, 200, 179, 180, 201, 
	179, 180, 202, 179, 180, 203, 179, 180, 
	204, 179, 180, 205, 179, 180, 206, 179, 
	180, 207, 179, 180, 208, 179, 180, 209, 
	179, 180, 210, 179, 180, 211, 179, 180, 
	212, 179, 180, 213, 179, 180, 214, 179, 
	180, 215, 179, 180, 216, 179, 180, 217, 
	179, 180, 218, 179, 180, 219, 179, 180, 
	220, 179, 180, 221, 179, 180, 222, 179, 
	180, 223, 179, 180, 224, 179, 180, 225, 
	179, 180, 226, 179, 180, 227, 179, 180, 
	228, 179, 180, 229, 179, 180, 222, 179, 
	180, 230, 179, 180, 231, 179, 180, 232, 
	179, 180, 233, 179, 180, 234, 179, 180, 
	222, 179, 180, 235, 179, 180, 236, 179, 
	180, 237, 179, 180, 238, 179, 180, 239, 
	179, 180, 240, 179, 180, 241, 179, 180, 
	242, 179, 180, 243, 179, 180, 244, 179, 
	180, 245, 179, 180, 246, 179, 180, 247, 
	179, 180, 248, 179, 180, 249, 179, 180, 
	229, 179, 180, 250, 179, 180, 251, 179, 
	180, 252, 179, 180, 253, 179, 180, 254, 
	179, 180, 255, 179, 180, 256, 179, 180, 
	257, 179, 180, 248, 179, 258, 0, 259, 
	0, 67, 0, 260, 0, 261, 0, 262, 
	0, 263, 0, 264, 0, 265, 0, 266, 
	0, 267, 0, 268, 0, 269, 0, 270, 
	0, 271, 0, 272, 0, 273, 0, 274, 
	0, 275, 0, 276, 0, 277, 0, 279, 
	278, 281, 280, 281, 282, 283, 284, 285, 
	283, 286, 287, 288, 289, 290, 291, 292, 
	293, 282, 280, 281, 294, 280, 281, 295, 
	280, 281, 296, 280, 281, 297, 280, 281, 
	298, 280, 281, 299, 280, 281, 300, 280, 
	281, 301, 280, 281, 302, 280, 281, 303, 
	280, 281, 304, 280, 281, 305, 280, 281, 
	306, 280, 281, 307, 280, 281, 308, 280, 
	281, 309, 280, 281, 310, 280, 281, 309, 
	280, 281, 311, 312, 313, 280, 281, 314, 
	280, 281, 315, 280, 281, 316, 280, 281, 
	317, 280, 281, 318, 280, 281, 319, 280, 
	281, 320, 280, 281, 321, 280, 281, 322, 
	280, 281, 323, 280, 281, 324, 280, 281, 
	325, 280, 281, 309, 280, 281, 326, 280, 
	281, 327, 280, 281, 328, 280, 281, 329, 
	280, 281, 330, 280, 281, 331, 280, 281, 
	332, 280, 281, 333, 280, 281, 334, 280, 
	281, 335, 280, 281, 336, 280, 281, 337, 
	280, 281, 338, 280, 281, 339, 280, 281, 
	340, 280, 281, 341, 280, 281, 342, 280, 
	281, 343, 280, 281, 344, 280, 281, 308, 
	280, 281, 345, 280, 281, 346, 280, 281, 
	347, 280, 281, 348, 280, 281, 349, 280, 
	281, 344, 280, 281, 350, 280, 281, 351, 
	280, 281, 313, 280, 281, 352, 280, 281, 
	353, 280, 281, 354, 280, 281, 355, 280, 
	281, 356, 280, 281, 357, 280, 281, 358, 
	280, 281, 359, 280, 281, 360, 280, 281, 
	361, 280, 281, 362, 280, 281, 363, 280, 
	281, 364, 280, 281, 365, 280, 281, 366, 
	280, 281, 367, 280, 281, 344, 280, 281, 
	368, 313, 280, 281, 369, 280, 281, 370, 
	280, 281, 371, 280, 281, 372, 280, 281, 
	373, 280, 281, 374, 280, 281, 375, 280, 
	281, 365, 280, 281, 376, 280, 281, 377, 
	280, 281, 378, 280, 281, 379, 280, 281, 
	380, 280, 281, 381, 280, 281, 382, 280, 
	281, 383, 280, 281, 384, 280, 281, 385, 
	280, 281, 386, 387, 280, 281, 388, 280, 
	281, 389, 280, 281, 390, 280, 281, 391, 
	280, 281, 392, 280, 281, 393, 280, 281, 
	313, 280, 281, 394, 280, 281, 395, 280, 
	281, 396, 280, 281, 397, 280, 281, 398, 
	280, 281, 399, 280, 281, 400, 280, 281, 
	401, 280, 281, 402, 280, 281, 403, 280, 
	281, 404, 280, 281, 405, 280, 281, 309, 
	280, 406, 67, 0, 407, 0, 408, 0, 
	409, 0, 410, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 415, 0, 416, 0, 
	417, 0, 418, 0, 420, 419, 422, 421, 
	422, 423, 424, 425, 426, 424, 427, 428, 
	429, 430, 431, 432, 433, 434, 423, 421, 
	422, 435, 421, 422, 436, 421, 422, 437, 
	421, 422, 438, 421, 422, 439, 421, 422, 
	440, 421, 422, 441, 421, 422, 442, 421, 
	422, 443, 421, 422, 444, 421, 422, 445, 
	421, 422, 446, 421, 422, 447, 421, 422, 
	448, 421, 422, 449, 421, 422, 450, 421, 
	422, 451, 421, 422, 450, 421, 422, 452, 
	453, 421, 422, 454, 421, 422, 455, 421, 
	422, 456, 421, 422, 457, 421, 422, 458, 
	421, 422, 459, 421, 422, 460, 421, 422, 
	461, 421, 422, 462, 421, 422, 463, 421, 
	422, 464, 421, 422, 465, 421, 422, 450, 
	421, 422, 466, 421, 422, 467, 421, 422, 
	468, 421, 422, 469, 421, 422, 470, 421, 
	422, 471, 421, 422, 449, 421, 422, 472, 
	421, 422, 473, 421, 422, 453, 421, 422, 
	474, 421, 422, 475, 421, 422, 476, 421, 
	422, 477, 421, 422, 478, 421, 422, 479, 
	421, 422, 480, 421, 422, 481, 421, 422, 
	482, 421, 422, 483, 421, 422, 484, 421, 
	422, 485, 421, 422, 486, 421, 422, 487, 
	421, 422, 488, 421, 422, 489, 421, 422, 
	471, 421, 422, 490, 421, 422, 491, 421, 
	422, 492, 421, 422, 493, 421, 422, 494, 
	421, 422, 495, 421, 422, 496, 421, 422, 
	497, 421, 422, 498, 421, 422, 499, 421, 
	422, 500, 501, 421, 422, 502, 421, 422, 
	503, 421, 422, 504, 421, 422, 505, 421, 
	422, 506, 421, 422, 507, 421, 422, 453, 
	421, 422, 508, 421, 422, 509, 421, 422, 
	510, 421, 422, 511, 421, 422, 512, 421, 
	422, 513, 421, 422, 514, 421, 422, 515, 
	421, 422, 516, 421, 422, 517, 421, 422, 
	518, 421, 422, 519, 421, 422, 450, 421, 
	520, 0, 521, 0, 522, 0, 523, 0, 
	524, 0, 525, 0, 526, 0, 527, 0, 
	528, 0, 529, 0, 530, 531, 0, 532, 
	0, 533, 0, 534, 0, 535, 0, 536, 
	0, 537, 0, 67, 0, 538, 0, 539, 
	0, 540, 0, 541, 0, 542, 0, 543, 
	0, 544, 0, 545, 0, 546, 0, 547, 
	0, 548, 0, 549, 0, 63, 0, 550, 
	551, 550, 0, 554, 553, 555, 556, 553, 
	552, 0, 558, 559, 557, 0, 558, 557, 
	554, 560, 558, 559, 560, 557, 554, 561, 
	562, 563, 564, 565, 566, 567, 568, 569, 
	570, 571, 572, 573, 574, 575, 576, 561, 
	0, 103, 577, 102, 103, 578, 102, 103, 
	577, 102, 103, 579, 580, 102, 103, 581, 
	102, 103, 582, 102, 103, 583, 102, 103, 
	584, 102, 103, 585, 102, 103, 586, 102, 
	103, 587, 102, 103, 588, 102, 103, 589, 
	102, 103, 590, 102, 103, 591, 102, 103, 
	592, 102, 103, 577, 102, 103, 593, 102, 
	103, 594, 102, 103, 595, 102, 103, 596, 
	102, 103, 597, 102, 103, 598, 102, 103, 
	130, 102, 103, 599, 102, 103, 600, 102, 
	103, 580, 102, 103, 601, 102, 103, 602, 
	102, 103, 603, 102, 103, 604, 102, 103, 
	605, 102, 103, 606, 102, 103, 607, 102, 
	103, 608, 102, 103, 609, 102, 103, 610, 
	102, 103, 611, 102, 103, 612, 102, 103, 
	613, 102, 103, 614, 102, 103, 615, 102, 
	103, 616, 102, 103, 598, 102, 103, 617, 
	580, 102, 103, 618, 102, 103, 619, 102, 
	103, 620, 102, 103, 621, 102, 103, 622, 
	102, 103, 623, 102, 103, 624, 102, 103, 
	614, 102, 103, 625, 102, 103, 626, 102, 
	103, 627, 102, 103, 628, 102, 103, 629, 
	102, 103, 630, 102, 103, 631, 102, 103, 
	632, 102, 103, 633, 102, 103, 634, 102, 
	103, 635, 636, 102, 103, 637, 102, 103, 
	638, 102, 103, 639, 102, 103, 640, 102, 
	103, 641, 102, 103, 642, 102, 103, 580, 
	102, 103, 643, 102, 103, 644, 102, 103, 
	645, 102, 103, 646, 102, 103, 647, 102, 
	103, 648, 102, 103, 649, 102, 103, 650, 
	102, 103, 651, 102, 103, 652, 102, 103, 
	653, 102, 103, 654, 102, 103, 577, 102, 
	655, 0, 1, 0, 656, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 35, 37, 90, 108, 191, 194, 333, 
	439, 470, 560, 4, 5, 6, 7, 7, 
	7, 8, 7, 7, 7, 8, 9, 10, 
	11, 2, 11, 12, 2, 13, 15, 16, 
	17, 18, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 562, 29, 30, 30, 2, 
	13, 32, 33, 2, 32, 31, 33, 28, 
	36, 38, 51, 34, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 72, 73, 
	73, 2, 74, 88, 476, 477, 479, 493, 
	500, 503, 520, 529, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 2, 89, 2, 2, 3, 12, 14, 
	28, 31, 34, 35, 37, 90, 108, 191, 
	194, 333, 439, 470, 91, 92, 93, 94, 
	95, 96, 97, 98, 99, 100, 99, 100, 
	100, 2, 101, 102, 103, 104, 105, 106, 
	107, 89, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 116, 117, 117, 2, 118, 
	132, 153, 160, 166, 182, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 2, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 89, 
	154, 155, 156, 157, 158, 159, 161, 162, 
	163, 164, 165, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 177, 178, 179, 
	180, 181, 183, 184, 185, 186, 187, 188, 
	189, 190, 192, 193, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 213, 214, 
	213, 214, 214, 2, 215, 229, 230, 231, 
	233, 267, 273, 276, 293, 302, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 2, 89, 229, 232, 234, 
	247, 230, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 246, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 259, 260, 261, 262, 263, 264, 265, 
	266, 268, 269, 270, 271, 272, 274, 275, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 290, 291, 292, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	303, 304, 305, 306, 307, 308, 309, 310, 
	311, 312, 313, 320, 314, 315, 316, 317, 
	318, 319, 321, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 334, 335, 
	336, 337, 338, 339, 340, 341, 342, 343, 
	344, 345, 346, 347, 348, 347, 348, 348, 
	2, 349, 363, 364, 365, 367, 381, 388, 
	391, 390, 408, 350, 351, 352, 353, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	2, 89, 363, 366, 368, 364, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	379, 380, 382, 383, 384, 385, 386, 387, 
	389, 390, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 405, 
	406, 407, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 426, 420, 421, 
	422, 423, 424, 425, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	440, 441, 442, 443, 444, 445, 446, 447, 
	448, 449, 450, 457, 451, 452, 453, 454, 
	455, 456, 458, 459, 460, 461, 462, 463, 
	464, 465, 466, 467, 468, 469, 470, 471, 
	472, 474, 475, 473, 471, 472, 473, 471, 
	474, 475, 3, 12, 14, 28, 31, 34, 
	35, 37, 90, 108, 191, 194, 333, 439, 
	470, 88, 478, 480, 476, 481, 482, 483, 
	484, 485, 486, 487, 488, 489, 490, 491, 
	492, 494, 495, 496, 497, 498, 499, 501, 
	502, 504, 505, 506, 507, 508, 509, 510, 
	511, 512, 513, 514, 515, 516, 517, 518, 
	519, 521, 522, 523, 524, 525, 526, 527, 
	528, 530, 531, 532, 533, 534, 535, 536, 
	537, 538, 539, 540, 547, 541, 542, 543, 
	544, 545, 546, 548, 549, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 561, 
	0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 31, 0, 0, 0, 47, 5, 41, 
	119, 41, 0, 29, 111, 29, 29, 0, 
	7, 95, 0, 0, 103, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 0, 99, 
	19, 0, 23, 107, 23, 44, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 65, 29, 77, 77, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 11, 27, 115, 53, 50, 27, 
	56, 50, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 59, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 74, 77, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 50, 124, 0, 47, 0, 62, 29, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 68, 29, 77, 77, 77, 
	77, 77, 77, 77, 77, 77, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 0, 
	71, 29, 77, 77, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 33, 47, 33, 80, 0, 0, 35, 
	0, 0, 86, 83, 37, 89, 83, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 562;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 980 "js/lib/gherkin/lexer/en_scouse.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
  
/* line 987 "js/lib/gherkin/lexer/en_scouse.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1203 "js/lib/gherkin/lexer/en_scouse.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1242 "js/lib/gherkin/lexer/en_scouse.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */



/* line 11 "js/lib/gherkin/lexer/eo.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 39, 44, 
	49, 54, 59, 63, 67, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 88, 
	93, 100, 105, 106, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 132, 134, 
	136, 138, 140, 142, 144, 160, 161, 162, 
	163, 164, 165, 166, 178, 180, 182, 184, 
	186, 188, 190, 192, 194, 196, 198, 200, 
	202, 204, 206, 208, 210, 213, 215, 217, 
	219, 221, 223, 225, 228, 230, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 273, 276, 278, 280, 282, 284, 
	286, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	321, 323, 325, 327, 329, 331, 333, 335, 
	337, 339, 341, 343, 345, 347, 349, 351, 
	353, 356, 358, 360, 362, 364, 366, 368, 
	370, 372, 375, 377, 379, 381, 383, 385, 
	387, 390, 392, 394, 396, 398, 400, 401, 
	402, 403, 404, 405, 406, 407, 408, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 479, 481, 483, 485, 487, 
	489, 491, 493, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 520, 
	523, 525, 527, 529, 531, 533, 534, 535, 
	536, 537, 538, 539, 540, 541, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	589, 591, 593, 595, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	655, 661, 664, 666, 672, 688, 689, 690
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	68, 69, 70, 75, 83, 84, 124, 9, 
	13, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 111, 32, 110, 105, 116, 97, -60, 
	-75, 111, 107, 122, 101, 109, 112, 108, 
	111, 106, 58, 10, 10, 10, 32, 35, 
	84, 124, 9, 13, 10, 114, 10, 97, 
	10, 106, 10, 116, 10, 111, 10, 58, 
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 9, 13, 
	111, 110, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 68, 75, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 111, 10, 32, 110, 10, 105, 10, 
	116, 10, 97, -60, 10, -75, 10, 10, 
	111, 10, 97, 111, 10, 106, 10, 110, 
	10, 116, 10, 117, 10, 114, 10, 111, 
	10, 32, 10, 100, 10, 101, 10, 32, 
	10, 108, 10, 97, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 111, 10, 58, 10, 99, 
	101, 10, 32, 100, 10, 114, 10, 97, 
	10, 106, 10, 116, 97, 111, 106, 110, 
	116, 117, 114, 111, 32, 100, 101, 32, 
	108, 97, 32, 115, 99, 101, 110, 97, 
	114, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 68, 75, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	111, 10, 32, 110, 10, 105, 10, 116, 
	10, 97, -60, 10, -75, 10, 10, 111, 
	10, 97, 10, 106, 10, 99, 101, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	111, 10, 58, 10, 32, 100, 10, 114, 
	10, 97, 10, 106, 10, 116, 99, 101, 
	101, 110, 97, 114, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 68, 70, 
	75, 83, 84, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 111, 10, 32, 110, 
	10, 105, 10, 116, 10, 97, -60, 10, 
	-75, 10, 10, 111, 10, 111, 10, 110, 
	10, 111, 10, 58, 10, 97, 111, 10, 
	106, 10, 110, 10, 116, 10, 117, 10, 
	114, 10, 111, 10, 32, 10, 100, 10, 
	101, 10, 32, 10, 108, 10, 97, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 99, 101, 
	10, 32, 100, 10, 114, 10, 97, 10, 
	106, 10, 116, 32, 100, 114, 97, 106, 
	116, 111, 58, 10, 10, 10, 32, 35, 
	37, 64, 69, 70, 75, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 107, 10, 
	122, 10, 101, 10, 109, 10, 112, 10, 
	108, 10, 111, 10, 106, 10, 58, 10, 
	111, 10, 110, 10, 111, 10, 111, 10, 
	110, 10, 116, 10, 117, 10, 114, 10, 
	111, 10, 32, 10, 100, 10, 101, 10, 
	32, 10, 108, 10, 97, 10, 32, 10, 
	115, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 114, 10, 97, 10, 
	106, 10, 116, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 9, 13, 
	187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 14, 1, 1, 1, 
	1, 1, 1, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 3, 2, 4, 14, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 41, 46, 
	51, 56, 61, 65, 69, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	114, 121, 126, 128, 131, 133, 135, 137, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 172, 175, 
	178, 181, 184, 187, 190, 206, 208, 210, 
	212, 214, 216, 218, 230, 233, 236, 239, 
	242, 245, 248, 251, 254, 257, 260, 263, 
	266, 269, 272, 275, 278, 282, 285, 288, 
	291, 294, 297, 300, 304, 307, 310, 313, 
	316, 319, 322, 325, 328, 331, 334, 337, 
	340, 343, 346, 349, 352, 355, 358, 361, 
	364, 367, 371, 375, 378, 381, 384, 387, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	448, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 500, 503, 506, 509, 512, 515, 518, 
	521, 524, 528, 531, 534, 537, 540, 543, 
	546, 550, 553, 556, 559, 562, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 594, 
	597, 600, 603, 606, 609, 612, 615, 618, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 680, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 741, 
	745, 748, 751, 754, 757, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 896, 899, 902, 905, 908, 911, 
	914, 917, 920, 923, 926, 929, 932, 935, 
	939, 945, 949, 952, 958, 974, 976, 978
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 18, 17, 17, 
	0, 21, 20, 22, 20, 19, 25, 24, 
	26, 24, 23, 25, 24, 27, 24, 23, 
	25, 24, 28, 24, 23, 30, 29, 29, 
	0, 2, 31, 31, 0, 33, 34, 32, 
	2, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	0, 50, 52, 53, 51, 0, 0, 0, 
	0, 54, 55, 56, 55, 55, 58, 57, 
	54, 2, 59, 7, 59, 0, 60, 0, 
	49, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 72, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 78, 77, 80, 79, 80, 81, 82, 
	83, 82, 81, 79, 80, 84, 79, 80, 
	85, 79, 80, 86, 79, 80, 87, 79, 
	80, 88, 79, 80, 89, 79, 91, 90, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 90, 0, 104, 0, 
	105, 0, 106, 0, 107, 0, 109, 108, 
	111, 110, 111, 112, 113, 114, 115, 113, 
	116, 117, 118, 119, 112, 110, 111, 120, 
	110, 111, 121, 110, 111, 122, 110, 111, 
	123, 110, 111, 124, 110, 111, 125, 110, 
	111, 126, 110, 111, 127, 110, 111, 128, 
	110, 111, 129, 110, 111, 130, 110, 111, 
	131, 110, 111, 132, 110, 111, 133, 110, 
	111, 134, 110, 111, 135, 110, 111, 134, 
	136, 110, 111, 137, 110, 111, 138, 110, 
	111, 139, 110, 140, 111, 110, 141, 111, 
	110, 111, 142, 110, 111, 143, 144, 110, 
	111, 142, 110, 111, 145, 110, 111, 146, 
	110, 111, 147, 110, 111, 148, 110, 111, 
	149, 110, 111, 150, 110, 111, 151, 110, 
	111, 152, 110, 111, 153, 110, 111, 154, 
	110, 111, 155, 110, 111, 156, 110, 111, 
	157, 110, 111, 158, 110, 111, 159, 110, 
	111, 160, 110, 111, 161, 110, 111, 162, 
	110, 111, 163, 110, 111, 134, 110, 111, 
	158, 164, 110, 111, 134, 142, 110, 111, 
	165, 110, 111, 166, 110, 111, 167, 110, 
	111, 162, 110, 168, 169, 0, 67, 0, 
	170, 0, 171, 0, 172, 0, 173, 0, 
	174, 0, 175, 0, 176, 0, 177, 0, 
	178, 0, 179, 0, 180, 0, 181, 0, 
	182, 0, 183, 0, 184, 0, 185, 0, 
	186, 0, 187, 0, 188, 0, 189, 0, 
	191, 190, 193, 192, 193, 194, 195, 196, 
	197, 195, 198, 199, 200, 201, 194, 192, 
	193, 202, 192, 193, 203, 192, 193, 204, 
	192, 193, 205, 192, 193, 206, 192, 193, 
	207, 192, 193, 208, 192, 193, 209, 192, 
	193, 210, 192, 193, 211, 192, 193, 212, 
	192, 193, 213, 192, 193, 214, 192, 193, 
	215, 192, 193, 216, 192, 193, 217, 192, 
	193, 216, 218, 192, 193, 219, 192, 193, 
	220, 192, 193, 221, 192, 222, 193, 192, 
	223, 193, 192, 193, 224, 192, 193, 225, 
	192, 193, 224, 192, 193, 226, 227, 192, 
	193, 228, 192, 193, 229, 192, 193, 230, 
	192, 193, 231, 192, 193, 232, 192, 193, 
	216, 192, 193, 216, 224, 192, 193, 233, 
	192, 193, 234, 192, 193, 235, 192, 193, 
	231, 192, 236, 237, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 242, 0, 243, 
	0, 245, 244, 247, 246, 247, 248, 249, 
	250, 251, 249, 252, 253, 254, 255, 256, 
	248, 246, 247, 257, 246, 247, 258, 246, 
	247, 259, 246, 247, 260, 246, 247, 261, 
	246, 247, 262, 246, 247, 263, 246, 247, 
	264, 246, 247, 265, 246, 247, 266, 246, 
	247, 267, 246, 247, 268, 246, 247, 269, 
	246, 247, 270, 246, 247, 271, 246, 247, 
	272, 246, 247, 271, 273, 246, 247, 274, 
	246, 247, 275, 246, 247, 276, 246, 277, 
	247, 246, 278, 247, 246, 247, 279, 246, 
	247, 280, 246, 247, 281, 246, 247, 282, 
	246, 247, 271, 246, 247, 283, 284, 246, 
	247, 279, 246, 247, 285, 246, 247, 286, 
	246, 247, 287, 246, 247, 288, 246, 247, 
	289, 246, 247, 290, 246, 247, 291, 246, 
	247, 292, 246, 247, 293, 246, 247, 294, 
	246, 247, 295, 246, 247, 296, 246, 247, 
	297, 246, 247, 298, 246, 247, 299, 246, 
	247, 300, 246, 247, 301, 246, 247, 281, 
	246, 247, 298, 302, 246, 247, 271, 279, 
	246, 247, 303, 246, 247, 304, 246, 247, 
	305, 246, 247, 281, 246, 49, 67, 0, 
	306, 0, 307, 0, 308, 0, 309, 0, 
	310, 0, 311, 0, 313, 312, 315, 314, 
	315, 316, 317, 318, 317, 319, 320, 321, 
	322, 323, 316, 314, 315, 324, 314, 315, 
	325, 314, 315, 326, 314, 315, 327, 314, 
	315, 328, 314, 315, 329, 314, 315, 330, 
	314, 315, 331, 314, 315, 332, 314, 315, 
	333, 314, 315, 334, 314, 315, 335, 314, 
	315, 336, 314, 315, 337, 314, 315, 338, 
	314, 315, 339, 314, 315, 340, 314, 315, 
	341, 314, 315, 342, 314, 315, 343, 314, 
	315, 344, 314, 315, 345, 314, 315, 346, 
	314, 315, 347, 314, 315, 348, 314, 315, 
	345, 314, 315, 349, 314, 315, 350, 314, 
	315, 351, 314, 315, 352, 314, 315, 353, 
	314, 315, 354, 314, 315, 355, 314, 315, 
	356, 314, 315, 357, 314, 315, 358, 314, 
	315, 359, 314, 315, 360, 314, 315, 361, 
	314, 315, 362, 314, 315, 363, 314, 315, 
	364, 314, 315, 365, 314, 315, 366, 314, 
	315, 348, 314, 315, 367, 314, 315, 368, 
	314, 315, 369, 314, 315, 348, 314, 370, 
	371, 370, 0, 374, 373, 375, 376, 373, 
	372, 0, 378, 379, 377, 0, 378, 377, 
	374, 380, 378, 379, 380, 377, 374, 381, 
	382, 383, 384, 385, 386, 387, 388, 389, 
	390, 391, 392, 393, 381, 0, 394, 0, 
	1, 0, 395, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 42, 61, 119, 181, 245, 303, 309, 
	4, 5, 6, 7, 7, 7, 8, 7, 
	7, 7, 8, 9, 10, 11, 2, 11, 
	12, 2, 13, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	311, 29, 30, 30, 2, 13, 32, 33, 
	2, 32, 31, 33, 35, 36, 37, 38, 
	39, 40, 41, 28, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 53, 2, 54, 55, 56, 57, 58, 
	59, 60, 2, 2, 3, 12, 14, 28, 
	31, 34, 42, 61, 119, 181, 245, 303, 
	62, 63, 64, 65, 66, 67, 66, 67, 
	67, 2, 68, 82, 83, 91, 113, 115, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 2, 60, 84, 
	85, 86, 87, 88, 89, 90, 82, 92, 
	93, 94, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 108, 
	109, 110, 111, 112, 114, 116, 117, 118, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	142, 143, 143, 2, 144, 158, 159, 167, 
	169, 177, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 2, 
	60, 160, 161, 162, 163, 164, 165, 166, 
	158, 168, 170, 176, 171, 172, 173, 174, 
	175, 178, 179, 180, 182, 244, 183, 184, 
	185, 186, 187, 188, 189, 190, 189, 190, 
	190, 2, 191, 205, 206, 214, 218, 238, 
	240, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 2, 60, 
	207, 208, 209, 210, 211, 212, 213, 205, 
	215, 216, 217, 219, 220, 221, 222, 223, 
	224, 225, 226, 227, 228, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 239, 241, 
	242, 243, 246, 247, 248, 249, 250, 251, 
	252, 253, 252, 253, 253, 2, 254, 268, 
	277, 280, 294, 299, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	267, 2, 269, 270, 271, 272, 273, 274, 
	275, 276, 60, 278, 279, 281, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 300, 
	301, 302, 303, 304, 305, 307, 308, 306, 
	304, 305, 306, 304, 307, 308, 3, 12, 
	14, 28, 31, 34, 42, 61, 119, 181, 
	245, 303, 310, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 31, 0, 
	0, 0, 47, 5, 41, 119, 41, 0, 
	29, 111, 29, 29, 0, 7, 95, 0, 
	0, 103, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 0, 99, 19, 0, 23, 
	107, 23, 44, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 0, 0, 0, 0, 
	0, 17, 27, 115, 53, 50, 27, 56, 
	50, 56, 56, 56, 56, 56, 56, 59, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 65, 29, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 71, 29, 77, 77, 77, 
	77, 77, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 68, 29, 77, 77, 77, 77, 77, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 33, 33, 47, 33, 
	80, 0, 0, 35, 0, 0, 86, 83, 
	37, 89, 83, 89, 89, 89, 89, 89, 
	89, 92, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 311;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 607 "js/lib/gherkin/lexer/eo.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
  
/* line 614 "js/lib/gherkin/lexer/eo.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 830 "js/lib/gherkin/lexer/eo.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 869 "js/lib/gherkin/lexer/eo.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

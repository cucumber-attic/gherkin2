
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */



/* line 11 "js/lib/gherkin/lexer/uk.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 12, 22, 23, 24, 26, 37, 
	38, 39, 43, 48, 53, 58, 63, 67, 
	71, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 93, 100, 105, 109, 115, 118, 120, 
	126, 137, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 203, 214, 216, 227, 230, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 324, 326, 328, 330, 
	332, 335, 337, 339, 341, 343, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 370, 372, 374, 376, 378, 380, 
	382, 384, 386, 388, 390, 392, 394, 396, 
	398, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 439, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 500, 502, 504, 506, 508, 510, 
	512, 514, 516, 517, 518, 519, 520, 522, 
	523, 524, 525, 526, 527, 528, 529, 530, 
	531, 532, 533, 540, 542, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 576, 578, 580, 
	581, 582, 583, 584, 585, 586, 587, 588, 
	589, 590, 591, 592, 594, 595, 596, 597, 
	598, 600, 601, 602, 603, 604, 605, 606, 
	607, 608, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 619, 620, 621, 622, 
	623, 624, 625, 626, 627, 628, 629, 630, 
	631, 632, 633, 634, 643, 654, 656, 659, 
	661, 663, 665, 667, 669, 671, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 699, 701, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 764, 766, 768, 770, 772, 
	774, 776, 778, 780, 782, 784, 786, 788, 
	790, 792, 794, 796, 798, 800, 802, 805, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 838, 
	840, 842, 844, 846, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 866, 868, 870, 
	872, 874, 876, 878, 880, 882, 883, 884, 
	885, 886, 887, 888, 889, 890, 891, 892, 
	893, 894, 895, 896, 897, 906, 917, 919, 
	922, 924, 926, 928, 930, 932, 934, 936, 
	938, 940, 942, 944, 946, 948, 950, 952, 
	954, 956, 958, 960, 962, 964, 966, 968, 
	970, 972, 974, 976, 978, 980, 982, 984, 
	986, 988, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 
	1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 
	1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 
	1051, 1053, 1055, 1057, 1059, 1061, 1064, 1066, 
	1068, 1070, 1072, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 
	1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 
	1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 
	1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 
	1166, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 
	1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 
	1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 
	1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 
	1231, 1233, 1235, 1237, 1239, 1241, 1243, 1244, 
	1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 
	1271, 1272, 1280, 1284, 1287, 1289, 1291, 1293, 
	1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 
	1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 
	1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 
	1343, 1345, 1347, 1349, 1351, 1354, 1356, 1358, 
	1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 
	1376, 1378, 1380, 1382, 1384, 1386, 1388, 1390, 
	1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 
	1408, 1410, 1412, 1414, 1416, 1418, 1420, 1422, 
	1424, 1426, 1428, 1430, 1432, 1434, 1436, 1438, 
	1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 
	1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 
	1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 
	1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 
	1504, 1505, 1506, 1507, 1508
];

const _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -122, -112, -108, -102, 
	-99, -97, -95, -94, -92, -81, 32, 10, 
	10, 13, -48, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, 34, 34, 10, 
	32, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, -48, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -48, 32, -69, -48, -75, -47, -126, 
	-48, -80, -48, -70, -48, -66, -48, -74, 
	-48, -80, -48, -67, -48, -66, -48, -66, 
	-48, -69, -48, -72, -48, -75, -47, -123, 
	-48, -80, -48, -71, -48, -47, -75, -47, 
	-128, -48, -75, -48, -76, -47, -125, -48, 
	-68, -48, -66, -48, -78, -48, -80, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -122, -112, -108, -102, -99, 
	-97, -95, -94, -92, -81, 10, 10, 32, 
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -48, 10, 32, -69, 10, 
	-48, 10, -75, 10, -47, 10, -126, 10, 
	-48, 10, -80, 10, -48, 10, -70, 10, 
	-48, 10, -66, 10, -48, 10, -74, 10, 
	-48, 10, -80, 10, -48, 10, -67, 10, 
	-48, 10, -66, 10, -48, 10, -66, 10, 
	-48, 10, -69, 10, -48, 10, -72, 10, 
	-48, 10, -75, 10, -47, 10, -123, 10, 
	-48, 10, -80, 10, -48, 10, -71, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -65, 10, -47, 10, -125, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -48, 10, -68, 10, 
	-48, 10, -66, 10, 10, 32, 44, 10, 
	32, -47, 10, -119, 10, -47, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -47, 10, -114, 10, 
	10, 58, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -47, 10, -106, 10, -48, 10, 
	-71, 10, -48, 10, -80, -66, 10, -48, 
	10, 32, -76, 10, -47, 10, -106, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-47, 10, -106, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, -48, 10, -70, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -128, -48, -72, -48, 
	-70, -65, -48, -69, -48, -80, -48, -76, 
	-48, -72, 58, 10, 10, -48, 10, 32, 
	35, 124, 9, 13, -92, 10, -47, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -47, 10, 
	-106, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, 10, 58, -47, -125, -47, -127, 
	-47, -126, -48, -72, -48, -68, -48, -66, 
	32, 44, 32, -47, -119, -47, -126, -122, 
	-47, -128, -47, -125, -48, -70, -47, -126, 
	-47, -125, -47, -128, -48, -80, 32, -47, 
	-127, -47, -122, -48, -75, -48, -67, -48, 
	-80, -47, -128, -47, -106, -47, -114, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -122, -112, -108, -102, -99, 
	-97, -95, -94, -92, -81, 10, 10, 32, 
	-48, 10, 32, -69, 10, -48, 10, -75, 
	10, -47, 10, -126, 10, -48, 10, -80, 
	10, -48, 10, -70, 10, -48, 10, -66, 
	10, -48, 10, -74, 10, -48, 10, -80, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -48, 10, -66, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, -48, 10, -75, 
	10, -47, 10, -123, 10, -48, 10, -80, 
	10, -48, 10, -71, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -65, 
	10, -47, 10, -125, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, -48, 10, -72, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, 10, 32, 44, 10, 32, -47, 10, 
	-119, 10, -47, 10, -122, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -47, 10, 
	-106, 10, -48, 10, -71, 10, 10, 58, 
	-48, 10, -80, -66, 10, -48, 10, 32, 
	-76, 10, -47, 10, -106, 10, -47, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -47, 10, 
	-106, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, -48, 10, -70, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -48, -75, -48, -67, -48, -80, 
	-47, -128, -47, -106, -48, -71, 58, 10, 
	10, -48, 10, 32, 35, 37, 42, 64, 
	9, 13, -122, -112, -108, -102, -99, -97, 
	-95, -94, -92, -81, 10, 10, 32, -48, 
	10, 32, -69, 10, -48, 10, -75, 10, 
	-47, 10, -126, 10, -48, 10, -80, 10, 
	-48, 10, -70, 10, -48, 10, -66, 10, 
	-48, 10, -74, 10, -48, 10, -80, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-48, 10, -66, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, -48, 10, -75, 10, 
	-47, 10, -123, 10, -48, 10, -80, 10, 
	-48, 10, -71, 10, -48, -47, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -75, 
	10, -48, 10, -76, 10, -47, 10, -125, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, -48, 10, -78, 10, -48, 10, -80, 
	10, 10, 58, -128, 10, -48, 10, -72, 
	10, -48, 10, -65, 10, -47, 10, -125, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, -48, 10, -72, 10, -48, 10, -68, 
	10, -48, 10, -66, 10, 10, 32, 44, 
	10, 32, -47, 10, -119, 10, -47, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -47, 10, -114, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -48, 10, -71, 
	10, -48, 10, -80, -66, 10, -48, 10, 
	32, -76, 10, -47, 10, -106, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -47, 
	10, -106, 10, -48, 10, -66, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -69, 10, -48, 10, -70, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -48, -80, -66, -48, 32, 
	-76, -47, -106, -47, -125, -48, -67, -48, 
	-70, -47, -122, -47, -106, -48, -66, -48, 
	-67, -48, -80, -48, -69, 58, 10, 10, 
	-48, 10, 32, 35, 37, 64, 9, 13, 
	-97, -95, -92, 10, -48, -47, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -75, 
	10, -48, 10, -76, 10, -47, 10, -125, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, -48, 10, -78, 10, -48, 10, -80, 
	10, 10, 58, -128, 10, -48, 10, -72, 
	10, -48, 10, -70, 10, -48, 10, -69, 
	10, -48, 10, -80, 10, -48, 10, -76, 
	10, -48, 10, -72, 10, -47, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -47, 10, -114, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -48, 10, -71, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-47, 10, -106, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-48, -70, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 10, 10, 1, 1, 2, 9, 1, 
	1, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	9, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	7, 11, 2, 9, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 11, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 11, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 6, 4, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 12, 23, 25, 27, 30, 41, 
	43, 45, 49, 54, 59, 64, 69, 73, 
	77, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 115, 122, 127, 131, 137, 141, 144, 
	150, 161, 164, 166, 168, 170, 172, 174, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 233, 235, 237, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 282, 294, 297, 308, 312, 315, 318, 
	321, 324, 327, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 411, 414, 
	417, 420, 423, 426, 429, 432, 435, 438, 
	441, 444, 447, 450, 453, 456, 459, 462, 
	465, 469, 472, 475, 478, 481, 485, 488, 
	491, 494, 497, 500, 503, 506, 509, 512, 
	515, 518, 521, 524, 527, 530, 533, 536, 
	539, 542, 545, 548, 551, 554, 557, 560, 
	563, 566, 569, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 620, 624, 628, 631, 634, 
	637, 640, 643, 646, 649, 652, 655, 658, 
	661, 664, 667, 670, 673, 676, 679, 682, 
	685, 688, 691, 694, 697, 700, 703, 706, 
	709, 712, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 741, 743, 745, 747, 750, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 770, 772, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 866, 868, 870, 872, 
	874, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 905, 
	907, 909, 911, 913, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 954, 966, 969, 973, 
	976, 979, 982, 985, 988, 991, 994, 997, 
	1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 
	1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 
	1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 
	1072, 1075, 1078, 1081, 1084, 1087, 1090, 1093, 
	1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 
	1120, 1123, 1126, 1130, 1133, 1136, 1139, 1142, 
	1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 
	1169, 1172, 1175, 1178, 1181, 1184, 1187, 1191, 
	1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 
	1267, 1270, 1273, 1276, 1279, 1282, 1285, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1308, 1310, 
	1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 
	1328, 1330, 1332, 1334, 1336, 1345, 1357, 1360, 
	1364, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1388, 1391, 1394, 1397, 1400, 1403, 1406, 1409, 
	1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 
	1436, 1439, 1442, 1445, 1448, 1451, 1454, 1457, 
	1460, 1463, 1467, 1470, 1473, 1476, 1479, 1482, 
	1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 
	1509, 1512, 1515, 1518, 1521, 1524, 1527, 1530, 
	1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554, 
	1557, 1560, 1563, 1566, 1569, 1572, 1576, 1579, 
	1582, 1585, 1588, 1592, 1595, 1598, 1601, 1604, 
	1607, 1610, 1613, 1616, 1619, 1622, 1625, 1628, 
	1631, 1634, 1637, 1640, 1643, 1646, 1649, 1652, 
	1655, 1658, 1661, 1664, 1667, 1670, 1673, 1676, 
	1679, 1682, 1685, 1688, 1691, 1694, 1697, 1700, 
	1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 
	1728, 1732, 1735, 1738, 1741, 1744, 1747, 1750, 
	1753, 1756, 1759, 1762, 1765, 1768, 1771, 1774, 
	1777, 1780, 1783, 1786, 1789, 1792, 1795, 1798, 
	1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 
	1825, 1828, 1831, 1834, 1837, 1840, 1843, 1845, 
	1848, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 
	1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 
	1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 
	1897, 1899, 1907, 1912, 1916, 1919, 1922, 1925, 
	1928, 1931, 1934, 1937, 1940, 1943, 1946, 1949, 
	1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973, 
	1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 
	2000, 2003, 2006, 2009, 2012, 2016, 2019, 2022, 
	2025, 2028, 2031, 2034, 2037, 2040, 2043, 2046, 
	2049, 2052, 2055, 2058, 2061, 2064, 2067, 2070, 
	2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 
	2097, 2100, 2103, 2106, 2109, 2112, 2115, 2118, 
	2121, 2124, 2127, 2130, 2133, 2136, 2139, 2142, 
	2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166, 
	2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 
	2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214, 
	2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 
	2241, 2243, 2245, 2247, 2249
];

const _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 0, 21, 
	0, 0, 22, 24, 25, 23, 1, 3, 
	2, 4, 5, 6, 7, 8, 9, 2, 
	0, 26, 0, 27, 0, 28, 27, 27, 
	0, 31, 30, 32, 30, 29, 35, 34, 
	36, 34, 33, 35, 34, 37, 34, 33, 
	35, 34, 38, 34, 33, 40, 39, 39, 
	0, 3, 41, 41, 0, 43, 44, 42, 
	3, 0, 45, 0, 46, 0, 47, 0, 
	48, 0, 49, 0, 50, 0, 51, 0, 
	52, 0, 53, 0, 54, 0, 55, 0, 
	56, 0, 57, 0, 58, 0, 0, 0, 
	0, 0, 59, 60, 61, 60, 60, 63, 
	62, 59, 3, 64, 8, 64, 0, 65, 
	66, 65, 0, 69, 68, 70, 71, 68, 
	67, 0, 73, 74, 72, 0, 73, 72, 
	69, 75, 73, 74, 75, 72, 76, 69, 
	77, 78, 79, 80, 81, 82, 83, 77, 
	0, 84, 85, 0, 86, 0, 87, 0, 
	11, 0, 88, 0, 89, 0, 90, 0, 
	91, 0, 92, 0, 93, 0, 94, 0, 
	95, 0, 96, 0, 11, 0, 97, 0, 
	98, 0, 99, 0, 100, 0, 101, 0, 
	11, 0, 102, 0, 103, 0, 104, 0, 
	105, 0, 106, 0, 11, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 11, 0, 114, 115, 
	0, 116, 0, 117, 0, 118, 0, 119, 
	0, 120, 0, 121, 0, 122, 0, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 135, 134, 137, 
	136, 138, 137, 139, 140, 141, 142, 140, 
	139, 136, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 137, 136, 137, 153, 
	136, 154, 156, 155, 157, 158, 159, 160, 
	161, 162, 155, 0, 163, 137, 164, 136, 
	165, 137, 136, 166, 137, 136, 143, 137, 
	136, 167, 137, 136, 168, 137, 136, 169, 
	137, 136, 170, 137, 136, 171, 137, 136, 
	172, 137, 136, 173, 137, 136, 174, 137, 
	136, 175, 137, 136, 143, 137, 136, 176, 
	137, 136, 177, 137, 136, 178, 137, 136, 
	179, 137, 136, 180, 137, 136, 143, 137, 
	136, 181, 137, 136, 182, 137, 136, 183, 
	137, 136, 184, 137, 136, 185, 137, 136, 
	143, 137, 136, 186, 137, 136, 187, 137, 
	136, 188, 137, 136, 189, 137, 136, 190, 
	137, 136, 191, 137, 136, 192, 137, 136, 
	143, 137, 136, 193, 137, 136, 194, 137, 
	136, 195, 137, 136, 196, 137, 136, 197, 
	137, 136, 198, 137, 136, 199, 137, 136, 
	200, 137, 136, 201, 137, 136, 202, 137, 
	136, 203, 137, 136, 204, 137, 136, 205, 
	137, 136, 206, 137, 136, 207, 137, 136, 
	208, 137, 136, 209, 137, 136, 210, 137, 
	136, 137, 153, 211, 136, 137, 212, 136, 
	213, 137, 136, 179, 137, 136, 214, 137, 
	136, 215, 216, 137, 136, 217, 137, 136, 
	218, 137, 136, 219, 137, 136, 220, 137, 
	136, 221, 137, 136, 222, 137, 136, 223, 
	137, 136, 224, 137, 136, 225, 137, 136, 
	226, 137, 136, 227, 137, 136, 228, 137, 
	136, 229, 137, 136, 230, 137, 136, 137, 
	231, 136, 232, 137, 136, 233, 137, 136, 
	234, 137, 136, 235, 137, 136, 236, 137, 
	136, 237, 137, 136, 238, 137, 136, 239, 
	137, 136, 240, 137, 136, 241, 137, 136, 
	242, 137, 136, 243, 137, 136, 244, 137, 
	136, 245, 137, 136, 246, 137, 136, 247, 
	137, 136, 137, 153, 136, 248, 137, 136, 
	249, 137, 136, 250, 137, 136, 251, 137, 
	136, 252, 137, 136, 253, 137, 136, 254, 
	137, 136, 255, 137, 136, 256, 137, 136, 
	257, 137, 136, 258, 137, 136, 247, 137, 
	136, 259, 137, 136, 143, 260, 137, 136, 
	261, 137, 153, 136, 262, 137, 136, 263, 
	137, 136, 143, 137, 136, 264, 137, 136, 
	265, 137, 136, 266, 137, 136, 267, 137, 
	136, 268, 137, 136, 269, 137, 136, 270, 
	137, 136, 271, 137, 136, 272, 137, 136, 
	273, 137, 136, 274, 137, 136, 275, 137, 
	136, 276, 137, 136, 277, 137, 136, 278, 
	137, 136, 279, 137, 136, 280, 137, 136, 
	247, 137, 136, 281, 137, 136, 212, 137, 
	136, 137, 282, 136, 137, 283, 136, 137, 
	284, 136, 137, 285, 136, 137, 286, 136, 
	137, 287, 136, 137, 288, 136, 137, 289, 
	136, 137, 290, 136, 137, 291, 136, 137, 
	292, 136, 137, 293, 136, 137, 294, 136, 
	137, 295, 136, 296, 0, 297, 0, 298, 
	0, 299, 0, 300, 301, 0, 302, 0, 
	303, 0, 304, 0, 305, 0, 306, 0, 
	307, 0, 308, 0, 309, 0, 310, 0, 
	312, 311, 314, 313, 315, 314, 316, 317, 
	317, 316, 313, 318, 314, 313, 319, 314, 
	313, 320, 314, 313, 321, 314, 313, 322, 
	314, 313, 323, 314, 313, 324, 314, 313, 
	325, 314, 313, 326, 314, 313, 327, 314, 
	313, 328, 314, 313, 329, 314, 313, 330, 
	314, 313, 331, 314, 313, 332, 314, 313, 
	333, 314, 313, 334, 314, 313, 335, 314, 
	313, 336, 314, 313, 314, 337, 313, 338, 
	0, 339, 0, 340, 0, 341, 0, 342, 
	0, 343, 0, 344, 0, 345, 0, 346, 
	0, 347, 0, 348, 0, 349, 0, 21, 
	350, 0, 351, 0, 352, 0, 100, 0, 
	353, 0, 354, 355, 0, 356, 0, 357, 
	0, 358, 0, 359, 0, 360, 0, 361, 
	0, 362, 0, 363, 0, 364, 0, 365, 
	0, 366, 0, 367, 0, 368, 0, 369, 
	0, 370, 0, 371, 0, 372, 0, 373, 
	0, 374, 0, 375, 0, 376, 0, 377, 
	0, 378, 0, 379, 0, 380, 0, 381, 
	0, 382, 0, 383, 0, 384, 0, 385, 
	0, 386, 0, 387, 0, 389, 388, 391, 
	390, 392, 391, 393, 394, 395, 396, 394, 
	393, 390, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 391, 390, 391, 407, 
	390, 408, 391, 409, 390, 410, 391, 390, 
	411, 391, 390, 397, 391, 390, 412, 391, 
	390, 413, 391, 390, 414, 391, 390, 415, 
	391, 390, 416, 391, 390, 417, 391, 390, 
	418, 391, 390, 419, 391, 390, 420, 391, 
	390, 397, 391, 390, 421, 391, 390, 422, 
	391, 390, 423, 391, 390, 424, 391, 390, 
	425, 391, 390, 397, 391, 390, 426, 391, 
	390, 427, 391, 390, 428, 391, 390, 429, 
	391, 390, 430, 391, 390, 397, 391, 390, 
	431, 391, 390, 432, 391, 390, 433, 391, 
	390, 434, 391, 390, 435, 391, 390, 436, 
	391, 390, 437, 391, 390, 397, 391, 390, 
	438, 391, 390, 439, 391, 390, 440, 391, 
	390, 441, 391, 390, 442, 391, 390, 443, 
	391, 390, 444, 391, 390, 445, 391, 390, 
	446, 391, 390, 447, 391, 390, 448, 391, 
	390, 449, 391, 390, 450, 391, 390, 451, 
	391, 390, 452, 391, 390, 453, 391, 390, 
	454, 391, 390, 455, 391, 390, 391, 407, 
	456, 390, 391, 457, 390, 458, 391, 390, 
	424, 391, 390, 459, 391, 390, 460, 391, 
	390, 461, 391, 390, 462, 391, 390, 463, 
	391, 390, 464, 391, 390, 465, 391, 390, 
	466, 391, 390, 467, 391, 390, 468, 391, 
	390, 469, 391, 390, 470, 391, 390, 471, 
	391, 390, 472, 391, 390, 391, 407, 390, 
	473, 391, 390, 397, 474, 391, 390, 475, 
	391, 407, 390, 476, 391, 390, 477, 391, 
	390, 397, 391, 390, 478, 391, 390, 479, 
	391, 390, 480, 391, 390, 481, 391, 390, 
	482, 391, 390, 483, 391, 390, 484, 391, 
	390, 485, 391, 390, 486, 391, 390, 487, 
	391, 390, 488, 391, 390, 489, 391, 390, 
	490, 391, 390, 491, 391, 390, 492, 391, 
	390, 493, 391, 390, 494, 391, 390, 472, 
	391, 390, 495, 391, 390, 457, 391, 390, 
	391, 496, 390, 391, 497, 390, 391, 498, 
	390, 391, 499, 390, 391, 500, 390, 391, 
	501, 390, 391, 502, 390, 391, 503, 390, 
	391, 504, 390, 391, 505, 390, 391, 506, 
	390, 391, 507, 390, 391, 508, 390, 391, 
	509, 390, 510, 0, 511, 0, 512, 0, 
	513, 0, 514, 0, 515, 0, 516, 0, 
	517, 0, 518, 0, 519, 0, 520, 0, 
	521, 0, 522, 0, 524, 523, 526, 525, 
	527, 526, 528, 529, 530, 531, 529, 528, 
	525, 532, 533, 534, 535, 536, 537, 538, 
	539, 540, 541, 526, 525, 526, 542, 525, 
	543, 526, 544, 525, 545, 526, 525, 546, 
	526, 525, 532, 526, 525, 547, 526, 525, 
	548, 526, 525, 549, 526, 525, 550, 526, 
	525, 551, 526, 525, 552, 526, 525, 553, 
	526, 525, 554, 526, 525, 555, 526, 525, 
	532, 526, 525, 556, 526, 525, 557, 526, 
	525, 558, 526, 525, 559, 526, 525, 560, 
	526, 525, 532, 526, 525, 561, 526, 525, 
	562, 526, 525, 563, 526, 525, 564, 526, 
	525, 565, 526, 525, 532, 526, 525, 566, 
	526, 525, 567, 526, 525, 568, 526, 525, 
	569, 526, 525, 570, 526, 525, 571, 526, 
	525, 572, 526, 525, 532, 526, 525, 573, 
	574, 526, 525, 575, 526, 525, 576, 526, 
	525, 577, 526, 525, 578, 526, 525, 579, 
	526, 525, 580, 526, 525, 581, 526, 525, 
	582, 526, 525, 583, 526, 525, 584, 526, 
	525, 585, 526, 525, 586, 526, 525, 587, 
	526, 525, 588, 526, 525, 589, 526, 525, 
	590, 526, 525, 591, 526, 525, 526, 542, 
	525, 592, 526, 525, 593, 526, 525, 594, 
	526, 525, 595, 526, 525, 596, 526, 525, 
	597, 526, 525, 598, 526, 525, 599, 526, 
	525, 600, 526, 525, 601, 526, 525, 602, 
	526, 525, 603, 526, 525, 604, 526, 525, 
	605, 526, 525, 606, 526, 525, 607, 526, 
	525, 608, 526, 525, 526, 542, 609, 525, 
	526, 610, 525, 611, 526, 525, 559, 526, 
	525, 612, 526, 525, 613, 614, 526, 525, 
	615, 526, 525, 616, 526, 525, 617, 526, 
	525, 618, 526, 525, 619, 526, 525, 620, 
	526, 525, 621, 526, 525, 622, 526, 525, 
	623, 526, 525, 624, 526, 525, 625, 526, 
	525, 626, 526, 525, 627, 526, 525, 628, 
	526, 525, 526, 629, 525, 630, 526, 525, 
	631, 526, 525, 632, 526, 525, 633, 526, 
	525, 634, 526, 525, 635, 526, 525, 636, 
	526, 525, 637, 526, 525, 638, 526, 525, 
	639, 526, 525, 640, 526, 525, 641, 526, 
	525, 642, 526, 525, 643, 526, 525, 644, 
	526, 525, 591, 526, 525, 645, 526, 525, 
	646, 526, 525, 647, 526, 525, 648, 526, 
	525, 649, 526, 525, 650, 526, 525, 651, 
	526, 525, 652, 526, 525, 653, 526, 525, 
	654, 526, 525, 655, 526, 525, 591, 526, 
	525, 656, 526, 525, 532, 657, 526, 525, 
	658, 526, 542, 525, 659, 526, 525, 660, 
	526, 525, 532, 526, 525, 661, 526, 525, 
	662, 526, 525, 663, 526, 525, 664, 526, 
	525, 665, 526, 525, 666, 526, 525, 667, 
	526, 525, 668, 526, 525, 669, 526, 525, 
	670, 526, 525, 671, 526, 525, 672, 526, 
	525, 673, 526, 525, 674, 526, 525, 675, 
	526, 525, 676, 526, 525, 677, 526, 525, 
	591, 526, 525, 678, 526, 525, 610, 526, 
	525, 526, 679, 525, 526, 680, 525, 526, 
	681, 525, 526, 682, 525, 526, 683, 525, 
	526, 684, 525, 526, 685, 525, 526, 686, 
	525, 526, 687, 525, 526, 688, 525, 526, 
	689, 525, 526, 690, 525, 526, 691, 525, 
	526, 692, 525, 693, 0, 11, 694, 0, 
	695, 21, 0, 696, 0, 697, 0, 11, 
	0, 698, 0, 699, 0, 700, 0, 701, 
	0, 702, 0, 703, 0, 704, 0, 705, 
	0, 706, 0, 707, 0, 708, 0, 709, 
	0, 710, 0, 711, 0, 712, 0, 713, 
	0, 714, 0, 715, 0, 716, 0, 718, 
	717, 720, 719, 721, 720, 722, 723, 724, 
	723, 722, 719, 725, 726, 727, 720, 719, 
	728, 729, 720, 719, 730, 720, 719, 731, 
	720, 719, 732, 720, 719, 733, 720, 719, 
	734, 720, 719, 735, 720, 719, 736, 720, 
	719, 737, 720, 719, 738, 720, 719, 739, 
	720, 719, 740, 720, 719, 741, 720, 719, 
	742, 720, 719, 743, 720, 719, 744, 720, 
	719, 745, 720, 719, 746, 720, 719, 720, 
	747, 719, 748, 720, 719, 749, 720, 719, 
	750, 720, 719, 751, 720, 719, 752, 720, 
	719, 753, 720, 719, 754, 720, 719, 755, 
	720, 719, 756, 720, 719, 757, 720, 719, 
	758, 720, 719, 759, 720, 719, 746, 720, 
	719, 760, 720, 719, 761, 762, 720, 719, 
	763, 720, 719, 764, 720, 719, 765, 720, 
	719, 766, 720, 719, 767, 720, 719, 768, 
	720, 719, 769, 720, 719, 770, 720, 719, 
	771, 720, 719, 772, 720, 719, 773, 720, 
	719, 774, 720, 719, 775, 720, 719, 776, 
	720, 719, 720, 777, 719, 778, 720, 719, 
	779, 720, 719, 780, 720, 719, 781, 720, 
	719, 782, 720, 719, 783, 720, 719, 784, 
	720, 719, 785, 720, 719, 786, 720, 719, 
	787, 720, 719, 788, 720, 719, 789, 720, 
	719, 790, 720, 719, 791, 720, 719, 792, 
	720, 719, 746, 720, 719, 793, 720, 719, 
	794, 720, 719, 795, 720, 719, 796, 720, 
	719, 797, 720, 719, 798, 720, 719, 799, 
	720, 719, 800, 720, 719, 801, 720, 719, 
	802, 720, 719, 803, 720, 719, 746, 720, 
	719, 804, 720, 719, 805, 720, 719, 806, 
	720, 719, 807, 720, 719, 808, 720, 719, 
	809, 720, 719, 810, 720, 719, 811, 720, 
	719, 812, 720, 719, 813, 720, 719, 814, 
	720, 719, 815, 720, 719, 816, 720, 719, 
	817, 720, 719, 818, 720, 719, 819, 720, 
	719, 820, 720, 719, 746, 720, 719, 720, 
	821, 719, 720, 822, 719, 720, 823, 719, 
	720, 824, 719, 720, 825, 719, 720, 826, 
	719, 720, 827, 719, 720, 828, 719, 720, 
	829, 719, 720, 830, 719, 720, 831, 719, 
	720, 832, 719, 720, 833, 719, 720, 834, 
	719, 835, 0, 351, 0, 836, 0, 2, 
	0, 837, 0
];

const _lexer_trans_targs = [
	0, 2, 6, 6, 7, 16, 18, 3, 
	32, 35, 762, 3, 41, 55, 61, 67, 
	75, 295, 622, 628, 760, 4, 5, 5, 
	6, 17, 8, 9, 10, 11, 11, 11, 
	12, 11, 11, 11, 12, 13, 14, 15, 
	6, 15, 16, 6, 17, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	30, 31, 764, 33, 34, 6, 33, 32, 
	34, 35, 36, 37, 39, 40, 38, 36, 
	37, 38, 36, 39, 2, 40, 7, 16, 
	18, 3, 32, 35, 42, 45, 43, 44, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 56, 57, 58, 59, 60, 62, 63, 
	64, 65, 66, 68, 69, 70, 71, 72, 
	73, 74, 76, 242, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	95, 96, 97, 96, 6, 228, 98, 98, 
	100, 114, 120, 126, 134, 156, 202, 208, 
	226, 99, 2, 6, 6, 7, 16, 18, 
	3, 32, 35, 101, 104, 102, 103, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	115, 116, 117, 118, 119, 121, 122, 123, 
	124, 125, 127, 128, 129, 130, 131, 132, 
	133, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 157, 158, 
	190, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 203, 204, 205, 206, 207, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 220, 221, 222, 223, 224, 
	225, 227, 229, 230, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 6, 
	243, 244, 245, 246, 247, 279, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 257, 258, 259, 258, 6, 260, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 99, 280, 281, 282, 283, 284, 285, 
	286, 287, 288, 289, 290, 291, 292, 293, 
	294, 296, 297, 445, 298, 299, 300, 301, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 323, 324, 325, 
	326, 327, 328, 329, 330, 331, 330, 331, 
	332, 331, 6, 431, 333, 333, 334, 348, 
	354, 360, 368, 390, 405, 411, 429, 99, 
	335, 338, 336, 337, 339, 340, 341, 342, 
	343, 344, 345, 346, 347, 349, 350, 351, 
	352, 353, 355, 356, 357, 358, 359, 361, 
	362, 363, 364, 365, 366, 367, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	379, 380, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 400, 401, 402, 403, 
	404, 406, 407, 408, 409, 410, 412, 413, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	422, 423, 424, 425, 426, 427, 428, 430, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	440, 441, 442, 443, 444, 6, 446, 447, 
	448, 449, 450, 451, 452, 453, 454, 455, 
	456, 457, 458, 459, 460, 459, 460, 461, 
	460, 6, 608, 462, 462, 463, 477, 483, 
	489, 497, 537, 582, 588, 606, 99, 464, 
	467, 465, 466, 468, 469, 470, 471, 472, 
	473, 474, 475, 476, 478, 479, 480, 481, 
	482, 484, 485, 486, 487, 488, 490, 491, 
	492, 493, 494, 495, 496, 498, 516, 499, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 513, 514, 515, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	525, 526, 527, 528, 529, 530, 531, 532, 
	533, 534, 535, 536, 538, 539, 570, 540, 
	541, 542, 543, 544, 545, 546, 547, 548, 
	549, 550, 551, 552, 553, 554, 555, 556, 
	557, 558, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 568, 569, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 580, 581, 
	583, 584, 585, 586, 587, 589, 590, 591, 
	592, 593, 594, 595, 596, 597, 598, 599, 
	600, 601, 602, 603, 604, 605, 607, 609, 
	610, 611, 612, 613, 614, 615, 616, 617, 
	618, 619, 620, 621, 6, 623, 624, 625, 
	626, 627, 629, 630, 631, 632, 633, 634, 
	635, 636, 637, 638, 639, 640, 641, 642, 
	643, 644, 645, 646, 647, 648, 649, 648, 
	649, 650, 649, 6, 746, 651, 683, 728, 
	652, 670, 653, 654, 655, 656, 657, 658, 
	659, 660, 661, 662, 663, 664, 665, 666, 
	667, 668, 669, 99, 671, 672, 673, 674, 
	675, 676, 677, 678, 679, 680, 681, 682, 
	684, 685, 716, 686, 687, 688, 689, 690, 
	691, 692, 693, 694, 695, 696, 697, 698, 
	699, 700, 701, 702, 703, 704, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 714, 
	715, 717, 718, 719, 720, 721, 722, 723, 
	724, 725, 726, 727, 729, 730, 731, 732, 
	733, 734, 735, 736, 737, 738, 739, 740, 
	741, 742, 743, 744, 745, 747, 748, 749, 
	750, 751, 752, 753, 754, 755, 756, 757, 
	758, 759, 6, 761, 763, 0
];

const _lexer_trans_actions = [
	39, 25, 0, 47, 3, 1, 0, 25, 
	1, 31, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 0, 
	99, 19, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 107, 23, 44, 
	0, 0, 0, 33, 33, 47, 33, 80, 
	0, 0, 35, 0, 89, 0, 86, 83, 
	37, 89, 83, 92, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 77, 0, 65, 29, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 56, 27, 115, 53, 50, 27, 
	56, 50, 59, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 77, 0, 74, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	77, 0, 71, 29, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 50, 124, 0, 47, 77, 
	0, 68, 29, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 77, 0, 62, 29, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 764;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 1263 "js/lib/gherkin/lexer/uk.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */
  
/* line 1270 "js/lib/gherkin/lexer/uk.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1486 "js/lib/gherkin/lexer/uk.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1525 "js/lib/gherkin/lexer/uk.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();


/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pt.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 39, 44, 
	49, 54, 59, 63, 67, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 88, 
	93, 100, 105, 107, 108, 110, 111, 112, 
	113, 114, 115, 116, 117, 131, 133, 135, 
	137, 139, 141, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 177, 178, 179, 
	180, 184, 185, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 202, 203, 204, 205, 206, 207, 208, 
	209, 223, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 249, 251, 
	253, 255, 257, 260, 262, 264, 266, 268, 
	270, 272, 274, 276, 279, 281, 284, 286, 
	288, 290, 292, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 316, 318, 
	320, 322, 323, 324, 325, 326, 327, 328, 
	329, 330, 331, 338, 340, 342, 344, 346, 
	348, 350, 352, 354, 356, 358, 360, 362, 
	364, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 382, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 423, 425, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 512, 513, 514, 
	515, 516, 520, 526, 529, 531, 537, 553, 
	556, 558, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	591, 593, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 657, 658, 659, 660, 661, 662, 663, 
	664, 665, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 736, 738, 741, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 767, 769, 771, 773, 
	775, 777, 779, 781, 783, 785, 787, 789, 
	791, 793, 795, 797, 799, 800, 801
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 101, 111, 110, -61, 97, -95, 114, 
	105, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 67, 68, 69, 70, 77, 
	81, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 97, 100, 111, 32, 110, 115, 120, 
	116, -61, 97, -93, 113, 117, 101, 109, 
	97, 32, 100, 111, 32, 67, 101, 110, 
	-61, 97, -95, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 97, 
	10, 100, 10, 111, 10, 32, 110, 10, 
	116, -61, 10, 97, -93, 10, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 100, 10, 97, 10, 100, 10, 101, 
	10, 97, 10, 115, 10, 117, 10, 97, 
	10, 110, 101, 109, 112, 108, 111, 115, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 117, 10, 110, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 100, 10, 97, 
	10, 100, 10, 101, 10, 58, 117, 110, 
	99, 105, 111, 110, 97, 108, 105, 100, 
	97, 100, 101, 58, 10, 10, 10, 32, 
	35, 37, 64, 67, 69, 70, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 101, 111, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 110, 
	10, 116, 10, 101, 10, 120, 10, 116, 
	10, 115, 120, 10, 113, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 101, 10, 109, 10, 112, 10, 
	108, 10, 111, 10, 115, 10, 117, 10, 
	110, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	100, 10, 97, 10, 100, 10, 101, 97, 
	115, 117, 97, 110, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 10, 101, 111, 10, 110, -61, 10, 
	97, -95, 10, 10, 114, 10, 105, 10, 
	111, 10, 58, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 97, 10, 
	100, 10, 111, 10, 32, 110, 115, 10, 
	116, -61, 10, 97, -93, 10, 10, 113, 
	10, 117, 10, 101, 10, 109, 10, 97, 
	10, 32, 10, 100, 10, 111, 10, 32, 
	10, 67, 10, 101, 10, 117, 10, 110, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 100, 
	10, 97, 10, 100, 10, 101, 10, 97, 
	10, 115, 10, 117, 10, 97, 10, 110, 
	110, 116, 101, 120, 116, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 97, 
	10, 100, 10, 111, 10, 32, 110, 115, 
	10, 116, -61, 10, 97, -93, 10, 10, 
	113, 10, 117, 10, 101, 10, 109, 10, 
	97, 10, 32, 10, 100, 10, 111, 10, 
	32, 10, 67, 10, 117, 10, 110, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 100, 10, 
	97, 10, 100, 10, 101, 10, 97, 10, 
	115, 10, 117, 10, 97, 10, 110, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 2, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 14, 1, 1, 1, 
	4, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 8, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 14, 3, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 41, 46, 
	51, 56, 61, 65, 69, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	114, 121, 126, 129, 131, 134, 136, 138, 
	140, 142, 144, 146, 148, 162, 165, 168, 
	171, 174, 177, 180, 183, 186, 189, 192, 
	195, 198, 201, 204, 207, 223, 225, 227, 
	229, 234, 236, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 268, 270, 272, 274, 276, 278, 280, 
	282, 296, 299, 302, 305, 308, 311, 314, 
	317, 320, 323, 326, 329, 332, 335, 338, 
	341, 344, 347, 351, 354, 357, 360, 363, 
	366, 369, 372, 375, 379, 382, 386, 389, 
	392, 395, 398, 401, 404, 407, 410, 413, 
	416, 419, 422, 425, 428, 431, 434, 437, 
	440, 443, 445, 447, 449, 451, 453, 455, 
	457, 459, 461, 468, 471, 474, 477, 480, 
	483, 486, 489, 492, 495, 498, 501, 504, 
	507, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 
	540, 542, 552, 555, 558, 561, 564, 567, 
	570, 573, 576, 579, 582, 585, 588, 591, 
	594, 598, 601, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 708, 711, 714, 
	717, 720, 723, 726, 729, 731, 733, 735, 
	737, 739, 743, 749, 753, 756, 762, 778, 
	782, 785, 789, 792, 795, 798, 801, 804, 
	807, 810, 813, 816, 819, 822, 825, 828, 
	833, 836, 840, 843, 846, 849, 852, 855, 
	858, 861, 864, 867, 870, 873, 876, 879, 
	882, 885, 888, 891, 894, 897, 900, 903, 
	906, 909, 912, 915, 918, 921, 924, 927, 
	930, 932, 934, 936, 938, 940, 942, 944, 
	946, 948, 962, 965, 968, 971, 974, 977, 
	980, 983, 986, 989, 992, 995, 998, 1001, 
	1004, 1007, 1010, 1013, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1038, 1041, 1046, 1049, 1053, 
	1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 
	1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 
	1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 
	1128, 1131, 1134, 1137, 1140, 1142, 1144
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 18, 17, 17, 
	0, 21, 20, 22, 20, 19, 25, 24, 
	26, 24, 23, 25, 24, 27, 24, 23, 
	25, 24, 28, 24, 23, 30, 29, 29, 
	0, 2, 31, 31, 0, 33, 34, 32, 
	2, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	0, 50, 52, 53, 51, 0, 0, 0, 
	0, 54, 55, 56, 55, 55, 58, 57, 
	54, 2, 59, 7, 59, 0, 60, 61, 
	0, 62, 0, 63, 64, 0, 64, 0, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	70, 69, 72, 71, 72, 73, 74, 75, 
	76, 74, 77, 78, 79, 80, 81, 82, 
	73, 71, 72, 83, 71, 72, 84, 71, 
	72, 85, 71, 72, 86, 71, 72, 87, 
	71, 72, 88, 71, 72, 89, 71, 72, 
	90, 71, 72, 91, 71, 72, 92, 71, 
	72, 93, 71, 72, 94, 71, 72, 95, 
	71, 72, 96, 71, 72, 97, 71, 99, 
	98, 100, 101, 102, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 98, 0, 112, 
	0, 113, 0, 114, 0, 49, 115, 116, 
	117, 0, 118, 0, 119, 113, 0, 113, 
	0, 120, 0, 121, 0, 122, 0, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 133, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 139, 138, 
	141, 140, 141, 142, 143, 144, 145, 143, 
	146, 147, 148, 149, 150, 151, 142, 140, 
	141, 152, 140, 141, 153, 140, 141, 154, 
	140, 141, 155, 140, 141, 156, 140, 141, 
	157, 140, 141, 158, 140, 141, 159, 140, 
	141, 160, 140, 141, 161, 140, 141, 162, 
	140, 141, 163, 140, 141, 164, 140, 141, 
	165, 140, 141, 166, 140, 141, 167, 140, 
	141, 168, 140, 169, 141, 170, 140, 170, 
	141, 140, 141, 171, 140, 141, 172, 140, 
	141, 173, 140, 141, 166, 140, 141, 174, 
	140, 141, 175, 140, 141, 176, 140, 141, 
	166, 177, 140, 141, 178, 140, 179, 141, 
	175, 140, 175, 141, 140, 141, 180, 140, 
	141, 181, 140, 141, 182, 140, 141, 183, 
	140, 141, 184, 140, 141, 185, 140, 141, 
	186, 140, 141, 187, 140, 141, 188, 140, 
	141, 189, 140, 141, 190, 140, 141, 191, 
	140, 141, 173, 140, 141, 192, 140, 141, 
	176, 140, 141, 193, 140, 141, 194, 140, 
	141, 174, 140, 195, 0, 196, 0, 197, 
	0, 198, 0, 199, 0, 200, 0, 201, 
	0, 203, 202, 205, 204, 205, 206, 207, 
	208, 207, 206, 204, 205, 209, 204, 205, 
	210, 204, 205, 211, 204, 205, 212, 204, 
	205, 213, 204, 205, 214, 204, 205, 215, 
	204, 205, 216, 204, 205, 217, 204, 205, 
	218, 204, 205, 219, 204, 205, 220, 204, 
	205, 221, 204, 205, 222, 204, 223, 0, 
	224, 0, 225, 0, 226, 0, 227, 0, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	232, 0, 233, 0, 234, 0, 235, 0, 
	236, 0, 238, 237, 240, 239, 240, 241, 
	242, 243, 242, 244, 245, 246, 241, 239, 
	240, 247, 239, 240, 248, 239, 240, 249, 
	239, 240, 250, 239, 240, 251, 239, 240, 
	252, 239, 240, 253, 239, 240, 254, 239, 
	240, 255, 239, 240, 256, 239, 240, 257, 
	239, 240, 258, 239, 240, 259, 239, 240, 
	260, 239, 240, 261, 262, 239, 240, 263, 
	239, 264, 240, 265, 239, 265, 240, 239, 
	240, 266, 239, 240, 267, 239, 240, 268, 
	239, 240, 269, 239, 240, 270, 239, 240, 
	271, 239, 240, 272, 239, 240, 273, 239, 
	240, 267, 239, 240, 274, 275, 239, 240, 
	276, 239, 240, 277, 239, 240, 278, 239, 
	240, 279, 239, 240, 280, 239, 240, 281, 
	239, 240, 282, 239, 240, 283, 239, 240, 
	284, 239, 240, 285, 239, 240, 261, 239, 
	240, 286, 239, 240, 287, 239, 240, 288, 
	239, 240, 289, 239, 240, 290, 239, 240, 
	268, 239, 240, 291, 239, 240, 292, 239, 
	240, 293, 239, 240, 294, 239, 240, 295, 
	239, 240, 296, 239, 240, 297, 239, 240, 
	298, 239, 240, 299, 239, 240, 300, 239, 
	240, 301, 239, 240, 302, 239, 240, 268, 
	239, 303, 0, 114, 0, 304, 0, 305, 
	0, 112, 0, 306, 307, 306, 0, 310, 
	309, 311, 312, 309, 308, 0, 314, 315, 
	313, 0, 314, 313, 310, 316, 314, 315, 
	316, 313, 310, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	317, 0, 72, 330, 331, 71, 72, 332, 
	71, 333, 72, 334, 71, 334, 72, 71, 
	72, 335, 71, 72, 336, 71, 72, 337, 
	71, 72, 97, 71, 72, 338, 71, 72, 
	339, 71, 72, 340, 71, 72, 341, 71, 
	72, 336, 71, 72, 342, 71, 72, 343, 
	71, 72, 344, 71, 72, 97, 345, 346, 
	71, 72, 347, 71, 348, 72, 343, 71, 
	343, 72, 71, 72, 349, 71, 72, 350, 
	71, 72, 351, 71, 72, 352, 71, 72, 
	353, 71, 72, 354, 71, 72, 355, 71, 
	72, 356, 71, 72, 357, 71, 72, 358, 
	71, 72, 330, 71, 72, 359, 71, 72, 
	360, 71, 72, 361, 71, 72, 362, 71, 
	72, 363, 71, 72, 364, 71, 72, 365, 
	71, 72, 366, 71, 72, 367, 71, 72, 
	368, 71, 72, 369, 71, 72, 370, 71, 
	72, 337, 71, 72, 371, 71, 72, 344, 
	71, 72, 372, 71, 72, 373, 71, 72, 
	342, 71, 374, 0, 375, 0, 376, 0, 
	377, 0, 378, 0, 379, 0, 380, 0, 
	382, 381, 384, 383, 384, 385, 386, 387, 
	388, 386, 389, 390, 391, 392, 393, 394, 
	385, 383, 384, 395, 383, 384, 396, 383, 
	384, 397, 383, 384, 398, 383, 384, 399, 
	383, 384, 400, 383, 384, 401, 383, 384, 
	402, 383, 384, 403, 383, 384, 404, 383, 
	384, 405, 383, 384, 406, 383, 384, 407, 
	383, 384, 408, 383, 384, 409, 383, 384, 
	410, 383, 384, 411, 383, 412, 384, 413, 
	383, 413, 384, 383, 384, 414, 383, 384, 
	415, 383, 384, 416, 383, 384, 409, 383, 
	384, 417, 383, 384, 418, 383, 384, 419, 
	383, 384, 409, 420, 421, 383, 384, 422, 
	383, 423, 384, 418, 383, 418, 384, 383, 
	384, 424, 383, 384, 425, 383, 384, 426, 
	383, 384, 427, 383, 384, 428, 383, 384, 
	429, 383, 384, 430, 383, 384, 431, 383, 
	384, 432, 383, 384, 433, 383, 384, 434, 
	383, 384, 435, 383, 384, 436, 383, 384, 
	437, 383, 384, 438, 383, 384, 439, 383, 
	384, 440, 383, 384, 441, 383, 384, 442, 
	383, 384, 443, 383, 384, 444, 383, 384, 
	445, 383, 384, 416, 383, 384, 446, 383, 
	384, 419, 383, 384, 447, 383, 384, 448, 
	383, 384, 417, 383, 449, 0, 1, 0, 
	450, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 61, 64, 161, 236, 238, 241, 364, 
	4, 5, 6, 7, 7, 7, 8, 7, 
	7, 7, 8, 9, 10, 11, 2, 11, 
	12, 2, 13, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	366, 29, 30, 30, 2, 13, 32, 33, 
	2, 32, 31, 33, 35, 296, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 43, 
	44, 44, 2, 45, 59, 247, 260, 263, 
	278, 291, 293, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	2, 60, 2, 2, 3, 12, 14, 28, 
	31, 34, 61, 64, 161, 236, 238, 241, 
	62, 63, 28, 65, 68, 137, 66, 67, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 87, 88, 88, 2, 
	89, 103, 104, 112, 115, 119, 132, 134, 
	90, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 2, 60, 105, 
	106, 107, 108, 109, 110, 111, 113, 114, 
	103, 116, 117, 118, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	133, 135, 136, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 145, 146, 146, 2, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 159, 160, 60, 162, 
	163, 164, 165, 166, 167, 168, 169, 170, 
	171, 172, 173, 174, 175, 176, 177, 176, 
	177, 177, 2, 178, 192, 205, 223, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 190, 191, 2, 193, 200, 194, 
	195, 196, 197, 198, 199, 60, 201, 202, 
	203, 204, 206, 217, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 218, 219, 
	220, 221, 222, 224, 225, 226, 227, 228, 
	229, 230, 231, 232, 233, 234, 235, 237, 
	239, 240, 241, 242, 243, 245, 246, 244, 
	242, 243, 244, 242, 245, 246, 3, 12, 
	14, 28, 31, 34, 61, 64, 161, 236, 
	238, 241, 248, 255, 249, 250, 251, 252, 
	253, 254, 256, 257, 258, 259, 261, 262, 
	59, 264, 267, 265, 266, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 279, 
	280, 281, 282, 283, 284, 285, 286, 287, 
	288, 289, 290, 292, 294, 295, 297, 298, 
	299, 300, 301, 302, 303, 304, 305, 304, 
	305, 305, 2, 306, 320, 321, 329, 332, 
	346, 359, 361, 307, 308, 309, 310, 311, 
	312, 313, 314, 315, 316, 317, 318, 319, 
	2, 60, 322, 323, 324, 325, 326, 327, 
	328, 330, 331, 320, 333, 336, 334, 335, 
	337, 338, 339, 340, 341, 342, 343, 344, 
	345, 321, 347, 348, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 360, 362, 
	363, 365, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 31, 0, 
	0, 0, 47, 5, 41, 119, 41, 0, 
	29, 111, 29, 29, 0, 7, 95, 0, 
	0, 103, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 0, 99, 19, 0, 23, 
	107, 23, 44, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 68, 29, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 27, 115, 53, 50, 27, 56, 
	50, 56, 56, 56, 56, 56, 56, 59, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 71, 
	29, 77, 77, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 124, 0, 47, 0, 74, 
	77, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 62, 29, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 33, 33, 47, 33, 
	80, 0, 0, 35, 0, 0, 86, 83, 
	37, 89, 83, 89, 89, 89, 89, 89, 
	89, 92, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 65, 29, 77, 77, 77, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 366;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 691 "js/lib/gherkin/lexer/pt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
  
/* line 698 "js/lib/gherkin/lexer/pt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 914 "js/lib/gherkin/lexer/pt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 953 "js/lib/gherkin/lexer/pt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

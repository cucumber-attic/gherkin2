
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pl.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 45, 50, 
	55, 60, 65, 69, 73, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 94, 
	99, 106, 111, 112, 113, 114, 115, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 169, 171, 173, 175, 194, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 344, 346, 
	348, 350, 352, 354, 356, 358, 360, 362, 
	364, 366, 368, 370, 372, 374, 376, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 402, 403, 404, 405, 406, 
	407, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	568, 569, 570, 571, 572, 573, 574, 575, 
	576, 577, 578, 579, 580, 581, 582, 593, 
	595, 597, 599, 601, 603, 605, 607, 609, 
	611, 613, 615, 617, 619, 621, 623, 625, 
	627, 629, 631, 633, 635, 637, 639, 641, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	739, 740, 741, 742, 744, 745, 746, 747, 
	748, 749, 750, 751, 752, 753, 754, 755, 
	771, 773, 775, 777, 779, 781, 783, 785, 
	787, 789, 791, 793, 795, 797, 799, 801, 
	803, 805, 807, 809, 812, 814, 816, 818, 
	820, 822, 824, 826, 828, 830, 832, 834, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 892, 894, 896, 898, 900, 
	902, 904, 906, 908, 910, 912, 914, 916, 
	918, 920, 922, 924, 926, 928, 930, 932, 
	934, 935, 936, 937, 938, 942, 948, 951, 
	953, 959, 978, 979, 980
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 80, 83, 87, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	80, 83, 87, 90, 124, 9, 13, 34, 
	34, 10, 32, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	101, 101, -59, -101, -68, 108, 105, 101, 
	97, 106, -60, -123, 99, 114, 97, 122, 
	114, 122, 121, 107, -59, -126, 97, 100, 
	121, 58, 10, 10, 10, 32, 35, 87, 
	124, 9, 13, -59, 10, -126, 10, 10, 
	97, -59, 10, -101, 10, 10, 99, 10, 
	105, 10, 119, 10, 111, -59, 10, -101, 
	10, -60, 10, -121, 10, 10, 58, 10, 
	32, 34, 35, 37, 42, 64, 65, 73, 
	74, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 99, 122, 101, 110, 97, 114, 
	105, 117, 115, 122, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 73, 74, 
	77, 79, 83, 87, 90, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 108, 10, 
	101, 10, 101, -59, 10, -101, -68, 10, 
	10, 108, 10, 105, 10, 101, 10, 97, 
	10, 106, -60, 10, -123, 10, 10, 99, 
	10, 114, 10, 97, 10, 122, 10, 99, 
	122, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 117, 10, 115, 10, 
	122, 10, 58, 10, 97, 10, 98, 10, 
	108, 10, 111, 10, 110, 10, 32, 10, 
	115, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	115, 10, 122, 10, 97, -59, 10, 116, 
	-126, 10, 10, 97, -59, 10, -101, 10, 
	10, 99, 10, 105, 10, 119, 10, 111, 
	-59, 10, -101, 10, -60, 10, -121, 10, 
	10, 101, 10, 100, 10, 121, 10, 97, 
	-59, 10, 107, -126, 10, 10, 111, -59, 
	10, -68, 10, 10, 101, 10, 110, 10, 
	105, -59, 10, -126, 10, 10, 97, 10, 
	100, 97, 98, 108, 111, 110, 32, 115, 
	99, 101, 110, 97, 114, 105, 117, 115, 
	122, 97, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 10, 101, 10, 
	101, -59, 10, -101, -68, 10, 10, 108, 
	10, 105, 10, 101, 10, 97, 10, 106, 
	-60, 10, -123, 10, 10, 99, 10, 114, 
	10, 97, 10, 122, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 58, 
	-59, 10, 116, -126, 10, 10, 97, -59, 
	10, -101, 10, 10, 99, 10, 105, 10, 
	119, 10, 111, -59, 10, -101, 10, -60, 
	10, -121, 10, 10, 101, 10, 100, 10, 
	121, 10, 97, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, -59, 116, -126, 
	97, -59, -101, 99, 105, 119, 111, -59, 
	-101, -60, -121, 58, 10, 10, 10, 32, 
	35, 37, 64, 80, 83, 87, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 114, 10, 
	122, 10, 121, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, 10, 121, 10, 
	58, 10, 99, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, -59, 10, 
	-126, 10, 10, 97, -59, 10, -101, 10, 
	10, 99, 10, 105, 10, 119, 10, 111, 
	-59, 10, -101, 10, -60, 10, -121, 10, 
	10, 97, -59, 10, -126, 10, 10, 111, 
	-59, 10, -68, 10, 10, 101, 10, 110, 
	10, 105, 101, 100, 121, 97, -59, 107, 
	-126, 111, -59, -68, 101, 110, 105, 97, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 73, 74, 77, 79, 83, 87, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 101, 10, 101, -59, 
	10, -101, -68, 10, 10, 108, 10, 105, 
	10, 101, 10, 97, 10, 106, -60, 10, 
	-123, 10, 10, 99, 10, 114, 10, 97, 
	10, 122, 10, 99, 122, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 115, 10, 122, 10, 58, 10, 
	97, 10, 98, 10, 108, 10, 111, 10, 
	110, 10, 32, 10, 115, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 117, 10, 115, 10, 122, 10, 
	97, -59, 10, 116, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 10, 101, 10, 100, 
	10, 121, 10, 97, 10, 107, -59, 10, 
	-126, 10, 10, 97, 10, 100, -59, -126, 
	97, 100, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 65, 73, 
	74, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 17, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 14, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 4, 3, 2, 
	4, 17, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 47, 52, 
	57, 62, 67, 71, 75, 78, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	120, 127, 132, 134, 136, 138, 140, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 196, 
	199, 202, 205, 208, 211, 214, 217, 220, 
	223, 226, 229, 232, 235, 238, 257, 260, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 298, 301, 304, 307, 310, 
	313, 316, 319, 322, 325, 328, 331, 334, 
	337, 340, 343, 346, 349, 352, 355, 359, 
	362, 365, 368, 371, 374, 377, 380, 383, 
	386, 389, 392, 396, 399, 402, 405, 408, 
	411, 414, 417, 420, 423, 426, 429, 432, 
	435, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 478, 481, 
	484, 487, 490, 493, 496, 499, 502, 505, 
	508, 511, 514, 517, 520, 523, 526, 530, 
	533, 536, 539, 542, 545, 548, 551, 554, 
	557, 560, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 619, 
	622, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 680, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 740, 
	743, 747, 750, 753, 756, 759, 762, 765, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	815, 817, 819, 821, 823, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 854, 
	857, 860, 863, 866, 869, 872, 875, 878, 
	881, 884, 887, 890, 893, 896, 899, 902, 
	905, 908, 911, 914, 917, 920, 923, 926, 
	930, 933, 936, 939, 942, 945, 948, 951, 
	954, 957, 960, 963, 966, 969, 972, 975, 
	978, 981, 984, 987, 990, 993, 996, 999, 
	1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 
	1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 
	1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 
	1073, 1075, 1077, 1079, 1082, 1084, 1086, 1088, 
	1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 
	1120, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 
	1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 
	1168, 1171, 1174, 1177, 1181, 1184, 1187, 1190, 
	1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 
	1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 
	1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 
	1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 
	1290, 1293, 1296, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1336, 
	1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 
	1363, 1365, 1367, 1369, 1371, 1375, 1381, 1385, 
	1388, 1394, 1413, 1415, 1417
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 6, 9, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 20, 19, 19, 0, 23, 
	22, 24, 22, 21, 27, 26, 28, 26, 
	25, 27, 26, 29, 26, 25, 27, 26, 
	30, 26, 25, 32, 31, 31, 0, 2, 
	33, 33, 0, 35, 36, 34, 2, 0, 
	37, 0, 38, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 0, 52, 
	54, 55, 53, 0, 0, 0, 0, 56, 
	57, 58, 57, 57, 60, 59, 56, 2, 
	61, 7, 61, 0, 62, 0, 63, 0, 
	64, 0, 65, 0, 66, 67, 0, 68, 
	0, 63, 0, 66, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 63, 0, 73, 
	0, 74, 0, 63, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 79, 0, 80, 
	0, 81, 0, 82, 0, 83, 0, 84, 
	0, 86, 85, 88, 87, 88, 89, 90, 
	91, 90, 89, 87, 92, 88, 87, 93, 
	88, 87, 88, 94, 87, 95, 88, 87, 
	96, 88, 87, 88, 97, 87, 88, 98, 
	87, 88, 99, 87, 88, 100, 87, 101, 
	88, 87, 102, 88, 87, 103, 88, 87, 
	104, 88, 87, 88, 105, 87, 107, 106, 
	108, 109, 110, 111, 112, 113, 111, 114, 
	115, 116, 117, 118, 119, 120, 121, 106, 
	0, 122, 123, 0, 124, 0, 125, 0, 
	126, 0, 127, 0, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 134, 133, 
	136, 135, 136, 137, 138, 139, 140, 138, 
	141, 140, 142, 143, 144, 145, 146, 147, 
	137, 135, 136, 148, 135, 136, 149, 135, 
	136, 150, 135, 136, 151, 135, 136, 152, 
	135, 136, 153, 135, 136, 154, 135, 136, 
	155, 135, 136, 156, 135, 136, 157, 135, 
	136, 158, 135, 136, 159, 135, 136, 160, 
	135, 136, 161, 135, 136, 162, 135, 136, 
	163, 135, 136, 164, 135, 136, 165, 135, 
	166, 136, 135, 167, 168, 136, 135, 136, 
	169, 135, 136, 164, 135, 136, 167, 135, 
	136, 170, 135, 136, 171, 135, 172, 136, 
	135, 173, 136, 135, 136, 164, 135, 136, 
	174, 135, 136, 175, 135, 136, 164, 135, 
	136, 176, 177, 135, 136, 178, 135, 136, 
	179, 135, 136, 180, 135, 136, 181, 135, 
	136, 182, 135, 136, 183, 135, 136, 184, 
	135, 136, 185, 135, 136, 162, 135, 136, 
	186, 135, 136, 187, 135, 136, 188, 135, 
	136, 189, 135, 136, 190, 135, 136, 191, 
	135, 136, 192, 135, 136, 193, 135, 136, 
	194, 135, 136, 195, 135, 136, 196, 135, 
	136, 197, 135, 136, 198, 135, 136, 199, 
	135, 136, 200, 135, 136, 201, 135, 136, 
	185, 135, 202, 136, 203, 135, 204, 136, 
	135, 136, 205, 135, 206, 136, 135, 207, 
	136, 135, 136, 208, 135, 136, 209, 135, 
	136, 210, 135, 136, 211, 135, 212, 136, 
	135, 213, 136, 135, 214, 136, 135, 185, 
	136, 135, 136, 215, 135, 136, 216, 135, 
	136, 164, 135, 136, 217, 135, 218, 136, 
	219, 135, 220, 136, 135, 136, 221, 135, 
	222, 136, 135, 223, 136, 135, 136, 224, 
	135, 136, 225, 135, 136, 201, 135, 226, 
	136, 135, 227, 136, 135, 136, 228, 135, 
	136, 229, 135, 230, 0, 231, 0, 232, 
	0, 233, 0, 234, 0, 235, 0, 236, 
	0, 237, 0, 238, 0, 239, 0, 240, 
	0, 241, 0, 242, 0, 243, 0, 244, 
	0, 245, 0, 246, 0, 247, 0, 249, 
	248, 251, 250, 251, 252, 253, 254, 255, 
	253, 256, 255, 257, 258, 259, 260, 261, 
	262, 252, 250, 251, 263, 250, 251, 264, 
	250, 251, 265, 250, 251, 266, 250, 251, 
	267, 250, 251, 268, 250, 251, 269, 250, 
	251, 270, 250, 251, 271, 250, 251, 272, 
	250, 251, 273, 250, 251, 274, 250, 251, 
	275, 250, 251, 276, 250, 251, 277, 250, 
	251, 278, 250, 251, 279, 250, 251, 280, 
	250, 281, 251, 250, 282, 283, 251, 250, 
	251, 284, 250, 251, 279, 250, 251, 282, 
	250, 251, 285, 250, 251, 286, 250, 287, 
	251, 250, 288, 251, 250, 251, 279, 250, 
	251, 289, 250, 251, 290, 250, 251, 279, 
	250, 251, 291, 250, 251, 292, 250, 251, 
	293, 250, 251, 294, 250, 251, 295, 250, 
	251, 296, 250, 251, 297, 250, 251, 298, 
	250, 251, 299, 250, 251, 277, 250, 300, 
	251, 301, 250, 302, 251, 250, 251, 303, 
	250, 304, 251, 250, 305, 251, 250, 251, 
	306, 250, 251, 307, 250, 251, 308, 250, 
	251, 309, 250, 310, 251, 250, 311, 251, 
	250, 312, 251, 250, 299, 251, 250, 251, 
	313, 250, 251, 314, 250, 251, 279, 250, 
	251, 315, 250, 251, 316, 250, 317, 251, 
	250, 318, 251, 250, 251, 319, 250, 251, 
	320, 250, 321, 322, 0, 323, 0, 324, 
	0, 325, 0, 326, 0, 327, 0, 328, 
	0, 329, 0, 330, 0, 331, 0, 332, 
	0, 333, 0, 334, 0, 335, 0, 337, 
	336, 339, 338, 339, 340, 341, 342, 341, 
	343, 344, 345, 346, 340, 338, 339, 347, 
	338, 339, 348, 338, 339, 349, 338, 339, 
	350, 338, 339, 351, 338, 339, 352, 338, 
	339, 353, 338, 339, 354, 338, 339, 355, 
	338, 339, 356, 338, 339, 357, 338, 339, 
	358, 338, 339, 359, 338, 339, 360, 338, 
	339, 361, 338, 339, 362, 338, 339, 363, 
	338, 339, 364, 338, 365, 339, 338, 366, 
	339, 338, 339, 367, 338, 339, 368, 338, 
	339, 369, 338, 339, 370, 338, 339, 371, 
	372, 338, 339, 373, 338, 339, 374, 338, 
	339, 375, 338, 339, 376, 338, 339, 377, 
	338, 339, 378, 338, 339, 379, 338, 339, 
	369, 338, 339, 380, 338, 339, 381, 338, 
	339, 382, 338, 339, 383, 338, 339, 384, 
	338, 339, 385, 338, 339, 386, 338, 339, 
	387, 338, 339, 388, 338, 339, 389, 338, 
	339, 390, 338, 339, 391, 338, 339, 392, 
	338, 339, 393, 338, 339, 394, 338, 339, 
	395, 338, 339, 369, 338, 396, 339, 338, 
	397, 339, 338, 339, 398, 338, 399, 339, 
	338, 400, 339, 338, 339, 401, 338, 339, 
	402, 338, 339, 403, 338, 339, 404, 338, 
	405, 339, 338, 406, 339, 338, 407, 339, 
	338, 369, 339, 338, 339, 408, 338, 409, 
	339, 338, 410, 339, 338, 339, 411, 338, 
	412, 339, 338, 413, 339, 338, 339, 414, 
	338, 339, 415, 338, 339, 395, 338, 416, 
	0, 417, 0, 63, 0, 418, 0, 419, 
	420, 0, 421, 0, 422, 0, 423, 0, 
	424, 0, 425, 0, 426, 0, 427, 0, 
	428, 0, 429, 0, 431, 430, 433, 432, 
	433, 434, 435, 436, 437, 435, 438, 437, 
	439, 440, 441, 442, 443, 444, 434, 432, 
	433, 445, 432, 433, 446, 432, 433, 447, 
	432, 433, 448, 432, 433, 449, 432, 433, 
	450, 432, 433, 451, 432, 433, 452, 432, 
	433, 453, 432, 433, 454, 432, 433, 455, 
	432, 433, 456, 432, 433, 457, 432, 433, 
	458, 432, 433, 459, 432, 433, 460, 432, 
	433, 461, 432, 433, 462, 432, 463, 433, 
	432, 464, 465, 433, 432, 433, 466, 432, 
	433, 461, 432, 433, 464, 432, 433, 467, 
	432, 433, 468, 432, 469, 433, 432, 470, 
	433, 432, 433, 461, 432, 433, 471, 432, 
	433, 472, 432, 433, 461, 432, 433, 473, 
	474, 432, 433, 475, 432, 433, 476, 432, 
	433, 477, 432, 433, 478, 432, 433, 479, 
	432, 433, 480, 432, 433, 481, 432, 433, 
	482, 432, 433, 459, 432, 433, 483, 432, 
	433, 484, 432, 433, 485, 432, 433, 486, 
	432, 433, 487, 432, 433, 488, 432, 433, 
	489, 432, 433, 490, 432, 433, 491, 432, 
	433, 492, 432, 433, 493, 432, 433, 494, 
	432, 433, 495, 432, 433, 496, 432, 433, 
	497, 432, 433, 498, 432, 433, 482, 432, 
	499, 433, 500, 432, 501, 433, 432, 433, 
	502, 432, 503, 433, 432, 504, 433, 432, 
	433, 505, 432, 433, 506, 432, 433, 507, 
	432, 433, 508, 432, 509, 433, 432, 510, 
	433, 432, 511, 433, 432, 482, 433, 432, 
	433, 512, 432, 433, 513, 432, 433, 461, 
	432, 433, 514, 432, 433, 515, 432, 516, 
	433, 432, 517, 433, 432, 433, 518, 432, 
	433, 519, 432, 520, 0, 521, 0, 522, 
	0, 523, 0, 524, 525, 524, 0, 528, 
	527, 529, 530, 527, 526, 0, 532, 533, 
	531, 0, 532, 531, 528, 534, 532, 533, 
	534, 531, 528, 535, 536, 537, 538, 539, 
	540, 541, 539, 542, 543, 544, 545, 546, 
	547, 548, 549, 535, 0, 550, 0, 1, 
	0, 551, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 36, 42, 47, 50, 78, 262, 354, 
	452, 458, 4, 5, 6, 7, 7, 7, 
	8, 7, 7, 7, 8, 9, 10, 11, 
	2, 11, 12, 2, 13, 15, 16, 17, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 460, 29, 30, 30, 2, 13, 
	32, 33, 2, 32, 31, 33, 35, 28, 
	37, 38, 39, 41, 40, 43, 44, 45, 
	46, 48, 49, 51, 52, 53, 54, 55, 
	56, 57, 58, 59, 60, 61, 62, 61, 
	62, 62, 2, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 2, 2, 3, 12, 14, 28, 
	31, 34, 36, 42, 47, 50, 78, 262, 
	354, 452, 79, 178, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 89, 
	90, 90, 2, 91, 105, 106, 108, 114, 
	119, 122, 149, 165, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 2, 77, 107, 105, 109, 110, 111, 
	113, 112, 115, 116, 117, 118, 120, 121, 
	123, 132, 124, 125, 126, 127, 128, 129, 
	130, 131, 133, 134, 135, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 150, 162, 151, 152, 153, 154, 
	155, 156, 157, 158, 159, 160, 161, 163, 
	164, 166, 167, 174, 168, 169, 170, 171, 
	172, 173, 175, 176, 177, 114, 179, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 197, 198, 198, 2, 199, 213, 
	214, 216, 222, 227, 230, 240, 256, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 2, 77, 215, 213, 
	217, 218, 219, 221, 220, 223, 224, 225, 
	226, 228, 229, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 241, 253, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 254, 255, 257, 258, 259, 260, 261, 
	222, 263, 351, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	277, 278, 277, 278, 278, 2, 279, 293, 
	303, 329, 342, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 290, 291, 292, 
	2, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 77, 304, 312, 305, 306, 307, 
	308, 309, 310, 311, 313, 314, 315, 316, 
	317, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 327, 328, 330, 331, 332, 333, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	352, 353, 355, 356, 448, 357, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	366, 367, 367, 2, 368, 382, 383, 385, 
	391, 396, 399, 426, 442, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 2, 77, 384, 382, 386, 387, 
	388, 390, 389, 392, 393, 394, 395, 397, 
	398, 400, 409, 401, 402, 403, 404, 405, 
	406, 407, 408, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 427, 439, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	440, 441, 443, 444, 445, 446, 447, 391, 
	449, 450, 451, 42, 452, 453, 454, 456, 
	457, 455, 453, 454, 455, 453, 456, 457, 
	3, 12, 14, 28, 31, 34, 36, 42, 
	47, 50, 78, 262, 354, 452, 459, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	31, 0, 0, 0, 47, 5, 41, 119, 
	41, 0, 29, 111, 29, 29, 0, 7, 
	95, 0, 0, 103, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 99, 19, 
	0, 23, 107, 23, 44, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 74, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 27, 115, 53, 50, 27, 56, 
	50, 56, 56, 56, 56, 56, 56, 56, 
	56, 59, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 50, 124, 0, 
	47, 0, 68, 29, 77, 77, 77, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 71, 29, 77, 
	77, 77, 77, 77, 77, 77, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 50, 124, 
	0, 47, 0, 65, 29, 77, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 11, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 33, 33, 
	47, 33, 80, 0, 0, 35, 0, 0, 
	86, 83, 37, 89, 83, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 460;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 831 "js/lib/gherkin/lexer/pl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
  
/* line 838 "js/lib/gherkin/lexer/pl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1054 "js/lib/gherkin/lexer/pl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1093 "js/lib/gherkin/lexer/pl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();

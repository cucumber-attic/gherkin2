
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
;(function() {


/* line 117 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cs.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 39, 44, 
	49, 54, 59, 63, 67, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 88, 
	93, 100, 105, 107, 109, 112, 115, 118, 
	121, 124, 126, 127, 129, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	154, 156, 158, 160, 162, 164, 166, 168, 
	170, 172, 174, 176, 178, 180, 182, 184, 
	200, 201, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 217, 218, 219, 220, 232, 234, 236, 
	238, 240, 242, 244, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 265, 282, 283, 
	284, 285, 286, 287, 288, 289, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 331, 334, 335, 
	336, 337, 338, 339, 340, 341, 342, 343, 
	344, 356, 358, 360, 362, 364, 366, 368, 
	370, 372, 374, 376, 378, 380, 382, 384, 
	386, 388, 390, 392, 394, 396, 398, 400, 
	402, 404, 406, 408, 410, 412, 414, 416, 
	418, 420, 422, 424, 426, 428, 430, 432, 
	434, 436, 438, 440, 442, 444, 446, 449, 
	451, 453, 455, 457, 459, 461, 463, 465, 
	468, 470, 472, 474, 476, 478, 480, 482, 
	484, 486, 488, 490, 492, 494, 496, 498, 
	500, 502, 504, 506, 507, 508, 509, 510, 
	511, 512, 513, 514, 515, 516, 517, 518, 
	519, 520, 521, 522, 523, 537, 539, 541, 
	543, 545, 547, 549, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 570, 587, 588, 
	589, 590, 591, 592, 596, 602, 605, 607, 
	613, 629, 631, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 703, 705, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 752, 753, 754, 
	755, 756, 758, 760, 762, 764, 766, 769, 
	771, 774, 776, 778, 780, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	804, 806, 808, 810, 813, 830, 831, 832, 
	833, 834, 835, 837, 839, 841, 843, 845, 
	847, 849, 851, 853, 855, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 898, 900, 903, 905, 907, 909, 911, 
	913, 915, 917, 919, 921, 923, 925, 927, 
	929, 931, 933, 935, 937, 938, 939
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 124, 9, 
	13, 34, 34, 10, 32, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 108, 10, 116, 10, 13, 97, 
	10, 13, 107, -61, 10, 13, -87, 10, 
	13, 10, 13, 32, 10, 13, 101, 100, 
	111, 121, -59, -66, 110, 116, 101, 120, 
	116, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 124, 9, 13, 
	-61, -95, -60, -115, 114, 116, 32, 83, 
	99, -61, -87, 110, -61, -95, -59, -103, 
	101, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 75, 80, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 116, 124, 
	9, 13, 115, 110, 111, 118, 97, 32, 
	115, -59, 97, 111, -103, -61, -83, 107, 
	108, 97, 100, 121, 58, 10, 10, 10, 
	32, 35, 80, 124, 9, 13, 10, 111, 
	-59, 10, -66, 10, 10, 97, 10, 100, 
	10, 97, 10, 118, 10, 101, 10, 107, 
	10, 58, 107, -59, 107, 122, -66, 97, 
	100, 97, 118, 101, 107, 58, 10, 10, 
	10, 32, 35, 37, 64, 75, 78, 79, 
	80, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 116, 10, 101, 
	10, 120, 10, 116, 10, 58, -61, 10, 
	-95, 10, -60, 10, -115, 10, 10, 114, 
	10, 116, 10, 32, 10, 83, 10, 99, 
	-61, 10, -87, 10, 10, 110, -61, 10, 
	-95, 10, -59, 10, -103, 10, 10, 101, 
	10, 115, 10, 110, 10, 111, 10, 118, 
	10, 97, 10, 32, 10, 115, -59, 10, 
	111, -103, 10, -61, 10, -83, 10, 10, 
	107, 10, 108, 10, 97, 10, 100, 10, 
	121, -59, 10, 122, -66, 10, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 101, 
	10, 107, 10, 97, 10, 100, -61, 10, 
	-83, 10, 10, 99, -61, 10, -87, 10, 
	10, 110, -61, 10, -95, 10, -59, 10, 
	-103, 10, 117, 100, 97, 100, -61, -83, 
	99, -61, -87, 110, -61, -95, -59, -103, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 108, 10, 32, 34, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 116, 
	124, 9, 13, 97, 107, -61, -87, 32, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 124, 9, 13, 10, 101, 10, 
	100, 111, 10, 121, -59, 10, -66, 10, 
	10, 110, 10, 116, 10, 101, 10, 120, 
	10, 116, 10, 58, -61, 10, -95, 10, 
	-60, 10, -115, 10, 10, 114, 10, 116, 
	10, 32, 10, 83, 10, 99, -61, 10, 
	-87, 10, 10, 110, -61, 10, -95, 10, 
	-59, 10, -103, 10, 10, 101, 10, 115, 
	10, 110, 10, 111, 10, 118, 10, 97, 
	10, 32, 10, 115, 10, 97, 111, 10, 
	107, -59, 10, 107, 122, -66, 10, 10, 
	97, 10, 100, 10, 97, 10, 118, 10, 
	101, 10, 107, 10, 117, 10, 100, 10, 
	97, 10, 100, -61, 10, -83, 10, 10, 
	99, -61, 10, -87, 10, 10, 110, -61, 
	10, -95, 10, -59, 10, -103, 10, 97, 
	107, -61, -87, 32, 10, 101, 10, 100, 
	10, 121, -59, 10, -66, 10, 10, 97, 
	111, 10, 107, -59, 10, 107, -66, 10, 
	10, 97, 10, 100, 10, 97, 10, 118, 
	10, 101, 10, 107, 10, 58, 10, 117, 
	10, 100, 10, 99, -61, 10, -87, 10, 
	10, 110, -61, 10, -95, 10, -59, 10, 
	-103, 10, 10, 32, 108, 10, 32, 34, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 116, 124, 9, 13, 97, 107, 
	-61, -87, 32, 10, 101, 10, 100, 10, 
	121, -59, 10, -66, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 101, 10, 
	58, 10, 115, 10, 110, 10, 111, 10, 
	118, 10, 97, 10, 32, 10, 115, 10, 
	97, 111, 10, 107, -59, 10, 107, -66, 
	10, 10, 97, 10, 100, 10, 97, 10, 
	118, 10, 101, 10, 107, 10, 117, 10, 
	100, 10, 99, -61, 10, -87, 10, 10, 
	110, -61, 10, -95, 10, -59, 10, -103, 
	10, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 3, 2, 2, 3, 3, 3, 3, 
	3, 2, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 14, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 15, 1, 1, 
	1, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 15, 1, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	14, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 15, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 41, 46, 
	51, 56, 61, 65, 69, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	114, 121, 126, 129, 132, 136, 140, 144, 
	148, 152, 155, 157, 160, 162, 164, 166, 
	168, 170, 172, 174, 176, 178, 180, 182, 
	196, 199, 202, 205, 208, 211, 214, 217, 
	220, 223, 226, 229, 232, 235, 238, 241, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 309, 312, 315, 
	318, 321, 324, 327, 330, 333, 336, 339, 
	342, 345, 348, 351, 354, 358, 375, 377, 
	379, 381, 383, 385, 387, 389, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 422, 425, 428, 431, 434, 437, 
	440, 443, 446, 449, 452, 454, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 541, 544, 547, 550, 553, 556, 
	559, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 595, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	657, 660, 663, 666, 669, 672, 675, 678, 
	681, 684, 687, 690, 693, 696, 699, 702, 
	705, 708, 711, 714, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 742, 744, 746, 748, 762, 765, 768, 
	771, 774, 777, 780, 783, 786, 789, 792, 
	795, 798, 801, 804, 807, 811, 828, 830, 
	832, 834, 836, 838, 842, 848, 852, 855, 
	861, 877, 880, 884, 887, 890, 893, 896, 
	899, 902, 905, 908, 911, 914, 917, 920, 
	923, 926, 929, 932, 935, 938, 941, 944, 
	947, 950, 953, 956, 959, 962, 965, 968, 
	971, 974, 977, 980, 983, 987, 990, 995, 
	998, 1001, 1004, 1007, 1010, 1013, 1016, 1019, 
	1022, 1025, 1028, 1031, 1034, 1037, 1040, 1043, 
	1046, 1049, 1052, 1055, 1058, 1060, 1062, 1064, 
	1066, 1068, 1071, 1074, 1077, 1080, 1083, 1087, 
	1090, 1094, 1097, 1100, 1103, 1106, 1109, 1112, 
	1115, 1118, 1121, 1124, 1127, 1130, 1133, 1136, 
	1139, 1142, 1145, 1148, 1152, 1169, 1171, 1173, 
	1175, 1177, 1179, 1182, 1185, 1188, 1191, 1194, 
	1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 
	1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 
	1245, 1248, 1251, 1254, 1257, 1260, 1263, 1266, 
	1269, 1273, 1276, 1280, 1283, 1286, 1289, 1292, 
	1295, 1298, 1301, 1304, 1307, 1310, 1313, 1316, 
	1319, 1322, 1325, 1328, 1331, 1333, 1335
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 18, 17, 17, 
	0, 21, 20, 22, 20, 19, 25, 24, 
	26, 24, 23, 25, 24, 27, 24, 23, 
	25, 24, 28, 24, 23, 30, 29, 29, 
	0, 2, 31, 31, 0, 33, 34, 32, 
	2, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	0, 50, 52, 53, 51, 0, 0, 0, 
	0, 54, 55, 56, 55, 55, 58, 57, 
	54, 2, 59, 7, 59, 0, 60, 61, 
	0, 0, 62, 50, 52, 53, 63, 51, 
	52, 53, 64, 51, 65, 52, 53, 51, 
	66, 52, 53, 51, 52, 53, 67, 51, 
	52, 53, 50, 68, 0, 69, 70, 0, 
	71, 0, 72, 0, 68, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 80, 79, 82, 81, 82, 83, 
	84, 85, 86, 84, 87, 88, 89, 90, 
	91, 92, 83, 81, 82, 93, 81, 82, 
	94, 81, 82, 95, 81, 82, 96, 81, 
	82, 97, 81, 82, 98, 81, 82, 99, 
	81, 82, 100, 81, 82, 101, 81, 82, 
	102, 81, 82, 103, 81, 82, 104, 81, 
	82, 105, 81, 82, 106, 81, 82, 107, 
	81, 109, 108, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 108, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 132, 0, 133, 
	0, 134, 0, 135, 0, 136, 0, 137, 
	0, 138, 0, 139, 0, 141, 140, 143, 
	142, 143, 144, 145, 146, 147, 145, 148, 
	149, 150, 151, 144, 142, 143, 152, 142, 
	143, 153, 142, 143, 154, 142, 143, 155, 
	142, 143, 156, 142, 143, 157, 142, 143, 
	158, 142, 143, 159, 142, 143, 160, 142, 
	143, 161, 142, 143, 162, 142, 143, 163, 
	142, 143, 164, 142, 143, 165, 142, 143, 
	166, 142, 143, 167, 168, 142, 109, 108, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 169, 121, 108, 0, 170, 
	0, 171, 0, 172, 0, 173, 0, 174, 
	0, 175, 0, 129, 0, 176, 177, 178, 
	0, 179, 0, 180, 0, 181, 0, 182, 
	0, 183, 0, 184, 0, 185, 0, 186, 
	0, 187, 0, 189, 188, 191, 190, 191, 
	192, 193, 194, 193, 192, 190, 191, 195, 
	190, 196, 191, 190, 197, 191, 190, 191, 
	198, 190, 191, 199, 190, 191, 200, 190, 
	191, 201, 190, 191, 202, 190, 191, 203, 
	190, 191, 204, 190, 68, 0, 205, 206, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 0, 217, 216, 219, 218, 219, 220, 
	221, 222, 221, 223, 224, 225, 226, 227, 
	220, 218, 219, 228, 218, 219, 229, 218, 
	219, 230, 218, 219, 231, 218, 219, 232, 
	218, 219, 233, 218, 219, 234, 218, 219, 
	235, 218, 219, 236, 218, 219, 237, 218, 
	219, 238, 218, 219, 239, 218, 219, 240, 
	218, 219, 241, 218, 219, 242, 218, 219, 
	243, 218, 219, 244, 218, 219, 245, 218, 
	219, 246, 218, 219, 247, 218, 219, 248, 
	218, 249, 219, 218, 250, 219, 218, 251, 
	219, 218, 252, 219, 218, 219, 253, 218, 
	219, 254, 218, 219, 255, 218, 219, 256, 
	218, 219, 257, 218, 258, 219, 218, 259, 
	219, 218, 219, 260, 218, 261, 219, 218, 
	262, 219, 218, 263, 219, 218, 264, 219, 
	218, 219, 247, 218, 219, 265, 218, 219, 
	266, 218, 219, 267, 218, 219, 268, 218, 
	219, 269, 218, 219, 270, 218, 219, 256, 
	218, 271, 219, 272, 218, 273, 219, 218, 
	274, 219, 218, 275, 219, 218, 219, 276, 
	218, 219, 277, 218, 219, 278, 218, 219, 
	279, 218, 219, 247, 218, 280, 219, 281, 
	218, 282, 219, 218, 219, 283, 218, 219, 
	284, 218, 219, 285, 218, 219, 286, 218, 
	219, 287, 218, 219, 247, 218, 219, 288, 
	218, 219, 289, 218, 290, 219, 218, 247, 
	219, 218, 219, 291, 218, 292, 219, 218, 
	293, 219, 218, 219, 294, 218, 295, 219, 
	218, 296, 219, 218, 297, 219, 218, 247, 
	219, 218, 298, 0, 68, 0, 299, 0, 
	300, 0, 301, 0, 77, 0, 302, 0, 
	303, 0, 304, 0, 305, 0, 306, 0, 
	307, 0, 308, 0, 309, 0, 310, 0, 
	312, 311, 314, 313, 314, 315, 316, 317, 
	318, 316, 319, 320, 321, 322, 323, 324, 
	315, 313, 314, 325, 313, 314, 326, 313, 
	314, 327, 313, 314, 328, 313, 314, 329, 
	313, 314, 330, 313, 314, 331, 313, 314, 
	332, 313, 314, 333, 313, 314, 334, 313, 
	314, 335, 313, 314, 336, 313, 314, 337, 
	313, 314, 338, 313, 314, 339, 313, 314, 
	340, 341, 313, 109, 108, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	342, 121, 108, 0, 343, 0, 344, 0, 
	345, 0, 346, 0, 339, 0, 347, 348, 
	347, 0, 351, 350, 352, 353, 350, 349, 
	0, 355, 356, 354, 0, 355, 354, 351, 
	357, 355, 356, 357, 354, 351, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 370, 358, 0, 314, 371, 313, 
	314, 372, 373, 313, 314, 374, 313, 375, 
	314, 313, 371, 314, 313, 314, 376, 313, 
	314, 377, 313, 314, 378, 313, 314, 379, 
	313, 314, 380, 313, 314, 339, 313, 381, 
	314, 313, 382, 314, 313, 383, 314, 313, 
	384, 314, 313, 314, 385, 313, 314, 386, 
	313, 314, 387, 313, 314, 388, 313, 314, 
	389, 313, 390, 314, 313, 391, 314, 313, 
	314, 392, 313, 393, 314, 313, 394, 314, 
	313, 395, 314, 313, 396, 314, 313, 314, 
	380, 313, 314, 397, 313, 314, 398, 313, 
	314, 399, 313, 314, 400, 313, 314, 401, 
	313, 314, 402, 313, 314, 388, 313, 314, 
	403, 404, 313, 314, 371, 313, 405, 314, 
	406, 407, 313, 408, 314, 313, 314, 409, 
	313, 314, 410, 313, 314, 411, 313, 314, 
	412, 313, 314, 413, 313, 314, 380, 313, 
	314, 414, 313, 314, 371, 313, 314, 415, 
	313, 314, 416, 313, 417, 314, 313, 380, 
	314, 313, 314, 418, 313, 419, 314, 313, 
	420, 314, 313, 314, 421, 313, 422, 314, 
	313, 423, 314, 313, 424, 314, 313, 380, 
	314, 313, 425, 0, 426, 0, 427, 0, 
	428, 0, 166, 0, 143, 429, 142, 143, 
	430, 142, 143, 431, 142, 432, 143, 142, 
	429, 143, 142, 143, 433, 434, 142, 143, 
	429, 142, 435, 143, 436, 142, 437, 143, 
	142, 143, 438, 142, 143, 439, 142, 143, 
	440, 142, 143, 441, 142, 143, 442, 142, 
	143, 443, 142, 143, 166, 142, 143, 444, 
	142, 143, 429, 142, 143, 445, 142, 446, 
	143, 142, 447, 143, 142, 143, 448, 142, 
	449, 143, 142, 450, 143, 142, 451, 143, 
	142, 443, 143, 142, 82, 452, 453, 81, 
	109, 108, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 454, 121, 108, 
	0, 455, 0, 456, 0, 457, 0, 458, 
	0, 107, 0, 82, 459, 81, 82, 460, 
	81, 82, 461, 81, 462, 82, 81, 459, 
	82, 81, 463, 82, 81, 464, 82, 81, 
	465, 82, 81, 466, 82, 81, 82, 467, 
	81, 82, 468, 81, 82, 469, 81, 82, 
	470, 81, 82, 471, 81, 472, 82, 81, 
	473, 82, 81, 82, 474, 81, 475, 82, 
	81, 476, 82, 81, 477, 82, 81, 478, 
	82, 81, 82, 479, 81, 82, 107, 81, 
	82, 480, 81, 82, 481, 81, 82, 482, 
	81, 82, 483, 81, 82, 484, 81, 82, 
	485, 81, 82, 470, 81, 82, 486, 487, 
	81, 82, 459, 81, 488, 82, 489, 81, 
	490, 82, 81, 82, 491, 81, 82, 492, 
	81, 82, 493, 81, 82, 494, 81, 82, 
	495, 81, 82, 479, 81, 82, 496, 81, 
	82, 459, 81, 82, 497, 81, 498, 82, 
	81, 499, 82, 81, 82, 500, 81, 501, 
	82, 81, 502, 82, 81, 503, 82, 81, 
	479, 82, 81, 504, 0, 1, 0, 505, 
	0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 12, 14, 28, 31, 
	34, 43, 72, 110, 117, 233, 267, 420, 
	4, 5, 6, 7, 7, 7, 8, 7, 
	7, 7, 8, 9, 10, 11, 2, 11, 
	12, 2, 13, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	422, 29, 30, 30, 2, 13, 32, 33, 
	2, 32, 31, 33, 35, 42, 36, 37, 
	38, 39, 40, 41, 28, 44, 47, 45, 
	46, 48, 49, 50, 51, 52, 53, 54, 
	55, 54, 55, 55, 2, 56, 70, 363, 
	371, 375, 393, 400, 412, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 2, 71, 2, 2, 3, 12, 
	14, 28, 31, 34, 43, 72, 110, 117, 
	233, 267, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 91, 92, 
	92, 2, 93, 107, 108, 338, 342, 355, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 2, 71, 109, 
	337, 332, 111, 112, 113, 114, 115, 116, 
	118, 140, 141, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 128, 129, 
	129, 2, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 71, 142, 227, 229, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 151, 152, 152, 2, 153, 167, 
	174, 191, 198, 219, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 2, 168, 169, 170, 171, 172, 173, 
	71, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	190, 192, 193, 194, 195, 196, 197, 199, 
	207, 200, 201, 202, 203, 204, 205, 206, 
	208, 215, 209, 210, 211, 212, 213, 214, 
	216, 217, 218, 220, 221, 222, 223, 224, 
	225, 226, 228, 230, 231, 232, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 243, 244, 244, 2, 245, 259, 260, 
	274, 284, 301, 308, 324, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 255, 256, 
	257, 258, 2, 71, 261, 273, 262, 263, 
	264, 265, 266, 267, 268, 269, 271, 272, 
	270, 268, 269, 270, 268, 271, 272, 3, 
	12, 14, 28, 31, 34, 43, 72, 110, 
	117, 233, 267, 259, 275, 278, 276, 277, 
	279, 280, 281, 282, 283, 285, 286, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 300, 302, 303, 304, 
	305, 306, 307, 309, 310, 311, 318, 320, 
	312, 313, 314, 315, 316, 317, 319, 321, 
	322, 323, 325, 326, 327, 328, 329, 330, 
	331, 333, 334, 335, 336, 107, 339, 340, 
	341, 343, 344, 345, 353, 346, 347, 348, 
	349, 350, 351, 352, 354, 356, 357, 358, 
	359, 360, 361, 362, 364, 370, 365, 366, 
	367, 368, 369, 70, 372, 373, 374, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	394, 395, 396, 397, 398, 399, 401, 402, 
	403, 410, 404, 405, 406, 407, 408, 409, 
	411, 413, 414, 415, 416, 417, 418, 419, 
	421, 0
];

const _lexer_trans_actions = [
	39, 0, 47, 3, 1, 0, 25, 1, 
	25, 25, 25, 25, 25, 25, 31, 0, 
	0, 0, 47, 5, 41, 119, 41, 0, 
	29, 111, 29, 29, 0, 7, 95, 0, 
	0, 103, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 50, 0, 99, 19, 0, 23, 
	107, 23, 44, 0, 0, 0, 50, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 0, 65, 29, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 11, 27, 115, 53, 50, 
	27, 56, 50, 56, 56, 56, 56, 56, 
	56, 59, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 71, 29, 77, 77, 77, 77, 77, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 124, 0, 47, 
	0, 74, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	50, 124, 0, 47, 0, 62, 29, 77, 
	77, 77, 77, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 50, 
	124, 0, 47, 0, 68, 29, 77, 77, 
	77, 77, 77, 77, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 33, 47, 
	33, 80, 0, 0, 35, 0, 0, 86, 
	83, 37, 89, 83, 89, 89, 89, 89, 
	89, 89, 92, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

const _lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
];

const lexer_start = 1;
const lexer_first_final = 422;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 120 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

/* line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

/* line 122 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 781 "js/lib/gherkin/lexer/cs.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 153 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
  
/* line 788 "js/lib/gherkin/lexer/cs.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    this.listener.py_string(con, this.current_line); 
  		break;
case 4:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 5:
/* line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 6:
/* line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 7:
/* line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 8:
/* line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 9:
/* line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 11:
/* line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 12:
/* line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.line_number++;
  		break;
case 13:
/* line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.last_newline = p + 1;
  		break;
case 14:
/* line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 15:
/* line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.next_keyword_start = p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 18:
/* line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 19:
/* line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1004 "js/lib/gherkin/lexer/cs.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1043 "js/lib/gherkin/lexer/cs.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 154 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

if(typeof exports != 'undefined') {
  exports.Lexer = Lexer;
}
if(typeof window != 'undefined') {
  window.Lexer = Lexer;
}

})();
